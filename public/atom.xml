<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘健超(Jc)&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-09T13:14:09.809Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘健超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flex 学习</title>
    <link href="http://yoursite.com/2016/05/19/2016-5-19-css-flex/"/>
    <id>http://yoursite.com/2016/05/19/2016-5-19-css-flex/</id>
    <published>2016-05-19T12:14:06.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;之前以为Flexbox不成熟，兼容性不好，所以看了书本上的知识后就没有深入了解和实践。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在 &lt;a href=&quot;http://caniuse.com/#search=flex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can I use&lt;/a&gt; 网站上可看到 flex 的兼容情况。在该网站可以看到flex有新版和旧版的规范。&lt;/p&gt;
&lt;p&gt;先不管旧版，学习新版。&lt;/p&gt;
&lt;p&gt;学习资料是来自阮一峰老师的两篇教程：《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;》 和 《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex 布局教程：实例篇&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;若对 flex-basis、flex-grow与flex-shrink 的，可看《&lt;a href=&quot;http://zhoon.github.io/css3/2014/08/23/flex.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解css3中的flex-grow、flex-shrink、flex-basis&lt;/a&gt;》。&lt;/p&gt;
&lt;h3 id=&quot;Flex属性速记&quot;&gt;&lt;a href=&quot;#Flex属性速记&quot; class=&quot;headerlink&quot; title=&quot;Flex属性速记&quot;&gt;&lt;/a&gt;Flex属性速记&lt;/h3&gt;&lt;h4 id=&quot;Flex容器属性表格&quot;&gt;&lt;a href=&quot;#Flex容器属性表格&quot; class=&quot;headerlink&quot; title=&quot;Flex容器属性表格&quot;&gt;&lt;/a&gt;Flex容器属性表格&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flex容器属性&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;取值（第一个是默认值）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;flex-direction&lt;/td&gt;
&lt;td&gt;决定主轴的方向（即项目的排列方向）。&lt;/td&gt;
&lt;td&gt;row \ row-reverse \ column \ column-reverse;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex-wrap&lt;/td&gt;
&lt;td&gt;flex-wrap属性定义，如果一条轴线排不下，如何换行（默认是不换行）。&lt;/td&gt;
&lt;td&gt;nowrap \ wrap \ wrap-reverse;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex-flow&lt;/td&gt;
&lt;td&gt;是flex-direction属性和flex-wrap属性的简写形式&lt;/td&gt;
&lt;td&gt;默认值为row nowrap。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justify-content&lt;/td&gt;
&lt;td&gt;定义了项目在主轴上的对齐方式。&lt;/td&gt;
&lt;td&gt;flex-start \ flex-end \ center \ space-between \ space-around&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;align-items&lt;/td&gt;
&lt;td&gt;定义项目在交叉轴上如何对齐。&lt;/td&gt;
&lt;td&gt;flex-start \ flex-end \ center \ baseline \ stretch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;align-content&lt;/td&gt;
&lt;td&gt;定义了多根轴线（即项目也声明为Flex容器）的对齐方式。一根轴不起效&lt;/td&gt;
&lt;td&gt;stretch \ flex-end \ center \ space-between \ space-around \ flex-start&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Flex项目属性表格&quot;&gt;&lt;a href=&quot;#Flex项目属性表格&quot; class=&quot;headerlink&quot; title=&quot;Flex项目属性表格&quot;&gt;&lt;/a&gt;Flex项目属性表格&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flex项目属性&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;order&lt;/td&gt;
&lt;td&gt;定义项目的排列顺序。数值越小（负数有效），排列越靠前，默认为0。&lt;/td&gt;
&lt;td&gt;integer 默认为0，负值有效。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex-grow&lt;/td&gt;
&lt;td&gt;属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。&lt;/td&gt;
&lt;td&gt;number 默认值是0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex-shrink&lt;/td&gt;
&lt;td&gt;定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。0代表在空间不足时也不收缩。负值对该属性无效（相当于默认值 1）。&lt;/td&gt;
&lt;td&gt;number 默认值是1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex-basis&lt;/td&gt;
&lt;td&gt;定义了在分配容器空间之前，项目占据的主轴空间（main size）。默认值为auto，即项目的本来大小。&lt;/td&gt;
&lt;td&gt;length \ auto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flex&lt;/td&gt;
&lt;td&gt;是flex-grow, flex-shrink 和 flex-basis的简写&lt;/td&gt;
&lt;td&gt;默认值为0 1 auto。后两个属性可选。还有两个关键字：&lt;code&gt;auto&lt;/code&gt; (&lt;code&gt;1 1 auto&lt;/code&gt;) 和 &lt;code&gt;none&lt;/code&gt; (&lt;code&gt;0 0 auto&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;align-self&lt;/td&gt;
&lt;td&gt;允许单个项目有与其他项目不一样的对齐（交叉轴上）方式，即覆盖align-items属性。&lt;/td&gt;
&lt;td&gt;auto \ flex-start \ flex-end \ center \ baseline \ stretch 其中auto是默认值，表示继承父元素的align-items属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本文是自己的快速记录，你们想学可以看阮一峰老师的教程。&lt;/p&gt;
&lt;h3 id=&quot;Flex布局是什么？&quot;&gt;&lt;a href=&quot;#Flex布局是什么？&quot; class=&quot;headerlink&quot; title=&quot;Flex布局是什么？&quot;&gt;&lt;/a&gt;Flex布局是什么？&lt;/h3&gt;&lt;p&gt;Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
&lt;p&gt;任何一个容器都可以指定为Flex布局。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 旧版浏览器需要前浏览器前缀，如：-webkit-flex */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;行内元素也可以使用Flex布局。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效（已测试，的确是这样）。&lt;/p&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。当然，Flex项目也可以再次声明为Flex容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/flex.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。&lt;/p&gt;
&lt;p&gt;项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。&lt;/p&gt;
&lt;h3 id=&quot;容器的属性&quot;&gt;&lt;a href=&quot;#容器的属性&quot; class=&quot;headerlink&quot; title=&quot;容器的属性&quot;&gt;&lt;/a&gt;容器的属性&lt;/h3&gt;&lt;h4 id=&quot;flex-direction&quot;&gt;&lt;a href=&quot;#flex-direction&quot; class=&quot;headerlink&quot; title=&quot;flex-direction&quot;&gt;&lt;/a&gt;flex-direction&lt;/h4&gt;&lt;p&gt;决定主轴的方向（即项目的排列方向）。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;flex-direction&lt;/span&gt;: row | row-reverse | column | column-reverse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;flex-wrap&quot;&gt;&lt;a href=&quot;#flex-wrap&quot; class=&quot;headerlink&quot; title=&quot;flex-wrap&quot;&gt;&lt;/a&gt;flex-wrap&lt;/h4&gt;&lt;p&gt;默认情况下，项目都排在一条线（又称”轴线”，&lt;strong&gt;默认是不换行的&lt;/strong&gt;）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;flex-wrap&lt;/span&gt;: nowrap | wrap | wrap-reverse; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* wrap-reverse 行之间的倒序 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;flex-flow&quot;&gt;&lt;a href=&quot;#flex-flow&quot; class=&quot;headerlink&quot; title=&quot;flex-flow&quot;&gt;&lt;/a&gt;flex-flow&lt;/h4&gt;&lt;p&gt;是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。&lt;/p&gt;
&lt;h4 id=&quot;justify-content属性&quot;&gt;&lt;a href=&quot;#justify-content属性&quot; class=&quot;headerlink&quot; title=&quot;justify-content属性&quot;&gt;&lt;/a&gt;justify-content属性&lt;/h4&gt;&lt;p&gt;定义了项目在&lt;strong&gt;主轴&lt;/strong&gt;上的对齐方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/justify-content.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start（默认值）：左对齐&lt;/li&gt;
&lt;li&gt;flex-end：右对齐&lt;/li&gt;
&lt;li&gt;center： 居中&lt;/li&gt;
&lt;li&gt;space-between：两端对齐，项目之间的间隔都相等。&lt;/li&gt;
&lt;li&gt;space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;align-items属性&quot;&gt;&lt;a href=&quot;#align-items属性&quot; class=&quot;headerlink&quot; title=&quot;align-items属性&quot;&gt;&lt;/a&gt;align-items属性&lt;/h4&gt;&lt;p&gt;定义项目在交叉轴上如何对齐。&lt;/p&gt;
&lt;p&gt;它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start：交叉轴的起点对齐。&lt;/li&gt;
&lt;li&gt;flex-end：交叉轴的终点对齐。&lt;/li&gt;
&lt;li&gt;center：交叉轴的中点对齐。&lt;/li&gt;
&lt;li&gt;baseline： 项目的第一行文字的基线对齐。&lt;/li&gt;
&lt;li&gt;stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;align-content属性&quot;&gt;&lt;a href=&quot;#align-content属性&quot; class=&quot;headerlink&quot; title=&quot;align-content属性&quot;&gt;&lt;/a&gt;align-content属性&lt;/h4&gt;&lt;p&gt;定义了多根轴线（即项目也声明为Flex容器）的对齐方式。如果容器只有一根轴线，该属性不起作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/align-content.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start：与交叉轴的起点对齐。&lt;/li&gt;
&lt;li&gt;flex-end：与交叉轴的终点对齐。&lt;/li&gt;
&lt;li&gt;center：与交叉轴的中点对齐。&lt;/li&gt;
&lt;li&gt;space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。&lt;/li&gt;
&lt;li&gt;space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。&lt;/li&gt;
&lt;li&gt;stretch（默认值）：轴线占满整个交叉轴。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;项目的属性&quot;&gt;&lt;a href=&quot;#项目的属性&quot; class=&quot;headerlink&quot; title=&quot;项目的属性&quot;&gt;&lt;/a&gt;项目的属性&lt;/h3&gt;&lt;h4 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h4&gt;&lt;p&gt;定义项目的排列顺序。数值越小（负数有效），排列越靠前，默认为0。&lt;/p&gt;
&lt;h4 id=&quot;flex-grow属性&quot;&gt;&lt;a href=&quot;#flex-grow属性&quot; class=&quot;headerlink&quot; title=&quot;flex-grow属性&quot;&gt;&lt;/a&gt;flex-grow属性&lt;/h4&gt;&lt;p&gt;属性定义项目的放大比例，&lt;strong&gt;默认为0，即如果存在剩余空间，也不放大&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;即：对于剩余空间（容器宽度-项目总占位），然后按照项目指定的大小（比例=当前项目值/总项目值）进行分配。&lt;/p&gt;
&lt;p&gt;如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。&lt;/p&gt;
&lt;h4 id=&quot;flex-shrink属性&quot;&gt;&lt;a href=&quot;#flex-shrink属性&quot; class=&quot;headerlink&quot; title=&quot;flex-shrink属性&quot;&gt;&lt;/a&gt;flex-shrink属性&lt;/h4&gt;&lt;p&gt;定义了项目的缩小比例，&lt;strong&gt;默认为1，即如果空间不足，该项目将缩小&lt;/strong&gt;。0代表在空间不足时也不收缩。&lt;/p&gt;
&lt;p&gt;负值对该属性无效（相当于默认值 1）。&lt;/p&gt;
&lt;p&gt;该属性的工作机制与&lt;code&gt;flex-grow&lt;/code&gt;一样，对&lt;code&gt;项目总占位&lt;/code&gt;超出容器的部分进行按比例分配，然后对各个 flex-shrink 不为 0 的项目按照分配到的宽度进行收缩（即项目原本宽度减去分配到的宽度）。&lt;/p&gt;
&lt;h4 id=&quot;flex-basis属性&quot;&gt;&lt;a href=&quot;#flex-basis属性&quot; class=&quot;headerlink&quot; title=&quot;flex-basis属性&quot;&gt;&lt;/a&gt;flex-basis属性&lt;/h4&gt;&lt;p&gt;定义了在分配容器空间之前，项目占据的主轴空间（main size）。&lt;/p&gt;
&lt;p&gt;它的默认值为auto，即项目的本来大小。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;flex-basis&lt;/span&gt;: &amp;lt;length&amp;gt; | auto; &lt;span class=&quot;comment&quot;&gt;/* default value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时设置flex-basis和width，那么width属性会被覆盖，也就是说flex-basis的优先级比width高。有一点需要注意的是：如果flex-basis和width其中有一个是auto，那么另外一个非auto的属性优先级会更高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;flex属性&quot;&gt;&lt;a href=&quot;#flex属性&quot; class=&quot;headerlink&quot; title=&quot;flex属性&quot;&gt;&lt;/a&gt;flex属性&lt;/h4&gt;&lt;p&gt;flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: none | [ &amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;flex-grow&#39;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;flex-shrink&#39;&lt;/span&gt;&amp;gt;? || &amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;flex-basis&#39;&lt;/span&gt;&amp;gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该属性有两个关键字：&lt;code&gt;auto&lt;/code&gt; (&lt;code&gt;1 1 auto&lt;/code&gt;) 和 &lt;code&gt;none&lt;/code&gt; (&lt;code&gt;0 0 auto&lt;/code&gt;)。&lt;/p&gt;
&lt;h4 id=&quot;align-self属性&quot;&gt;&lt;a href=&quot;#align-self属性&quot; class=&quot;headerlink&quot; title=&quot;align-self属性&quot;&gt;&lt;/a&gt;align-self属性&lt;/h4&gt;&lt;p&gt;允许单个项目有与其他项目不一样的对齐（交叉轴上）方式，即覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;align-self&lt;/span&gt;: auto | flex-start | flex-end | center | baseline | stretch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了auto，其余与align-items 一样。&lt;/p&gt;
&lt;p&gt;希望能尽快应用到项目中。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前以为Flexbox不成熟，兼容性不好，所以看了书本上的知识后就没有深入了解和实践。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>《CSS 揭秘》读书笔记</title>
    <link href="http://yoursite.com/2016/05/18/2016-5-18-css-scerets-notes/"/>
    <id>http://yoursite.com/2016/05/18/2016-5-18-css-scerets-notes/</id>
    <published>2016-05-18T04:41:10.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;终于看完了《CSS揭秘》了，下面就做一下笔记。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对querySelectorAll进行封装：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$$&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;selector, context&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context = context || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = context.querySelectorAll(selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(elements);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检测某个样式属性是否被支持，核心思路是在任意元素的 &lt;code&gt;element.style&lt;/code&gt; 对象上检查该属性是否存在：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;funcion testProperty(property)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; root = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement; &lt;span class=&quot;comment&quot;&gt;// &amp;lt;html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(property &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; root.style)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root.classList.add(property.toLowerCase());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.classList.add(&lt;span class=&quot;string&quot;&gt;&quot;no-&quot;&lt;/span&gt; + property.toLowerCase());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检测某个具体的&lt;strong&gt;属性值&lt;/strong&gt;是否支持，那就需要把它赋给对应的属性，然后再检查浏览器是不是还保存着这个值：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id, value, property&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dummy = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dummy.style[property] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dummy.style[property])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root.classList.add(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.classList.add(&lt;span class=&quot;string&quot;&gt;&quot;no-&quot;&lt;/span&gt; + id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果要检测选择符和@规则的支持情况：在解析CSS代码时，浏览器总会丢弃它自己无法识别的部分，因此可以动态地应用样式并检查它是否生效，以此来判断浏览器是否可以识别某个特性。当然，&lt;strong&gt;浏览器可以解析某个CSS特性并不代表它已经实现（或正确实现）了这个特性。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一章-引言&quot;&gt;&lt;a href=&quot;#第一章-引言&quot; class=&quot;headerlink&quot; title=&quot;第一章 引言&quot;&gt;&lt;/a&gt;第一章 引言&lt;/h2&gt;&lt;h3 id=&quot;浏览器前缀&quot;&gt;&lt;a href=&quot;#浏览器前缀&quot; class=&quot;headerlink&quot; title=&quot;浏览器前缀&quot;&gt;&lt;/a&gt;浏览器前缀&lt;/h3&gt;&lt;p&gt;标准的工作组需要网页开发者这一端的输入，以确保各项规范可以处理真实的开发需求。当实验性的技术被广泛应用到生产时，工作组就被这些技术早期的、实验性的版本捆住手脚了，因此一旦这些技术有变动，那些已经在用这些技术的网站就挂了。显然，这完全否定了让开发者尝试早期标准的好处。&lt;/p&gt;
&lt;p&gt;浏览器前缀就是解决方案之一。这个方案是指每个浏览器都可以实现这些实验性的（甚至是私有的、非标准的）特性，但要在名称前加上自己特有的前缀。&lt;br&gt;最终标准化的版本会有一个不同的名称（没有前缀），这样就不会与加前缀版本相冲突了。&lt;/p&gt;
&lt;p&gt;开发者为了避免浏览器日后更新（从而支持某属性），就先发制人地加上所有可能的浏览器前缀，再把无前缀的版本放在最后，以图一劳永逸。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-moz-border-radius&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-ms-border-radius&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-o-border-radius&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-webkit-border-radius&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border-radius&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;-ms-和-o-是多余的，这两个属性从未在任何浏览器中出现过，因为IE和Opera从开始就直接实现了border-radius这个无前缀版本的。&lt;/p&gt;
&lt;p&gt;由于开发者使用无前缀的属性是想确保代码的向前兼容，那么工作组想要修改这些无前缀语法就变得不可能了。我们基本上就跟这些半生不熟的早期规范绑在一起了。&lt;strong&gt;因此，浏览器前缀已是一场史诗般的失败&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最近，浏览器厂商已经很少以前缀的方式来实验性地实现新特性了。取而代之的是，通过&lt;strong&gt;配置开关&lt;/strong&gt;来启用，这样可以有效防止开发者在生产环境中使用它们。&lt;/p&gt;
&lt;h3 id=&quot;CSS编码技巧&quot;&gt;&lt;a href=&quot;#CSS编码技巧&quot; class=&quot;headerlink&quot; title=&quot;CSS编码技巧&quot;&gt;&lt;/a&gt;CSS编码技巧&lt;/h3&gt;&lt;p&gt;在软件开发中，保持代码的DRY（Don’t Repeat Yourself）和可维护性是最大的挑战之一，而这句话对于CSS也是适用的。&lt;/p&gt;
&lt;p&gt;在实践中，代码可维护性的最大要素是尽量减少改动时要编辑的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当某些值相互依赖时，应该把它们的相互关系用代码表达出来。&lt;/strong&gt;如按钮的字体与行高的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有时，代码易维护和代码量少不可兼得。&lt;/strong&gt;如元素的边框为10px宽，但左侧不加边框。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border-width&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只需一条声明就可以达到要求了，但如果日后要改动边框的宽度，就需要修改3处。如果把它拆成两条声明，则改起来容易多了，而且可读性或许更好一些：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border-width&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border-left-width&lt;/span&gt;: 0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;currentColor&lt;/strong&gt;这个变量的值是当前元素的color值。如果当前元素没有在CSS里显示地指定一个color值，那它的颜色值就遵从CSS规则，从父级元素继承而来。该关键字&lt;strong&gt;兼容IE9及以上&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;：inherit可以用在任何CSS属性（可继承的），而且它总是绑定到父元素的计算值（对伪元素来说，则会取该伪元素的宿主元素）。&lt;/p&gt;
&lt;p&gt;把表单元素的字体设定为与页面的其他部分相同，你无需重复指定字体属性，只需利用inherit即可。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;select&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;button&lt;/span&gt;&amp;#123; &lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;: inherit; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把超链接的颜色设定与页面中其它文本相同：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: inherit; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在创建提示框时，通过:before伪元素生成的小箭头能继承宿主元素的背景和边框样式：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.callout&amp;#123; position: relative; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.callout:before&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &quot;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;相信你的眼睛，而不是数字&quot;&gt;&lt;a href=&quot;#相信你的眼睛，而不是数字&quot; class=&quot;headerlink&quot; title=&quot;相信你的眼睛，而不是数字&quot;&gt;&lt;/a&gt;相信你的眼睛，而不是数字&lt;/h3&gt;&lt;p&gt;人的眼睛并不是一台完美的输入设备。有时候精准的尺度看起来并不精准，而我们的设计需要顺应这种偏差。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看一个完美居中的物体时，会感觉它并不居中。实际上，我们应该把这个物体从几何学的中心点再晚上稍微上挪一点。&lt;/li&gt;
&lt;li&gt;宽度相同的圆形和正方形，圆形会显得小一点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述视觉上的错觉在任何形式的视觉设计中都普遍存在，需要我们有针对性地进行调整。&lt;br&gt;常见的例子是：给一个文本容器设置内边距。无论文本多长，四边相同的内边距在实际效果看起来并不相等。原因在于，字母的形状在两端都比较整齐，而顶部和底部则往往参差不齐，从而导致你的眼睛把这些参差不齐的空缺部分感知为多出来的内边距。&lt;/p&gt;
&lt;h3 id=&quot;关于响应式设计&quot;&gt;&lt;a href=&quot;#关于响应式设计&quot; class=&quot;headerlink&quot; title=&quot;关于响应式设计&quot;&gt;&lt;/a&gt;关于响应式设计&lt;/h3&gt;&lt;p&gt;媒体查询不能以一种连续的方式来修复问题。它的工作原理基于某几个特定的断点。&lt;br&gt;添加的媒体查询越多，CSS代码就会变得越经不起折腾。应该把它作为最后的手段。&lt;/p&gt;
&lt;p&gt;媒体查询的断点不应该由具体的设备来决定，而应该根据设计自身来决定。&lt;/p&gt;
&lt;p&gt;避免不必要的媒介查询的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用百分比长度来取代固定长度。若做不到这点，可尝试使用与视口相关的单位（vw、wh、vmin、vmax）。&lt;/li&gt;
&lt;li&gt;需要在较大分辨率下取得固定宽度时，使用max-width而不是width。&lt;/li&gt;
&lt;li&gt;不要忘记为替换元素（如img、object、video、iframe等）设置max-width：100%。&lt;/li&gt;
&lt;li&gt;假设背景图片需要完整地铺满一个容器，不管容器尺寸如何变化，background-size:cover可以做到这点。需要注意的是，移动端带宽有限，把大图缩小显示往往不太明智。&lt;/li&gt;
&lt;li&gt;当图片（或其他元素）以行列式进行布局时，让视口宽度来决定列的数量。&lt;/li&gt;
&lt;li&gt;在使用多列文本时，指定column-width而不是column-count。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总的来说，思路是尽最大努力实现弹性可伸缩的布局，并在媒体查询的各个断点区间内指定相应的尺寸。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;合理使用简写&quot;&gt;&lt;a href=&quot;#合理使用简写&quot; class=&quot;headerlink&quot; title=&quot;合理使用简写&quot;&gt;&lt;/a&gt;合理使用简写&lt;/h3&gt;&lt;p&gt;合理使用简写是一种良好的防卫性编码方式，可以抵御未来的风险。&lt;/p&gt;
&lt;p&gt;如果只为某个属性提供一个值，那它会扩散并应用到列表中的每一项。如：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;background: url(tr.png) no-repeat top right / 2em 2em,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url(br.png) no-repeat bottom right / 2em 2em,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url(bl.png) no-repeat bottom left / 2em 2em;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可将重复的值从简写属性中抽出来写成一个展开式属性：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.png&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.png&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.png&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;left&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt;: 2&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt; 2&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-repeat&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;no-repeat&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于如background属性的值有歧义的属性，background-position（即使是初始值也要写出来）和background-size中间需要&lt;code&gt;/&lt;/code&gt;作为分隔。&lt;/p&gt;
&lt;p&gt;对于绝大多数的简写属性来说，并没有歧义问题，因而简写属性的多个值往往可以随意排列。&lt;/p&gt;
&lt;h2 id=&quot;第二章-背景与边框&quot;&gt;&lt;a href=&quot;#第二章-背景与边框&quot; class=&quot;headerlink&quot; title=&quot;第二章 背景与边框&quot;&gt;&lt;/a&gt;第二章 背景与边框&lt;/h2&gt;&lt;p&gt;background-clip: border-box（默认值）/padding-box/content-box&lt;/p&gt;
&lt;h3 id=&quot;多重边框&quot;&gt;&lt;a href=&quot;#多重边框&quot; class=&quot;headerlink&quot; title=&quot;多重边框&quot;&gt;&lt;/a&gt;多重边框&lt;/h3&gt;&lt;h4 id=&quot;box-shadow方案&quot;&gt;&lt;a href=&quot;#box-shadow方案&quot; class=&quot;headerlink&quot; title=&quot;box-shadow方案&quot;&gt;&lt;/a&gt;box-shadow方案&lt;/h4&gt;&lt;p&gt;box-shadow的第四个参数（称作“扩张半径”），通过指定正值或负值，可以让投影面积加大或者减少。&lt;br&gt;一个正值的扩张半径加上两个为零的偏移量以及为零的模糊值，得到的“投影”其实就像一道实线边框。&lt;br&gt;box-shadow支持逗号分隔符，可创建任意数量的投影。&lt;br&gt;box-shadow是层层叠加的，第一层投影位于最顶层，以此类推。&lt;/p&gt;
&lt;p&gt;注意点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投影的行为更边框（border）不完全一致，因为它不影响布局，而且也不会受到box-sizing属性的影响。&lt;/li&gt;
&lt;li&gt;不会响应鼠标事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;outline方案&quot;&gt;&lt;a href=&quot;#outline方案&quot; class=&quot;headerlink&quot; title=&quot;outline方案&quot;&gt;&lt;/a&gt;outline方案&lt;/h4&gt;&lt;p&gt;outline: 5px solid #655; 它可通过outline-offset属性来控制它跟元素边缘之间的间距，这个属性甚至可以接受负值。&lt;/p&gt;
&lt;p&gt;需要注意的是：它目前并不贴合border-radius，未来可能会改为贴合。&lt;/p&gt;
&lt;h4 id=&quot;灵活的背景定位&quot;&gt;&lt;a href=&quot;#灵活的背景定位&quot; class=&quot;headerlink&quot; title=&quot;灵活的背景定位&quot;&gt;&lt;/a&gt;灵活的背景定位&lt;/h4&gt;&lt;p&gt;background-origin: padding-box（默认值）/content-box/border-box。&lt;/p&gt;
&lt;p&gt;calc()需要注意的是：要在&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;+&lt;/code&gt;运算符的两侧各加一个空白符，否则会产生解析错误！这是为了向前兼容：未来，在calc()内部可能会允许使用关键字，而这些关键字可能会包含连字符（即&lt;code&gt;-&lt;/code&gt;）。&lt;br&gt;当然calc()还能进行乘法与除法。&lt;/p&gt;
&lt;h4 id=&quot;条纹背景&quot;&gt;&lt;a href=&quot;#条纹背景&quot; class=&quot;headerlink&quot; title=&quot;条纹背景&quot;&gt;&lt;/a&gt;条纹背景&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;渐变需要注意的点&lt;/strong&gt;&lt;br&gt;渐变指定的位置是色标的位置，色标之间的距离是过渡的空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渐变的角度&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/%E6%B8%90%E5%8F%98%E8%A7%92%E5%BA%A6.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上述引用，我可以在构建条纹时（无过渡）时，把第二个坐标（即后续坐标）的位置值设置为0，那它的位置就总是会被浏览器调整为前一个色标的位置值。&lt;br&gt;这可以避免每次改动条纹宽度时都要修改两个数字。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 30%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;复杂的背景&quot;&gt;&lt;a href=&quot;#复杂的背景&quot; class=&quot;headerlink&quot; title=&quot;复杂的背景&quot;&gt;&lt;/a&gt;复杂的背景&lt;/h4&gt;&lt;p&gt;对于现代浏览器，我们可以把SVG文件以data URI的方式嵌入到样式表中，甚至不需要用base64或URIencode来对其编码：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;background: url(&quot;data:image/svg+xml, \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;svg&amp;gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ... \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/svg&amp;gt;&quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，如果出于可读性的考虑，需要把一句CSS代码（如background-image的字符串值）打断为多行，可用反斜杠（&lt;code&gt;\&lt;/code&gt;）来转义每行末尾的换行。&lt;/p&gt;
&lt;h4 id=&quot;伪随机背景&quot;&gt;&lt;a href=&quot;#伪随机背景&quot; class=&quot;headerlink&quot; title=&quot;伪随机背景&quot;&gt;&lt;/a&gt;伪随机背景&lt;/h4&gt;&lt;p&gt;与box-shadow一样，多图背景的位置（默认）都是从最左侧开始的。&lt;/p&gt;
&lt;h4 id=&quot;连续的图像边框&quot;&gt;&lt;a href=&quot;#连续的图像边框&quot; class=&quot;headerlink&quot; title=&quot;连续的图像边框&quot;&gt;&lt;/a&gt;连续的图像边框&lt;/h4&gt;&lt;p&gt;MDN：浏览器应用了border-image，则不再应用border-style。另外，若border-image-source的值为none或图片不能显示，则将应用border-style。&lt;/p&gt;
&lt;h2 id=&quot;第三章-形状&quot;&gt;&lt;a href=&quot;#第三章-形状&quot; class=&quot;headerlink&quot; title=&quot;第三章 形状&quot;&gt;&lt;/a&gt;第三章 形状&lt;/h2&gt;&lt;h3 id=&quot;梯形标签页&quot;&gt;&lt;a href=&quot;#梯形标签页&quot; class=&quot;headerlink&quot; title=&quot;梯形标签页&quot;&gt;&lt;/a&gt;梯形标签页&lt;/h3&gt;&lt;p&gt;为了更好地实现回退方案，可同样通过不兼容的属性进行设置，如：变形后需要上移的情况，此时，可用translateY，而不是margin-top或postion。&lt;/p&gt;
&lt;h3 id=&quot;简单的饼图&quot;&gt;&lt;a href=&quot;#简单的饼图&quot; class=&quot;headerlink&quot; title=&quot;简单的饼图&quot;&gt;&lt;/a&gt;简单的饼图&lt;/h3&gt;&lt;p&gt;一个负的延时值（animation-delay）是合法的。它会跳过指定时间而从中间开始播放。&lt;/p&gt;
&lt;p&gt;通过设置animation-play-state: paused，可让动画暂停。默认值是&lt;code&gt;running&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何改变伪元素的样式？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过继承，改变宿主元素&lt;/li&gt;
&lt;li&gt;通过animation，设置好一系列帧，然后设置延时值，以跳到某帧的样式（前提是处于暂停状态）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第四章-视觉效果&quot;&gt;&lt;a href=&quot;#第四章-视觉效果&quot; class=&quot;headerlink&quot; title=&quot;第四章 视觉效果&quot;&gt;&lt;/a&gt;第四章 视觉效果&lt;/h2&gt;&lt;h3 id=&quot;单侧投影&quot;&gt;&lt;a href=&quot;#单侧投影&quot; class=&quot;headerlink&quot; title=&quot;单侧投影&quot;&gt;&lt;/a&gt;单侧投影&lt;/h3&gt;&lt;p&gt;border-radius：2px 3px 4px rgba(0,0,0,.5);&lt;br&gt;使用高斯模糊（或类似算法）将它进行4px的模糊处理。这在本质上表示在阴影边缘发生&lt;strong&gt;阴影色&lt;/strong&gt;与&lt;strong&gt;纯透明色&lt;/strong&gt;之间的颜色过渡，长度近似于模糊半径的两倍（比如这里是&lt;code&gt;8px&lt;/code&gt;）。&lt;br&gt;模糊后的矩形&lt;strong&gt;与原始元素的交集部分会被切除掉&lt;/strong&gt;。因此，如果元素是半透明时，也会看不到它下层的投影。这点与text-shadow不同，文字下层的投影不会被裁切。&lt;/p&gt;
&lt;h3 id=&quot;不规则投影&quot;&gt;&lt;a href=&quot;#不规则投影&quot; class=&quot;headerlink&quot; title=&quot;不规则投影&quot;&gt;&lt;/a&gt;不规则投影&lt;/h3&gt;&lt;p&gt;box-shadow会忽略元素的伪元素或半透明部分（只对整体进行投影），这类情况包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半透明图像、背景图像、或者border-image；&lt;/li&gt;
&lt;li&gt;元素设置了点状、虚线或半透明的边框，但没有背景（或者当background-clip不是border-box）时；&lt;/li&gt;
&lt;li&gt;对话气泡，它的小尾巴通常是通过伪元素生成；&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;filter: drop-shadow()与box-shadow的参数一样，但不包括扩张半径和inset关键字，也不支持逗号分隔符的多层投影。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;drop-shadow&lt;/span&gt;(2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;rgba&lt;/span&gt;(0,0,0,&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该属性能对很好地解决上述问题（伪元素、虚线边框、半透明背景等）。&lt;/p&gt;
&lt;p&gt;当然，它们的模糊算法可能不同，需要进行调整。&lt;/p&gt;
&lt;h3 id=&quot;毛玻璃效果&quot;&gt;&lt;a href=&quot;#毛玻璃效果&quot; class=&quot;headerlink&quot; title=&quot;毛玻璃效果&quot;&gt;&lt;/a&gt;毛玻璃效果&lt;/h3&gt;&lt;p&gt;filter: blur(); 是对自身进行模糊，但不透明。&lt;/p&gt;
&lt;p&gt;background-attach: fixed; 表示背景相对于视口固定（以视口的左上角为背景定位origin）。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。&lt;/p&gt;
&lt;h2 id=&quot;第六章-用户体验&quot;&gt;&lt;a href=&quot;#第六章-用户体验&quot; class=&quot;headerlink&quot; title=&quot;第六章 用户体验&quot;&gt;&lt;/a&gt;第六章 用户体验&lt;/h2&gt;&lt;h3 id=&quot;自定义复选框&quot;&gt;&lt;a href=&quot;#自定义复选框&quot; class=&quot;headerlink&quot; title=&quot;自定义复选框&quot;&gt;&lt;/a&gt;自定义复选框&lt;/h3&gt;&lt;p&gt;新伪类 &lt;code&gt;:checked&lt;/code&gt;，该伪类只在复选框（也适用于单选框）被选择时才会匹配，不论这个选择状态是由用户交互触发，还是由脚本触发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性选择符[checked]与它不同，该选择符不会根据用户的交互行为进行更新，因为用户的交互并不会影响到HTML标签上的属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于没有多少样式能够对复选框（由于是替换元素）起作用。不过，可基于复选框的勾选状态借助组合选择符给其他元素（label）设置样式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;替换元素：其内容超出了CSS格式化模型的范畴，比如图片、嵌入的文档等。原则上我们无法为替换元素添加生成性内容，尽管某些浏览器可能会允许这样做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;awesome&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;awesome&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Awesome!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;input[type=&quot;checkbox&quot;] + label::before&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input[type=&quot;checkbox&quot;]:checked + label::before&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当label元素与复选框关联后，也可以起到触发开关的作用。&lt;/p&gt;
&lt;h3 id=&quot;交互式的图片对比控件&quot;&gt;&lt;a href=&quot;#交互式的图片对比控件&quot; class=&quot;headerlink&quot; title=&quot;交互式的图片对比控件&quot;&gt;&lt;/a&gt;交互式的图片对比控件&lt;/h3&gt;&lt;p&gt;即使不设置 pointer-events: none;的情况下，伪元素（覆盖在它之上）也不会干扰调节手柄（resize:both）的功能。 &lt;/p&gt;
&lt;p&gt;user-select:none; 作用：？？？？&lt;/p&gt;
&lt;h2 id=&quot;第七章-结构与布局&quot;&gt;&lt;a href=&quot;#第七章-结构与布局&quot; class=&quot;headerlink&quot; title=&quot;第七章 结构与布局&quot;&gt;&lt;/a&gt;第七章 结构与布局&lt;/h2&gt;&lt;p&gt;min-content：该关键字将解析为这个容器内部最大的不可断行元素的宽度（即最宽单词、图片或具有固定宽度的盒元素）。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;min-content&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有max-content与fit-content关键字。&lt;/p&gt;
&lt;h3 id=&quot;精确控制表格列宽&quot;&gt;&lt;a href=&quot;#精确控制表格列宽&quot; class=&quot;headerlink&quot; title=&quot;精确控制表格列宽&quot;&gt;&lt;/a&gt;精确控制表格列宽&lt;/h3&gt;&lt;p&gt;table默认情况下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不指定单元格的宽度，则这些单元格就会根据它们内容的长短来分配。&lt;/li&gt;
&lt;li&gt;当然，表格的每一行都会参与到列宽的计算中，而不仅是第一行&lt;/li&gt;
&lt;li&gt;即时我们为单元格指定了宽度（第一列1000px，第二列2000px），由于外层容器所能提供的宽度不足3000px，则这两个单元格的宽度会按比列缩小，分别得到33.3% 和 66.6%。&lt;/li&gt;
&lt;li&gt;如果禁止文本折行，那么表格宽度可能会超出其容器宽度（设置text-overflow:ellipsis;也没用（也不会显示…））。&lt;/li&gt;
&lt;li&gt;大图片也会导致上一点同样的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而table-layout&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;table&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;table-layout&lt;/span&gt;: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不指定任何宽度，则各列宽度将是平均分配；&lt;/li&gt;
&lt;li&gt;后续的表格行并不会影响列宽；&lt;/li&gt;
&lt;li&gt;给单元格指定很大的宽度也能生效，并不会自动缩小；&lt;/li&gt;
&lt;li&gt;overflow和text-overflow属性都正常生效；&lt;/li&gt;
&lt;li&gt;如果overflow的值是visible，则&lt;strong&gt;单元格的内容&lt;/strong&gt;可能会溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;根据兄弟元素的数量来设置样式&quot;&gt;&lt;a href=&quot;#根据兄弟元素的数量来设置样式&quot; class=&quot;headerlink&quot; title=&quot;根据兄弟元素的数量来设置样式&quot;&gt;&lt;/a&gt;根据兄弟元素的数量来设置样式&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(4), /* 由于`~`选择符不包括自身 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(4) ~ li&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该选择符 &lt;code&gt;li:first-child:nth-last-child(4)&lt;/code&gt; 表示：&lt;strong&gt;一个正好有四个列表项的列表中的第一个列表项&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;根据上述选择符，再通过 &lt;code&gt;~&lt;/code&gt; 兄弟选择符，即可实现根据数量来设置样式（这里是只有li为4个时）。&lt;/p&gt;
&lt;p&gt;根据兄弟元素的数量范围来匹配元素&lt;br&gt;:nth-child()选择符，它的参数可以是简单数字，也可以像 &lt;code&gt;an+b&lt;/code&gt; 这样的表达式，&lt;code&gt;n&lt;/code&gt; 表示0到 &lt;code&gt;正无穷&lt;/code&gt;。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:nth-child()的值是从1开始，即nth-child(1)对应第一个元素。&lt;/li&gt;
&lt;li&gt;:nth-child(n+b)：则会选中除第一、二、三个子元素之外的所有子元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合之前的【根据兄弟元素的数量来设置样式】，下面这个选择器会选择：&lt;strong&gt;仅当列表中有4个或更少的列表项时&lt;/strong&gt;，才能匹配。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(-n+4), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(-n+4) ~ li&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而希望匹配列表包含2~6个列表项时：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(n+2):nth-last-child(-n+6), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li:first-child:nth-last-child(n+2):nth-last-child(-n+6) ~ li&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有上述选择符可看出，同一个选择符中，n的值并不一致，&lt;/p&gt;
&lt;h3 id=&quot;垂直居中&quot;&gt;&lt;a href=&quot;#垂直居中&quot; class=&quot;headerlink&quot; title=&quot;垂直居中&quot;&gt;&lt;/a&gt;垂直居中&lt;/h3&gt;&lt;p&gt;在某些浏览器中，transform可能会导致元素的显示有一些模糊，因为元素可能被放置在半个像素上。这个问题可以用tranform-style: preserve-3d 来修复。&lt;/p&gt;
&lt;p&gt;当使用Flexbox时，margin:auto可在水平和垂直方向上居中。另外，我们甚至不需要指定任何宽度：这个居中元素分配到的宽度等于 max-content。&lt;/p&gt;
&lt;h2 id=&quot;第八章-过渡与动画&quot;&gt;&lt;a href=&quot;#第八章-过渡与动画&quot; class=&quot;headerlink&quot; title=&quot;第八章 过渡与动画&quot;&gt;&lt;/a&gt;第八章 过渡与动画&lt;/h2&gt;&lt;p&gt;每个transform-origin都可以被两个translate()模拟出来。&lt;/p&gt;
&lt;p&gt;完！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;终于看完了《CSS揭秘》了，下面就做一下笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>记一波三折的电话二面</title>
    <link href="http://yoursite.com/2016/05/10/2016-5-10-second-phone-interview/"/>
    <id>http://yoursite.com/2016/05/10/2016-5-10-second-phone-interview/</id>
    <published>2016-05-10T14:37:35.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;这次在联系时，出现多次失误：&lt;br&gt;①在地铁上吵杂，面试官大喊也不能听清楚（手机太烂了）&lt;br&gt;②洗澡，手机静音，漏接。&lt;/p&gt;
&lt;p&gt;连面试官都不得不说：联系上你真的不容易。&lt;br&gt;在这里和面试官说一声：真的十分抱歉。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;面试官各方面都很快，可能我回答得不太好和面试时间比较晚，感觉没有深入问。&lt;/p&gt;
&lt;h2 id=&quot;问答&quot;&gt;&lt;a href=&quot;#问答&quot; class=&quot;headerlink&quot; title=&quot;问答&quot;&gt;&lt;/a&gt;问答&lt;/h2&gt;&lt;p&gt;这次没做好记录（录音），大概整理一下（乱序）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么你不参加校招？&lt;br&gt;答：主要是考虑到自己当了大四班长，平时比较多班级事务要处理，而且学院也会有临时会议要开，所以选择了加入师兄的创业团队（当然，公司找我的时候就是开发摇一摇页面，我也对移动端的前端开发感兴趣）。公司离学校10分钟车程，请假各方面也比较方便。&lt;br&gt;补充：其实自己之前对职业的观念也不够强吧。&lt;br&gt;感想：后来和面试官交流后，发现可能因为我没选择校招这种正式渠道，会导致我就成为了一个“特例”，导致很费人力物力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;班上有同学参加校招进入好的公司吗？&lt;br&gt;答：有，参加优酷的产品经理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jpg与png有什么差别？什么时候用？&lt;br&gt;答：png可带透明效果，而jpg不透明。jpg的文件大小也相对较小。  需要透明时就用png，不需要或背景颜色与图片颜色相同时用jpg（这都给我硬生生扯出来）。&lt;br&gt;补充：问题真的问得很细，我的回答应该得不到面试官的满意。后来发现在凹凸实验室的前端开发规范中有这方面的应用场景）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是响应式？有什么案例？&lt;br&gt;答：考虑到屏幕大小和网络状态（2g\3g\4g\wifi等）等对网页进行适配。&lt;br&gt;在我找案例的时候，面试官找到了共鸣网。我回答到：那是大二暑假时基于UIKit实现的。&lt;br&gt;补充：其实不止简历上的案例，但是一些作品并没有整理好放在网上。这题也视乎得不到面试官的满意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有看过雅虎前端35条规则吗？&lt;br&gt;答：有了解过，具体不清楚。但应用到的有与上面匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何启动3d加速？是什么属性？具体哪个？&lt;br&gt;答：设置z轴上的位移或will-change属性。translate3d()&lt;br&gt;补充：这段信息敲代码比较少，回答了transform3d，被面试官质疑后，立刻回答translate3d。而已当时觉得 translateZ 不好读，所以说了translate3d。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flex？&lt;br&gt;答：之前有学习过，是用于布局的，看过阮一峰老师的《Flex教程》，但是在实际应用上比较少用，因此记不清楚。&lt;br&gt;补充：再次被问到这个问题，看来在移动端很常用到。在我印象中兼用性不好。要好好再学一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有什么优化？延迟加载图片如何实现？&lt;br&gt;答：网络方面和前端面吧。例如同一域名下只能并发n个请求，因此对于静态资源可放到多个域名或CDN下。库的选型（是否适合和大小问题）、图片延迟加载。&lt;br&gt;图片延迟加载是通过getClientBoundingRect api（返回距离视口的距离）判断元素是否在视口内，若在则将data-src的值设置到图片的src上，从而下载图片。&lt;br&gt;补充：其实不止是图片延迟加载，还有其它资源（数据、脚本、css等），甚至还有预加载（在空闲时，预判用户将要获取的资源，提前下载资源，从而让需要该资源时，直接从缓存获取。）等等。这里提到的优化手段太少了。视乎不能让面试官满意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你们之前有设计师吗？那谁设计？还原过设计图吗？实习时有涉及到后台吗？&lt;br&gt;答：没有（惊呆面试官）；由于是创业公司，对设计这块要求并不细致，整体感觉OK就行。由我和老板（负责产品）设计。实习时没涉及到后台，公司后台主要有Java和PHP，PHP更多。&lt;br&gt;补充：这部分有些地方听不太清楚。其实还原设计稿是一个前端的基本工作，其实我还没真正接触过正规公司的流程，对于像素级别（0.5像素都不能差）有些压力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有用什么自动化工具吗？&lt;br&gt;答：用gulp。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;微信的分享接口是什么？&lt;br&gt;答：忘了。（你做微信方面的开发，难道对于分享都不熟悉？怎么实现分享，分享的API怎么拼？）因为公司只有我一个前端和三个后台，因此有些前端方面的东西他们也需要协调处理，真的忘了。&lt;br&gt;补充：对于微信方面的JS SDK，它们处理比较多，但我会编写分享后的回调函数。我们公司其实很多方面并不规范，因此会导致一些问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有规划的方向吗？每日todolist？&lt;br&gt;答：目前主要是看书，学习基础方面的东西，例如设计模式和代码结构等。等这方面成熟后，会真正接触一些比较潮流的东西，如React、Angular、Vue等。&lt;br&gt;每天会写todo list，因为总是用脑记着，会有些牵挂着或漏掉。当然这个不限于技术，还有学校方面的事情。还有2016年的计划。（今天有写todo吗？）没有，今天和昨天晚上和同学去深圳了，刚刚才回到宿舍。&lt;br&gt;补充：其实还有优化方面的知识。  其实我也有点忘了自己写了2016计划，后来翻着有道云笔记发现了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rem&lt;br&gt;答：根据html元素的字体大小设置大小。&lt;br&gt;补充：这题再次被问到，其实我一开始不明白面试官的用意。后来想明白了，因为针对高像素比的设备（主要是iPhone）的dpr的不同，动态设置html元素的字体大小和meta元素的缩放比例（如dpr为2的屏幕，让根元素的字体大小是普通屏幕的两倍，然后设置页面的缩放比例为0.5，从而将4个像素压缩在1个像素（在视网膜屏幕下，1个CSS像素对应的是4个物理像素）），让视网膜的iPhone用户得到更加细腻精致的界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存&lt;br&gt;答：localStorage和sessionStorage、还有HTTP头部字段的设置。&lt;br&gt;补充：这部分回答得很烂。需要学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Canvas&lt;br&gt;答：有学习过，之前看了《HTML5 Canvas 核心技术》这本书，写过一些小demo。&lt;br&gt;补充：之前比较早学的，还有个大概印象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React、Angular&lt;br&gt;答：React有学过，学的时候模仿了【卖座网】。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;第一次太嘈杂，听不清楚，第二次漏接电话，第三次才开始。一波三折啊。可能因为我回答得不太好，面试官基本没有深入问一些问题。语速也比较快，19分10秒搞掂了。但是这次我的表达也感觉比第一次好，是不是因为不是早上没睡醒的原因？还是面试官的快速带动了我呢？&lt;br&gt;一面重基础，二面重优化。&lt;br&gt;我这个没在正规公司呆过，没有参加校招，感觉在走特殊通道，导致要办很多额外手续的人，是否会继续呢？  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这次在联系时，出现多次失误：&lt;br&gt;①在地铁上吵杂，面试官大喊也不能听清楚（手机太烂了）&lt;br&gt;②洗澡，手机静音，漏接。&lt;/p&gt;
&lt;p&gt;连面试官都不得不说：联系上你真的不容易。&lt;br&gt;在这里和面试官说一声：真的十分抱歉。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>记突如其来的第一次电面</title>
    <link href="http://yoursite.com/2016/05/05/2016-5-4-first-phone-interview/"/>
    <id>http://yoursite.com/2016/05/05/2016-5-4-first-phone-interview/</id>
    <published>2016-05-04T19:25:43.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;昨天（2016年5月3日）突然收到**实验室的微信好友请求，有点突如其来的感觉。之前在他们博客放了github地址，他们以为我是大三的（走校招）。我告诉对方我是大四的，他们回复我说大四要走社招（2016年4月19日），原以为没希望了，结果今天收到他们的微信好友请求。在我没打算找工作的时间段找到我，难道是上天的安排？ &lt;/p&gt;
&lt;p&gt;Good luck to me.&lt;/p&gt;
&lt;p&gt;下面是记录的面试题：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;【备注】&lt;br&gt;答：基本和电面时回答的思路一样（当然通话时讲得比较乱）&lt;br&gt;补充：整理时，再思考的过程&lt;br&gt;感想：就是感想  &lt;/p&gt;
&lt;h3 id=&quot;对实习的描述&quot;&gt;&lt;a href=&quot;#对实习的描述&quot; class=&quot;headerlink&quot; title=&quot;对实习的描述&quot;&gt;&lt;/a&gt;对实习的描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;实习经历&lt;br&gt;答：回答得翔一样。&lt;br&gt;补充：应该简洁地讲述总体过程，然后对工作的重点（与别人不同）进行详细描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工作中主要负责前端吗？&lt;br&gt;答：是。另外公司只有我一个前端，对于一些页面我也会自己进行设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计使用Photoshop吗？Sketch有了解过吗？&lt;br&gt;答：是。Sketch 只是听说过，因为我用的 windows，所以没使用过。&lt;br&gt;感想：开发还是用Mac吧，尽管用过几次觉得没我现在的电脑好。也许是我没体验出Mac的真正优势吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;p&gt;自己的表达能力欠缺，尽管之前对方告诉我“不需要准备什么”，当天晚上我就真的不准备了，而是继续整理班级的事务，连最基本的对自己做过的事情也没梳理清楚。我觉得这是对对方的一种不尊重吧，毕竟对方也因为你而付出了很多时间。&lt;/p&gt;
&lt;h3 id=&quot;具体技术方面&quot;&gt;&lt;a href=&quot;#具体技术方面&quot; class=&quot;headerlink&quot; title=&quot;具体技术方面&quot;&gt;&lt;/a&gt;具体技术方面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CSS盒模型有了解过吗？&lt;br&gt; 答：块级元素（width、height、padding、margin组成）。考虑到box-sizing，当其值是border-box，width指定的值就是元素的总体宽度（包括内容宽度、padding和border）；当其值是content-box（默认值），width指定的值就是元素的内容宽度，元素的总体宽度由指定的width、padding和border决定；当然其实还有padding-box，但由于不常有，而且之前在看到该值已在标准中删除。&lt;br&gt; 当然min-width、max-width和width一样，取决于box-sizing。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/first-phone-interview-2016-05-05_012009.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt; 补充：当时主要回答了块级元素，其实display还有很多属性。现在对最常见的inline和inline-block进行补充：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline：垂直内边距、边框和外边距不影响行内框的高度。同样，显式设置高度或宽度也没有影响。修改行内框尺寸的唯一方法是修改行高或水平内边距、边框、外边距。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inline-block：让元素像行内元素一样水平依次排列，但框的内容仍然符合块级框的行为。支持IE8及以上。当初通过为元素设置 &lt;code&gt;*display:inline; zoom:1&lt;/code&gt; 可以模拟 &lt;code&gt;inline-block&lt;/code&gt; 的效果（其中 &lt;code&gt;*&lt;/code&gt; 是针对 IE6/7的 hack，而zoom:1 则触发元素在IE6/7特有的 hasLayout:true;）。具体可以看看《精通CSS》或《&lt;a href=&quot;https://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cross-Browser inlne-block&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;感想：当时回答并不顺利也没这里这么详细。看似简单的概念，但是一被问到，竟然完全蒙住了，不知道回答什么，也难以将这些知识点联系起来，最后感谢感谢面试官的一些提醒。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做自适应有什么方案？&lt;br&gt;答： 回答得好乱&lt;br&gt;补充：感觉对于这种开放式题目，一时半会比较难回答，需要对平时用到的解决方法进行快速总结。后来就和面试官说：看具体情况 –！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;屏幕里，一行内如何显示3个正方形？&lt;br&gt; 答：当 padding-top/bottom、margin-top/bottom 是百分比时，会根据父元素的宽度进行计算。因此，以下代码能实现自适应的九宫格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;title&amp;gt;九宫格&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			margin: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			padding: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.wrapper&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			width: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			font-size: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.col&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			width: 30%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			height: 0; // 显示设置height为0，避免内容影响元素的高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			padding-bottom: 30%; // 不设置 padding-top 是因为内容不受因 padding-top 而被挤下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			background-color: orange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			margin: 1.5%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：由于采用百分比，因此经过计算的值的具有小数的，而各个浏览器对小数的处理不一致，导致一行子元素的总占位大于父元素宽度，从而令每一行的最后一个元素挤到第二行。因此较好的方法是留有一些空白（如只对中间子元素设置margin-left/right，左右两侧子元素不设置margin-left/right），而不是完全采用margin将子元素隔开。   &lt;/p&gt;
&lt;p&gt;补充：我当时没讲到这么详细，只是提到了当 padding-top/bottom 和 margin-top/bottom 的值是百分比时 是根据父元素宽度进行计算的。另外，应该还有其它解决方案，如 视口宽度单位 &lt;code&gt;vw&lt;/code&gt;、JS动态计算等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最近流行一种根据rem来做自适应的，有了解过吗？&lt;br&gt; 答：回答的时候只说到了：rem 是根据跟元素（html）字体大小来设置大小的。&lt;br&gt; 补充： 因为之前只是了解这个属性，但在实际中比较少用到，看过相关帖子&lt;a href=&quot;http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《使用Flexible实现手淘H5页面的终端适配》&lt;/a&gt;。rem 是根据跟元素（html）字体大小来设置大小的。一般浏览器的根元素的字体大小是 &lt;code&gt;16px&lt;/code&gt;，设置根元素 &lt;code&gt;font-size: 62.5%&lt;/code&gt; 就是让根元素的字体大小为 &lt;code&gt;10px&lt;/code&gt;，方便后续元素的设置，如 &lt;code&gt;width:3rem&lt;/code&gt; 就是 &lt;code&gt;30px&lt;/code&gt;。我猜面试官是想问这个点吧：根据需求，如屏幕大小或 dpr，动态设置根元素的字体大小，而后续元素因为使用了 rem，与根元素的字体大小产生联系。从而实现自适应效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平时写CSS是用原生还是其它工具呢？&lt;br&gt; 答：一般是直接写原生的，知道有预处理（SASS\LESS\STYLUS），但是感觉自己体现不出它们的优势，平时也考虑到团队中，只有我一个前端，使用起来不太方便（因为有时候写完CSS，交给后端同事时，发现需要修改CSS，那考虑到快捷，会直接在后端那边修改。如果我使用CSS处理器，岂不是要同步修改？归根结底，这是团队规范问题吧）。&lt;br&gt; 补充：其实之前学过SASS，但是感觉自己接触的项目不算大，体现不出它的优势。预处理让CSS拥有编程语言的一些特性，对于有助于提高CSS的重复性和可维护性。有时候想，预处理器会不会让原本直接简洁CSS变得复杂起来？当然，存在即合理，只不过我还没发现它的美。希望，自己尽早能在项目中使用它。当然还有postcss这类CSS处理器，但只是听说过而已。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexbox这种布局熟悉？&lt;br&gt;答：不熟悉，之前看过阮一峰老师的相关教程。由于没应用到项目中，久而久之就记不清楚了。&lt;br&gt;补充：阮一峰老师的Flex相关教程：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;、&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex 布局教程：实例篇&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有用过node.js吗？&lt;br&gt;答：有，毕业设计做的简单系统就用到了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你的系统有用到express吗？它的中间件是如何工作的？&lt;br&gt;答：有，中间件像竹子那样，只有通过上一步才能到下一步。在上一步操作中，要使用 next，才能到达下一步的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何对MongoDB数据进行定时备份？&lt;br&gt;答：没做个这个操作。&lt;br&gt;补充：之前都是手动通过mongodef（GUI）导入导出数据库文件。我猜答案是：编写定时备份的shell脚本吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node程序reqiure一个库/文件/模块，它的查找过程是什么？&lt;br&gt;答：先区分是原生模块还是第三方模块，它们的处理是不同的，原生模块比较快，而第三方模块则会先从本地的node_modules文件夹找，若找不到，则会逐级向上查找。&lt;br&gt;补充：隐约记得朴灵的《深入浅出Node.js》里讲到的知识点吧。等有空把书上相关内容贴上来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ES6 有了解过吗？&lt;br&gt;答：还是看阮一峰的ES6教程吧，但是并没有应该在项目上，只是敲一下小demo。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你平时上网看一些博客和技术文档比较多是吧？我看你的翻译了好多。那些翻译是你自己找，还是伯乐在线指定你翻译的？&lt;br&gt;答：嗯，是的。前期加入伯乐在线的时候，主要是挑一些自己感兴趣或有用的文章进行翻译。后来，站长找我负责推荐前端方面的文章的工作，我每周都会向网站推荐一定数量的译文。因此，后来自己翻译就少了一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单说一下HTTP协议的三次握手。&lt;br&gt;答：建立连接前，客户端向服务器端发送一次请求，服务器端接收到该请求后就返回应答，而客户端收到服务器端的应答后，再次发送确认收到应答的信息。从而完成三次握手，然后可进行数据传输。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计这三次握手的目的是什么？&lt;br&gt;答： 确保双方知道对方，就好像打电话那样子。&lt;br&gt;补充：&lt;strong&gt;三次握手&lt;/strong&gt; 是为了准确无误地将数据送达目标处，TCP协议在发送数据的准备阶段采用了三次握手策略（若在握手过程中某个阶段中断，TCP协议会再次以相同的顺序发送相同的数据包）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学校这边的事情预计什么时候能弄完呢？&lt;br&gt;答：因为我担任大四班长，需要处理毕业的事情比较多。学校正式毕业的时间是6月底。不知道你们公司最好报道的时间是？（说得人家录取你一样，脸皮真厚！）&lt;br&gt;面试官回复：我们公司对于毕业生是7月份报道的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于JS这块，你平时写原生JS多吗？&lt;br&gt;答：看需求吧，之前公司的项目一般比较赶，所以还是会用到一些库。对于需求较为简单的移动端页面，会使用原生JS编写。最主要还是看需要吧。&lt;br&gt;补充：其实我还是比较怕被问到这个问题，之前面试也被问到这个问题。当时的回答和这个次回答还是差不多。有点悲催，继续加油吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要使用原生JS实现图片的滚动加载，要如何实现？&lt;br&gt;答：这题回答不好。忘了如何实现，醉了。也说到了 节流。&lt;br&gt;补充：其实就是之前发布在github上的 lazyExcute 插件。电面后再codereview时，好像发现一个BUG，有空再修复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讲一下我去摇的ibeacon通信。&lt;br&gt;答：ibeacon是近场通信工具，用户通过打开蓝牙，在微信摇一摇功能中摇一摇可以在ibeacon感应范围打开活动页面。&lt;br&gt;补充：其实我这题回答不好。尽管公司虽小，但我很少主动去了解公司的一些产品，这也是我做得不好的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;小结-1&quot;&gt;&lt;a href=&quot;#小结-1&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;p&gt;我个人觉得面试的问题还是比较全面的，尽管还是一些比较基本的问题。而且我也知道面试是看着我的Github问我问题，不知道是面试官放水还是验证我的Github有没有水分。我是个心机Boy，呵呵。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;原本以为只能参加社交，后来颇为突然的告诉我有应届生名额，惊喜。不知道是不是上天对我的眷恋。昨晚被蚊子和天气折腾到3点多才睡，早上8点多就起床等着电话的到来。迷迷糊糊地结束了人生第一次电面（25分钟）。&lt;br&gt;感觉电面需要较强的反应能力和思维能力，因为电话一般习惯不让对方对待，否则就好像挂断一样。&lt;br&gt;好好珍惜机会吧，不然只能看着机会慢慢地从你身边溜走。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;昨天（2016年5月3日）突然收到**实验室的微信好友请求，有点突如其来的感觉。之前在他们博客放了github地址，他们以为我是大三的（走校招）。我告诉对方我是大四的，他们回复我说大四要走社招（2016年4月19日），原以为没希望了，结果今天收到他们的微信好友请求。在我没打算找工作的时间段找到我，难道是上天的安排？ &lt;/p&gt;
&lt;p&gt;Good luck to me.&lt;/p&gt;
&lt;p&gt;下面是记录的面试题：&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript模式》读书笔记</title>
    <link href="http://yoursite.com/2016/04/26/2016-4-26-javascript-patterns-notes/"/>
    <id>http://yoursite.com/2016/04/26/2016-4-26-javascript-patterns-notes/</id>
    <published>2016-04-26T13:05:42.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在软件开发过程中，模式是指一个通用问题的解决方案。一个模式不仅仅是一个可以用来复制粘贴的代码解决方案，更多地是提供了一个更好的实践经验、有用的抽象化表示和解决一类问题的模板。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;对象有两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地对象（Native）：由ECMAScript标准定义的对象&lt;/li&gt;
&lt;li&gt;宿主对象（Host）：由宿主环境创建的对象（比如浏览器环境）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地对象也可以被归类为内置对象（比如Array、Date）或自定义对象（var o = {}）。&lt;br&gt;宿主对象包含window和所有DOM对象。如果你想知道你是否在使用宿主对象，将你的代码迁移到一个非浏览器环境中运行一下，如果正常工作，那么你的代码就只用到了本地对象。  &lt;/p&gt;
&lt;p&gt;“GoF”的书中提到一条通用规则，“组合优于继承”。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;console 对象&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本技巧&quot;&gt;&lt;a href=&quot;#基本技巧&quot; class=&quot;headerlink&quot; title=&quot;基本技巧&quot;&gt;&lt;/a&gt;基本技巧&lt;/h2&gt;&lt;p&gt;易维护的代码具有如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读的&lt;/li&gt;
&lt;li&gt;风格一致&lt;/li&gt;
&lt;li&gt;可预测的&lt;/li&gt;
&lt;li&gt;看起来像一个人写的&lt;/li&gt;
&lt;li&gt;有文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;尽量少用全局变量&quot;&gt;&lt;a href=&quot;#尽量少用全局变量&quot; class=&quot;headerlink&quot; title=&quot;尽量少用全局变量&quot;&gt;&lt;/a&gt;尽量少用全局变量&lt;/h3&gt;&lt;h4 id=&quot;全局变量的问题&quot;&gt;&lt;a href=&quot;#全局变量的问题&quot; class=&quot;headerlink&quot; title=&quot;全局变量的问题&quot;&gt;&lt;/a&gt;全局变量的问题&lt;/h4&gt;&lt;p&gt;隐式创建全部变量有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;未经声明的变量就为全局对象所有。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sum(x, y){
    result = x + y; // result 是全局变量;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带有 &lt;code&gt;var&lt;/code&gt; 声明的链式赋值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo(){
    var a = b = 0; // b 是全局变量
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 由于 &lt;code&gt;=&lt;/code&gt; 的运算顺序是从右到左。即 &lt;code&gt;var a = b = 0;&lt;/code&gt; 等价于 &lt;code&gt;var a = (b = 0)&lt;/code&gt;。&lt;br&gt; 因此，对于链式赋值建议做法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo(){
    var a, b;
    a = b = 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隐式创建的全局变量与明确定义的全局变量的不同之处在于：是否能被 &lt;code&gt;delete&lt;/code&gt; 操作符删除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 var 创建的全局变量（在函数外创建）不能删除&lt;/li&gt;
&lt;li&gt;不使用 var 创建的隐式全局变量（就算在函数内创建）可以删除&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var a = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete a; // false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete b; // true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete c; // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeof a; // number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeof b; // undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeof c; // undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在ES5 strict模式下，为未声明的变量赋值会抛出错误。&lt;/p&gt;
&lt;h3 id=&quot;单一var模式&quot;&gt;&lt;a href=&quot;#单一var模式&quot; class=&quot;headerlink&quot; title=&quot;单一var模式&quot;&gt;&lt;/a&gt;单一var模式&lt;/h3&gt;&lt;p&gt;在函数顶部对所有变量通过一个 var 进行声明。好处如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在同一个位置找到函数所需的所有变量&lt;/li&gt;
&lt;li&gt;避免在变量声明之前使用这个变量时产生的逻辑错误&lt;/li&gt;
&lt;li&gt;提醒你不要忘记声明变量，顺便减少潜在的全局变量&lt;/li&gt;
&lt;li&gt;代码量更少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function func(){
    var a = 1,
        b = 2,
        sum = a + b,
        myobject = {},
        i,
        j;
    console.log(sum)
    // 函数体
}
func()
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用逗号操作符可以在一条语句中执行多个操作。多用于声明多个变量，但还可以用于赋值，总会返回表达式的最后一项。&lt;br&gt;(1) 逗号表达式的运算过程为：从左往右逐个计算表达式。&lt;br&gt;(2) 逗号表达式作为一个整体，它的值为最后一个表达式的值。&lt;code&gt;var num = (5,4,1,0); // num 为 0&lt;/code&gt;。&lt;br&gt;(3) 逗号运算符的优先级别在所有运算符中最低。    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;避免使用隐式类型转换&quot;&gt;&lt;a href=&quot;#避免使用隐式类型转换&quot; class=&quot;headerlink&quot; title=&quot;避免使用隐式类型转换&quot;&gt;&lt;/a&gt;避免使用隐式类型转换&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;===&lt;/code&gt; 或 &lt;code&gt;!==&lt;/code&gt; 进行比较。增强代码可阅读性，避免猜测。&lt;br&gt;另外，&lt;code&gt;switch&lt;/code&gt; 语句的 &lt;code&gt;case&lt;/code&gt; 进行比较时，使用的是 &lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;避免使用-eval&quot;&gt;&lt;a href=&quot;#避免使用-eval&quot; class=&quot;headerlink&quot; title=&quot;避免使用 eval()&quot;&gt;&lt;/a&gt;避免使用 eval()&lt;/h3&gt;&lt;p&gt;new Functin() 与 eval()的不同：&lt;/p&gt;
&lt;p&gt;第一点：&lt;br&gt;new Function()中的代码将在局部函数空间运行，因此代码中任何采用var定义的变量不会自动成为全局变量（即在函数内）。&lt;br&gt;eval()则会自动成为全局变量，但可通过立即调用函数对其进行封装。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(typeof un);// &amp;quot;undefined&amp;quot;
console.log(typeof deux); // &amp;quot;undefined&amp;quot;
console.log(typeof trois); // &amp;quot;undefined&amp;quot;

var jsstring = &amp;quot;var un = 1; console.log(un);&amp;quot;;
eval(jsstring); // 打印出 &amp;quot;1&amp;quot;

jsstring = &amp;quot;var deux = 2; console.log(deux);&amp;quot;;
new Function(jsstring)(); // 打印出 &amp;quot;2&amp;quot;

jsstring = &amp;quot;var trois = 3; console.log(trois);&amp;quot;;
(function () {
    eval(jsstring);
}()); // 打印出 &amp;quot;3&amp;quot;

console.log(typeof un); // &amp;quot;number&amp;quot;
console.log(typeof deux); // &amp;quot;undefined&amp;quot;
console.log(typeof trois); // &amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二点：&lt;br&gt;eval()会影响到作用域链，而Function则像一个沙盒，无论在哪里执行Function，它都仅能看到全局作用域链。因此对局部变量的影响比较小。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function () {
    var local = 1;
    eval(&amp;quot;local = 3; console.log(local)&amp;quot;); // 打印出 3
    console.log(local); // 打印出 3
}());

(function () {
    var local = 1;
    Function(&amp;quot;console.log(typeof local);&amp;quot;)(); // 打印出 undefined
}());
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用parseInt-进行数字转换&quot;&gt;&lt;a href=&quot;#使用parseInt-进行数字转换&quot; class=&quot;headerlink&quot; title=&quot;使用parseInt()进行数字转换&quot;&gt;&lt;/a&gt;使用parseInt()进行数字转换&lt;/h3&gt;&lt;p&gt;ECMAScript3中以0为前缀的字符串会被当作八进制数处理，这一点在ES5中已经有了改变。为了避免转换类型不一致而导致的意外结果，应当总是指定第二个参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var month = &amp;quot;06&amp;quot;,
year = &amp;quot;09&amp;quot;;
month = parseInt(month, 10);
year = parseInt(year, 10);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符串转换为数字还有两种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+&amp;quot;08&amp;quot; // 结果为8，隐式调用Number()
Number(&amp;quot;08&amp;quot;) // 结果为8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两种方法要比parseInt()更快一些，因为顾名思义parseInt()是一种“解析”而不是简单的“转换”。但当你期望将“08 hello”这类字符串转换为数字，则必须使用parseInt()，其他方法都会返回NaN。&lt;/p&gt;
&lt;h3 id=&quot;命名约定&quot;&gt;&lt;a href=&quot;#命名约定&quot; class=&quot;headerlink&quot; title=&quot;命名约定&quot;&gt;&lt;/a&gt;命名约定&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构造函数首字母大写&lt;/li&gt;
&lt;li&gt;函数用小驼峰式（getFirstName），变量用“所有单词小写，并用下划线分隔各个单词”（first_name）。这样就能区分函数和变量了。&lt;/li&gt;
&lt;li&gt;常量和全局变量的所有字符大写&lt;/li&gt;
&lt;li&gt;私有成员函数用下划线（_）前缀命名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，还要正确编写注释和更新注释。最好能编写 API 文档。&lt;/p&gt;
&lt;h2 id=&quot;字面量与构造函数&quot;&gt;&lt;a href=&quot;#字面量与构造函数&quot; class=&quot;headerlink&quot; title=&quot;字面量与构造函数&quot;&gt;&lt;/a&gt;字面量与构造函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// 一种方法，使用字面量
var car = {goes: &amp;quot;far&amp;quot;};

// 另一种方法，使用内置构造函数
// 注意：这是一种反模式
var car = new Object();
car.goes = &amp;quot;far&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字面量写法的一个明显优势是，它的代码更少。“创建对象的最佳模式是使用字面量”还有一个原因，它可以强调对象就是一个简单的可变的散列表，而不必一定派生自某个类。&lt;br&gt;另外一个使用字面量而不是Object()构造函数创建实例对象的原因是，对象字面量不需要“作用域解析”（scope resolution）。因为可能存在一个同名的构造函数Object()，当你调用Object()的时候，解析器需要顺着作用域链从当前作用域开始查找，直到找到全局Object()构造函数为止。&lt;/p&gt;
&lt;p&gt;Object()构造函数仅接受一个参数，且依赖于传递的值，该Object()根据值委派另一个内置构造函数来创建对象，并返回另外一个对象实例，而这往往不是你想要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 空对象
var o = new Object();
console.log(o.constructor === Object); // true

// 数值对象
var o = new Object(1);
console.log(o.constructor === Number); // true
console.log(o.toFixed(2)); // &amp;quot;1.00&amp;quot;

// 字符串对象
var o = new Object(&amp;quot;I am a string&amp;quot;);
console.log(o.constructor === String); // true
// 普通对象没有substring()方法，但字符串对象有
console.log(typeof o.substring); // &amp;quot;function&amp;quot;

// 布尔值对象
var o = new Object(true);
console.log(o.constructor === Boolean); // true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;强制使用new的模式&quot;&gt;&lt;a href=&quot;#强制使用new的模式&quot; class=&quot;headerlink&quot; title=&quot;强制使用new的模式&quot;&gt;&lt;/a&gt;强制使用new的模式&lt;/h3&gt;&lt;p&gt;对于构造函数，若忘记使用 &lt;code&gt;new&lt;/code&gt; 操作符，会导致构造函数中的this指向全局对象（严格模式下，指向undeinfed）。&lt;/p&gt;
&lt;p&gt;为了防止忘记 &lt;code&gt;new&lt;/code&gt;，我们使用下面的方法：在构造函数中首先检查this是否是构造函数的实例，如果不是，则&lt;strong&gt;通过new再次调用自己&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Waffle() {

// Waffle 可换成 arguments.callee（指向当前执行的函数）
if (!(this instanceof Waffle)) { 
    return new Waffle();
}
this.tastes = &amp;quot;yummy&amp;quot;;

}
Waffle.prototype.wantAnother = true;

// 测试
var first = new Waffle(),
    second = Waffle();

console.log(first.tastes); // &amp;quot;yummy&amp;quot;
console.log(second.tastes); // &amp;quot;yummy&amp;quot;

console.log(first.wantAnother); // true
console.log(second.wantAnother); // true
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;重定义函数&quot;&gt;&lt;a href=&quot;#重定义函数&quot; class=&quot;headerlink&quot; title=&quot;重定义函数&quot;&gt;&lt;/a&gt;重定义函数&lt;/h3&gt;&lt;p&gt;函数可以被动态定义，也可以被赋值给变量。如果将你定义的函数赋值给已经存在的函数变量的话，则新函数会覆盖旧函数。这样做的结果是，旧函数的引用被丢弃掉，变量中所存储的引用值替换成了新的函数。这样看起来这个变量指代的函数逻辑就发生了变化，或者说函数进行了“重新定义”或“重写”。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var scareMe = function () {
    alert(&amp;quot;Boo!&amp;quot;);
    scareMe = function () {
        alert(&amp;quot;Double boo!&amp;quot;);
    };
};
// 使用重定义函数
scareMe(); // Boo!
scareMe(); // Double boo!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当函数中包含一些初始化操作，并希望这些初始化操作只执行一次，那么这种模式是非常合适的，因为我们要避免重复执行不需要的代码。在这个场景中，函数执行一次后就被重写为另外一个函数了。&lt;/p&gt;
&lt;p&gt;使用这种模式可以帮助提高应用的执行效率，因为重新定义的函数执行的代码量更少。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种模式的另外一个名字是“函数的懒惰定义”，因为直到函数执行一次后才重新定义，可以说它是“某个时间点之后才存在”，简称“懒惰定义”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种模式有一个明显的缺陷，就是之前给原函数添加的功能在重定义之后都丢失了。同时，如果这个函数被重定义为不同的名字，被赋值给不同的变量，或者是作为对象的方法使用，那么重定义的部分并不会生效，原来的函数依然会被执行。&lt;/p&gt;
&lt;h3 id=&quot;条件初始化&quot;&gt;&lt;a href=&quot;#条件初始化&quot; class=&quot;headerlink&quot; title=&quot;条件初始化&quot;&gt;&lt;/a&gt;条件初始化&lt;/h3&gt;&lt;p&gt;条件初始化（也叫条件加载）是一种优化模式。当你知道某种条件在整个程序生命周期中都不会变化的时候，那么对这个条件的探测只做一次就很有意义。浏览器探测（或者特征检测）是一个典型的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 接口
var utils = {
    addListener: null,
    removeListener: null
};

// 实现
if (typeof window.addEventListener === &amp;apos;function&amp;apos;) {
    utils.addListener = function (el, type, fn) {
        el.addEventListener(type, fn, false);
    };
    utils.removeListener = function (el, type, fn) {
        el.removeEventListener(type, fn, false);
    };
} else if (typeof document.attachEvent === &amp;apos;function&amp;apos;) { // IE
    utils.addListener = function (el, type, fn) {
        el.attachEvent(&amp;apos;on&amp;apos; + type, fn);
    };
    utils.removeListener = function (el, type, fn) {
        el.detachEvent(&amp;apos;on&amp;apos; + type, fn);
    };
} else { // older browsers
    utils.addListener = function (el, type, fn) {
        el[&amp;apos;on&amp;apos; + type] = fn;
    };
    utils.removeListener = function (el, type, fn) {
        el[&amp;apos;on&amp;apos; + type] = null;
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，重定义函数也能实现这种效果。&lt;/p&gt;
&lt;h3 id=&quot;函数属性——记忆模式（Memoization）&quot;&gt;&lt;a href=&quot;#函数属性——记忆模式（Memoization）&quot; class=&quot;headerlink&quot; title=&quot;函数属性——记忆模式（Memoization）&quot;&gt;&lt;/a&gt;函数属性——记忆模式（Memoization）&lt;/h3&gt;&lt;p&gt;任何时候都可以给函数添加自定义属性。添加自定义属性的一个有用场景是缓存函数的执行结果（返回值），这样下次同样的函数被调用的时候就不需要再做一次那些可能很复杂的计算。缓存一个函数的运行结果也就是为大家所熟知的记忆模式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myFunc = function (param) {
    if (!myFunc.cache[param]) {
        var result = {};
        // ……复杂的计算……
        myFunc.cache[param] = result;
    }
    return myFunc.cache[param];
};

// 缓存
myFunc.cache = {};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码假设函数只接受一个参数param，并且这个参数是原始类型（比如字符串）。如果你有更多更复杂的参数，则通常需要对它们进行序列化。比如，你需要将arguments对象序列化为JSON字符串，然后使用JSON字符串作为cache对象的key：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myFunc = function () {

    var cachekey = JSON.stringify(Array.prototype.slice.call(arguments)),
        result;

    if (!myFunc.cache[cachekey]) {
        result = {};
        // ……复杂的计算……
        myFunc.cache[cachekey] = result;
    }
    return myFunc.cache[cachekey];
};

// 缓存
myFunc.cache = {};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面代码中的函数名还可以使用arguments.callee来替代，这样就不用将函数名硬编码。不过尽管现阶段这个办法可行，但是仍然需要注意，arguments.callee在ECMAScript5的严格模式中是不被允许的。&lt;/p&gt;
&lt;h3 id=&quot;柯里化&quot;&gt;&lt;a href=&quot;#柯里化&quot; class=&quot;headerlink&quot; title=&quot;柯里化&quot;&gt;&lt;/a&gt;柯里化&lt;/h3&gt;&lt;p&gt;是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。&lt;br&gt;下面是通用的柯里化函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function cury(fn){
    var slice = Array.prototype.slice;
    var stored_args = slice.call(arguments, 1);

    return function(){
        var new_args = slice.call(arguments),
            args = stored_args.concat(new_args);
        return fn.apply(null, args);
    }
}

// 测试
function sum(){
    var result = 0;
    for(var i = 0, len = arguments.length; i &amp;lt; len; i++){
        result += arguments[i];
    }
    return result;
}

var newSum = cury(sum, 1,2,3,4,5,6);
console.log(newSum(2,3,5,4)); // 35
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;什么时候使用柯里化&quot;&gt;&lt;a href=&quot;#什么时候使用柯里化&quot; class=&quot;headerlink&quot; title=&quot;什么时候使用柯里化&quot;&gt;&lt;/a&gt;什么时候使用柯里化&lt;/h4&gt;&lt;p&gt;当你发现自己在调用同样的函数并且传入的参数大部分都相同的时候，就是考虑柯里化的理想场景了。你可以通过传入一部分的参数动态地创建一个新的函数。这个新函数会存储那些重复的参数（所以你不需要再每次都传入），然后再在调用原始函数的时候将整个参数列表补全。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;apply()接受两个参数：第一个是在函数内部绑定到this上的对象，第二个是一个参数数组，参数数组会在函数内部变成一个类似数组的arguments对象。如果第一个参数为 &lt;code&gt;null&lt;/code&gt;，那么this将指向全局对象，这正是当你调用一个函数（且这个函数不是某个对象的方法）时发生的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;在介绍完背景和函数的语法后，介绍了一些有用的模式，按分类列出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;API模式，它们帮助我们为函数给出更干净的接口，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;回调模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;传入一个函数作为参数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;帮助保持函数的参数数量可控
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数的返回值是另一个函数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;柯里化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;新函数在已有函数的基础上再加上一部分参数构成
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化模式，这些模式帮助我们用一种干净的、结构化的方法来做一些初始化工作（在web页面和应用中非常常见），通过一些临时变量来保证不污染全局命名空间。这些模式包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;即时函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当它们被定义后立即执行
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象即时初始化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;初始化工作被放入一个匿名对象，这个对象提供一个可以立即被执行的方法
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;条件初始化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使分支代码只在初始化的时候执行一次，而不是在整个程序生命周期中反复执行
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能模式，这些模式帮助提高代码的执行速度，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;记忆模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;利用函数的属性，使已经计算过的值不用再次计算
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;重写自身的函数体，使第二次及后续的调用做更少的工作
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;对象创建模式&quot;&gt;&lt;a href=&quot;#对象创建模式&quot; class=&quot;headerlink&quot; title=&quot;对象创建模式&quot;&gt;&lt;/a&gt;对象创建模式&lt;/h2&gt;&lt;p&gt;JavaScript语言本身很简单、直观，也没有其他语言的一些语言特性：命名空间、模块、包、私有属性以及静态成员。本章将介绍一些常用的模式，以此实现这些语言特性。&lt;/p&gt;
&lt;p&gt;我们将对命名空间、依赖声明、模块模式以及沙箱模式进行初探——它们可以帮助我们更好地组织应用程序的代码，有效地减少全局污染的问题。除此之外，还会讨论私有和特权成员、静态和私有静态成员、对象常量、链式调用以及一种像类式语言一样定义构造函数的方法等话题。&lt;/p&gt;
&lt;h3 id=&quot;命名空间模式&quot;&gt;&lt;a href=&quot;#命名空间模式&quot; class=&quot;headerlink&quot; title=&quot;命名空间模式&quot;&gt;&lt;/a&gt;命名空间模式&lt;/h3&gt;&lt;p&gt;使用命名空间可以减少全局变量的数量，与此同时，还能有效地避免命名冲突和前缀的滥用。&lt;/p&gt;
&lt;p&gt;本章后续要介绍的沙箱模式则可以避免这些缺点。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 重构前：5个全局变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 注意：反模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Parent() &amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Child() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 一个变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var some_var = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 一些对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var module1 = &amp;#123;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module1.data = &amp;#123;a: 1, b: 2&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var module2 = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过创建一个全局对象（通常代表应用名）比如MYAPP来重构上述这类代码，然后将上述例子中的函数和变量都变为该全局对象的属性：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 重构后：一个全局变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 全局对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var MYAPP = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.Parent = function () &amp;#123;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.Child = function () &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 一个变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.some_var = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 一个对象容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.modules = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 嵌套的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.modules.module1 = &amp;#123;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.modules.module1.data = &amp;#123;a: 1, b: 2&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.modules.module2 = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种模式在大多数情况下非常适用，但也有它的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码量稍有增加；在每个函数和变量前加上这个命名空间对象的前缀，会增加代码量，增大文件大小&lt;/li&gt;
&lt;li&gt;该全局实例可以被随时修改&lt;/li&gt;
&lt;li&gt;命名的深度嵌套会减慢属性值的查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章后续要介绍的沙箱模式则可以避免这些缺点。&lt;/p&gt;
&lt;h4 id=&quot;通用命名空间函数&quot;&gt;&lt;a href=&quot;#通用命名空间函数&quot; class=&quot;headerlink&quot; title=&quot;通用命名空间函数&quot;&gt;&lt;/a&gt;通用命名空间函数&lt;/h4&gt;&lt;p&gt;随着程序复杂度的提高，代码会被分拆在不同的文件中以按照页面需要来加载，这样一来，就不能保证你的代码一定是第一个定义命名空间或者某个属性的，甚至会发生属性覆盖的问题。所以，在创建命名空间或者添加属性的时候，最好先检查下是否存在，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 不安全的做法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var MYAPP = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 更好的做法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (typeof MYAPP === &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var MYAPP = &amp;#123;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 简写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var MYAPP = MYAPP || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上所示，如果每次做类似操作都要这样检查一下就会有很多重复的代码。例如，要声明MYAPP.modules.module2，就要重复三次这样的检查。所以，我们需要一个可复用的namespace()函数来专门处理这些检查工作，然后用它来创建命名空间，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 使用命名空间函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.namespace(&amp;apos;MYAPP.modules.module2&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 等价于：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// var MYAPP = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  modules: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//      module2: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面是上述namespace函数的实现示例。这种实现是非破坏性的，意味着如果要创建的命名空间已经存在，则不会再重复创建：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MYAPP = MYAPP || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.namespace = function(ns_string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var parts = ns_string.split(&amp;quot;.&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = MYAPP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(parts[0] === &amp;quot;MYAPP&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parts.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0, len = parts.length; i &amp;lt; len; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(parent[parts[i]] === undefined)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent[parts[i]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = parent[parts[i]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var module2 = MYAPP.namespace(&amp;quot;MYAPP.modules.module2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(module2 === MYAPP.modules.module2); // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var modules = MYAPP.namespace(&amp;quot;modules&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(modules === MYAPP.modules); // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;依赖声明&quot;&gt;&lt;a href=&quot;#依赖声明&quot; class=&quot;headerlink&quot; title=&quot;依赖声明&quot;&gt;&lt;/a&gt;依赖声明&lt;/h3&gt;&lt;p&gt;JavaScript库往往是模块化而且有用到命名空间的，这使得你可以只使用你需要的模块。比如在YUI2中，全局变量YAHOO就是一个命名空间，各个模块都是全局变量的属性，比如YAHOO.util.Dom（DOM模块）、YAHOO.util.Event（事件模块）。&lt;/p&gt;
&lt;p&gt;将你的代码依赖在函数或者模块的顶部进行声明是一个好主意。声明就是创建一个本地变量，指向你需要用到的模块：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myFunction = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var event = YAHOO.util.Event,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dom = YAHOO.util.Dom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 在函数后面的代码中使用event和dom……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是一个相当简单的模式，但是有很多的好处：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确的依赖声明是告知使用你代码的开发者，需要保证指定的脚本文件被包含在页面中。&lt;/li&gt;
&lt;li&gt;将声明放在函数顶部使得依赖很容易被查找和解析。&lt;/li&gt;
&lt;li&gt;本地变量（如dom）永远会比全局变量（如YAHOO）要快，甚至比全局变量的属性（如YAHOO.util.Dom）还要快，这样会有更好的性能。使用了依赖声明模式之后，全局变量的解析在函数中只会进行一次，在此之后将会使用更快的本地变量（备注：本地变量直接指向最后一级对象，event）。&lt;/li&gt;
&lt;li&gt;一些高级的代码压缩工具比如YUI Compressor和Google Closure compiler会重命名本地变量（比如event可能会被压缩成一个字母，如A），这会使代码更精简，但这个操作不会对全局变量进行，因为这样做不安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;私有属性和方法&quot;&gt;&lt;a href=&quot;#私有属性和方法&quot; class=&quot;headerlink&quot; title=&quot;私有属性和方法&quot;&gt;&lt;/a&gt;私有属性和方法&lt;/h3&gt;&lt;h4 id=&quot;私有成员&quot;&gt;&lt;a href=&quot;#私有成员&quot; class=&quot;headerlink&quot; title=&quot;私有成员&quot;&gt;&lt;/a&gt;私有成员&lt;/h4&gt;&lt;p&gt;通过闭包实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Gadget() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 私有成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name = &amp;apos;iPod&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 公有函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getName = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var toy = new Gadget();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// name是是私有的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(toy.name); // undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 公有方法可以访问到name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(toy.getName()); // &amp;quot;iPod&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;特权方法&quot;&gt;&lt;a href=&quot;#特权方法&quot; class=&quot;headerlink&quot; title=&quot;特权方法&quot;&gt;&lt;/a&gt;特权方法&lt;/h4&gt;&lt;p&gt;特权方法的概念不涉及到任何语法，它只是一个给可以访问到私有成员的公有方法的名字（就好像它们有更多权限一样）。&lt;br&gt;在前面的例子中，getName()就是一个特权方法，因为它有访问name属性的特殊权限。&lt;/p&gt;
&lt;h4 id=&quot;私有成员失效&quot;&gt;&lt;a href=&quot;#私有成员失效&quot; class=&quot;headerlink&quot; title=&quot;私有成员失效&quot;&gt;&lt;/a&gt;私有成员失效&lt;/h4&gt;&lt;p&gt;当你直接通过特权方法返回一个私有变量，而这个私有变量恰好是一个对象或者数组时，外部的代码可以修改这个私有变量，因为它是按引用传递的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Gadget() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 私有成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var specs = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        screen_width: 320,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        screen_height: 480,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: &amp;quot;white&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 公有函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getSpecs = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return specs; // 直接返回对象（数组也是对象），会导致私有对象能在外面被修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;返回精简后新对象（返回需要用到的部分属性），或对私有对象进行复制（返回副本）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;众所周知的“最低授权原则”（Principle of Least Authority，简称POLA），指永远不要给出比真实需要更多的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;原型和私有成员&quot;&gt;&lt;a href=&quot;#原型和私有成员&quot; class=&quot;headerlink&quot; title=&quot;原型和私有成员&quot;&gt;&lt;/a&gt;原型和私有成员&lt;/h4&gt;&lt;p&gt;使用构造函数创建私有成员的一个弊端是，每一次调用构造函数创建对象时这些私有成员都会被创建一次。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Gadget() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 私有成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name = &amp;apos;iPod&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 公有函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getName = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gadget.prototype = (function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 私有成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var browser = &amp;quot;Mobile Webkit&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 公有函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getBrowser: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return browser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var toy = new Gadget();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(toy.getName()); // 自有的特权方法 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(toy.getBrowser()); // 来自原型的特权方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;将私有函数暴露为公有方法&quot;&gt;&lt;a href=&quot;#将私有函数暴露为公有方法&quot; class=&quot;headerlink&quot; title=&quot;将私有函数暴露为公有方法&quot;&gt;&lt;/a&gt;将私有函数暴露为公有方法&lt;/h4&gt;&lt;p&gt;“暴露模式”是指将已经有的私有函数暴露为公有方法。&lt;/p&gt;
&lt;p&gt;我们来看一个例子，它建立在对象字面量的私有成员模式之上：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myarray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var astr = &amp;quot;[object Array]&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toString = Object.prototype.toString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function isArray(a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return toString.call(a) === astr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function indexOf(haystack, needle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var i = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = haystack.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (; i &amp;lt; max; i += 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (haystack[i] === needle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return −1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myarray = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isArray: isArray,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        indexOf: indexOf,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inArray: indexOf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;模块模式&quot;&gt;&lt;a href=&quot;#模块模式&quot; class=&quot;headerlink&quot; title=&quot;模块模式&quot;&gt;&lt;/a&gt;模块模式&lt;/h3&gt;&lt;p&gt;模块模式使用得很广泛，因为它可以为代码提供特定的结构，帮助组织日益增长的代码。不像其它语言，JavaScript没有专门的“包”（package）的语法，但模块模式提供了用于创建独立解耦的代码片段的工具，这些代码可以被当成黑盒，当你正在写的软件需求发生变化时，这些代码可以被添加、替换、移除。&lt;/p&gt;
&lt;p&gt;模块模式是我们目前讨论过的好几种模式的组合，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名空间模式&lt;/li&gt;
&lt;li&gt;即时函数模式&lt;/li&gt;
&lt;li&gt;私有和特权成员模式&lt;/li&gt;
&lt;li&gt;依赖声明模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步是初始化一个命名空间。我们使用本章前面部分的namespace()函数，创建一个提供数组相关方法的套件模块：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.namespace(&amp;apos;MYAPP.utilities.array&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下一步是定义模块。使用一个即时函数来提供私有作用域供私有成员使用。即时函数返回一个对象，也就是带有公有接口的真正的模块，可以供其它代码使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.utilities.array = (function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // todo...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下一步，给公有接口添加一些方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.utilities.array = (function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inArray: function (needle, haystack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isArray: function (a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要的话，你可以在即时函数提供的闭包中声明私有属性和私有方法。同样，依赖声明放置在函数顶部，在变量声明的下方可以选择性地放置辅助初始化模块的一次性代码。函数最终返回的是一个包含模块公共API的对象：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.namespace(&amp;apos;MYAPP.utilities.array&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.utilities.array = (function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 依赖声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var uobj = MYAPP.utilities.object,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ulang = MYAPP.utilities.lang,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 私有属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array_string = &amp;quot;[object Array]&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ops = Object.prototype.toString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 私有方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 结束变量声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 选择性放置一次性初始化的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 公有API&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inArray: function (needle, haystack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (var i = 0, max = haystack.length; i &amp;lt; max; i += 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (haystack[i] === needle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isArray: function (a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return ops.call(a) === array_string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // ……更多的方法和属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;模块模式被广泛使用，是一种值得强烈推荐的模式，它可以帮助我们组织代码，尤其是代码量在不断增长的时候。&lt;/p&gt;
&lt;h4 id=&quot;暴露模块模式&quot;&gt;&lt;a href=&quot;#暴露模块模式&quot; class=&quot;headerlink&quot; title=&quot;暴露模块模式&quot;&gt;&lt;/a&gt;暴露模块模式&lt;/h4&gt;&lt;p&gt;我们在本章中讨论私有成员模式时已经讨论过暴露模式。模块模式也可以用类似的方法来组织，将所有的方法保持私有，只在最后暴露需要使用的方法来初始化API。&lt;/p&gt;
&lt;p&gt;上面的例子可以变成这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.utilities.array = (function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 私有属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var array_string = &amp;quot;[object Array]&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ops = Object.prototype.toString,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 私有方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inArray = function (haystack, needle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (var i = 0, max = haystack.length; i &amp;lt; max; i += 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (haystack[i] === needle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return −1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isArray = function (a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return ops.call(a) === array_string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 结束变量定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 暴露公有API&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isArray: isArray,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        indexOf: inArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;在模块中引入全局上下文&quot;&gt;&lt;a href=&quot;#在模块中引入全局上下文&quot; class=&quot;headerlink&quot; title=&quot;在模块中引入全局上下文&quot;&gt;&lt;/a&gt;在模块中引入全局上下文&lt;/h4&gt;&lt;p&gt;作为这种模式的一个常见的变种，你可以给包裹模块的即时函数传递参数。你可以传递任何值，但通常情况下会传递全局变量甚至是全局对象本身。引入全局上下文可以加快函数内部的全局变量的解析，因为引入之后会作为函数的本地变量：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYAPP.utilities.module = (function (app, global) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 全局对象和全局命名空间都作为本地变量存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(MYAPP, this));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码复用模式&quot;&gt;&lt;a href=&quot;#代码复用模式&quot; class=&quot;headerlink&quot; title=&quot;代码复用模式&quot;&gt;&lt;/a&gt;代码复用模式&lt;/h2&gt;&lt;p&gt;在做代码复用的工作的时候，谨记Gang of Four在书中给出的关于对象创建的建议：“优先使用对象创建而不是类继承”。&lt;/p&gt;
&lt;p&gt;类式（传统）继承（classical inheritance） vs 现代继承模式&lt;br&gt;类式继承：按照类的方式考虑JavaScript，并产生了一些假定在类的基础上的开发思路和继承模式。&lt;br&gt;现代继承模式：其他任何不需要以类的方式考虑的模式。&lt;/p&gt;
&lt;p&gt;当需要给项目选择一个继承模式时，有不少的备选方案。你应该尽量选择那些现代继承模式，除非团队已经觉得“无类不欢”。&lt;/p&gt;
&lt;p&gt;跳过类继承..&lt;/p&gt;
&lt;h3 id=&quot;通过复制属性实现继承&quot;&gt;&lt;a href=&quot;#通过复制属性实现继承&quot; class=&quot;headerlink&quot; title=&quot;通过复制属性实现继承&quot;&gt;&lt;/a&gt;通过复制属性实现继承&lt;/h3&gt;&lt;p&gt;在这种模式中，一个对象通过简单地复制另一个对象来获得功能。下面是一个简单的实现这种功能的extend()函数：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function extend(parent, child) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child = child || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (i in parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (parent.hasOwnProperty(i)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child[i] = parent[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面给出的实现叫作对象的“浅拷贝”（shallow copy），与之相对，“深拷贝”是指检查准备复制的属性本身是否是对象或者数组，如果是，也遍历它们的属性并复制。如果使用浅拷贝的话（因为在JavaScript中对象是按引用传递），如果你改变子对象的一个属性，而这个属性恰好是一个对象，那么你也会改变父对象。实际上这对方法来说可能很好（因为函数也是对象，也是按引用传递），但是当遇到其它的对象和数组的时候可能会有些意外情况。&lt;/p&gt;
&lt;p&gt;现在让我们来修改一下extend()函数以便实现深拷贝。你需要做的事情只是检查一个属性的类型是否是对象，如果是，则递归遍历它的属性。另外一个需要做的检查是这个对象是真的对象还是数组，可以使用第三章讨论过的数组检查方式。最终深拷贝版的extend()是这样的：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function extendDeep(parent, child) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var i,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toStr = Object.prototype.toString,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        astr = &amp;quot;[object Array]&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child = child || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (i in parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (parent.hasOwnProperty(i)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (typeof parent[i] === &amp;quot;object&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                child[i] = (toStr.call(parent[i]) === astr) ? [] : &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                extendDeep(parent[i], child[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                child[i] = parent[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种模式并不高深，因为根本没有原型牵涉进来，而只跟对象和它们的属性有关。&lt;/p&gt;
&lt;h3 id=&quot;混元（Mix-ins）&quot;&gt;&lt;a href=&quot;#混元（Mix-ins）&quot; class=&quot;headerlink&quot; title=&quot;混元（Mix-ins）&quot;&gt;&lt;/a&gt;混元（Mix-ins）&lt;/h3&gt;&lt;p&gt;“混元”模式，从任意多数量的对象中复制属性，然后将它们混在一起组成一个新对象。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function mix() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arg, prop, child = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (arg = 0; arg &amp;lt; arguments.length; arg += 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (prop in arguments[arg]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (arguments[arg].hasOwnProperty(prop)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                child[prop] = arguments[arg][prop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们只是简单地遍历、复制自有属性，并没有与父对象有任何链接。&lt;/p&gt;
&lt;h3 id=&quot;借用方法&quot;&gt;&lt;a href=&quot;#借用方法&quot; class=&quot;headerlink&quot; title=&quot;借用方法&quot;&gt;&lt;/a&gt;借用方法&lt;/h3&gt;&lt;p&gt;apply、call、bind（ES5）。&lt;br&gt;apply是接受数组，而call是接受一个一个的参数。&lt;/p&gt;
&lt;p&gt;在低于ES5的环境中时如何实现Function.prototype.bind()：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (typeof Function.prototype.bind === &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function.prototype.bind = function (thisArg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var fn = this,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slice = Array.prototype.slice,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args = slice.call(arguments, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return fn.apply(thisArg, args.concat(slice.call(arguments)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小结-1&quot;&gt;&lt;a href=&quot;#小结-1&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;在JavaScript中，继承有很多种方案可以选择，在本章中你看到了很多类式继承和现代继承的方案。学习和理解不同的模式是有好处的，因为这可以增强你对这门语言的掌握能力。&lt;/p&gt;
&lt;p&gt;但是，也许在开发过程中继承并不是你经常面对的一个问题。一部分是因为这个问题已经被使用某种方式或者某个你使用的类库解决了，另一部分是因为你不需要在JavaScript中建立很长很复杂的继承链。在静态强类型语言中，继承可能是唯一可以复用代码的方法，但在JavaScript中有更多更简单更优化的方法，包括借用方法、绑定、复制属性、混元等。&lt;/p&gt;
&lt;p&gt;记住，代码复用才是目标，继承只是达成这个目标的一种手段。&lt;/p&gt;
&lt;h2 id=&quot;DOM与浏览器模式&quot;&gt;&lt;a href=&quot;#DOM与浏览器模式&quot; class=&quot;headerlink&quot; title=&quot;DOM与浏览器模式&quot;&gt;&lt;/a&gt;DOM与浏览器模式&lt;/h2&gt;&lt;h3 id=&quot;延迟加载&quot;&gt;&lt;a href=&quot;#延迟加载&quot; class=&quot;headerlink&quot; title=&quot;延迟加载&quot;&gt;&lt;/a&gt;延迟加载&lt;/h3&gt;&lt;p&gt;所谓的延迟加载是指在页面的load事件之后再加载外部文件。通常，将一个大的合并后的文件分成两部分是有好处的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部分是页面初始化和绑定UI元素的事件处理函数必须的&lt;/li&gt;
&lt;li&gt;第二部分是只在用户交互或者其它条件下才会用到的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分成两部分的目标就是逐步加载页面，让用户尽快可以进行一些操作。剩余的部分在用户可以看到页面的时候再在后台加载。&lt;/p&gt;
&lt;p&gt;加载第二部分JavaScript的方法也是使用动态script元素，将它加在head或者body中：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    ……页面主体部分……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 第二块结束 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;script src=&amp;quot;all_20100426.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    window.onload = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var script = document.createElement(&amp;quot;script&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        script.src = &amp;quot;all_lazy_20100426.js&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        document.documentElement.firstChild.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;按需加载&quot;&gt;&lt;a href=&quot;#按需加载&quot; class=&quot;headerlink&quot; title=&quot;按需加载&quot;&gt;&lt;/a&gt;按需加载&lt;/h3&gt;&lt;p&gt;创建一个require()函数或者方法，它接受一个需要被加载的脚本文件的文件名，还有一个在脚本被加载完毕后执行的回调函数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;require(&amp;quot;extra.js&amp;quot;, function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    functionDefinedInExtraJS();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function require(file, callback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var script = document.getElementsByTagName(&amp;apos;script&amp;apos;)[0], newjs = document.createElement(&amp;apos;script&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // IE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    newjs.onreadystatechange = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (newjs.readyState === &amp;apos;loaded&amp;apos; || newjs.readyState === &amp;apos;complete&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            newjs.onreadystatechange = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callback();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 其它浏览器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    newjs.onload = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    newjs.src = file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    script.parentNode.insertBefore(newjs, script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个实现的几点说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在IE中需要监听readystatechange事件，然后判断状态是否为”loaded”或者”complete”。其它的浏览器会忽略这里。&lt;/li&gt;
&lt;li&gt;在Firefox，Safari和Opera中，通过onload属性监听load事件。&lt;/li&gt;
&lt;li&gt;这个方法在Safari 2中无效。如果必须要处理这个浏览器，需要设一个定时器，周期性地去检查某个指定的变量（在脚本中定义的）是否有定义。当它变成已定义时，就意味着新的脚本已经被加载并执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;预加载JavaScript&quot;&gt;&lt;a href=&quot;#预加载JavaScript&quot; class=&quot;headerlink&quot; title=&quot;预加载JavaScript&quot;&gt;&lt;/a&gt;预加载JavaScript&lt;/h3&gt;&lt;p&gt;在延迟加载模式和按需加载模式中，我们加载了当前页面需要用到的脚本，除此之外，我们也可以加载当前页面不需要但可能在接下来的页面中需要的脚本。这样的话，当用户进入第二个页面时，脚本已经被预加载过，整体体验会变得更快。&lt;/p&gt;
&lt;p&gt;预加载可以简单地通过动态脚本模式实现，但这也意味着脚本会被解析和执行。解析仅仅会在页面加载时间中增加预加载消耗的时间，但执行却可能导致JavaScript错误，因为预加载的脚本会假设自己运行在第二个页面上，比如找一个特定的DOM节点就可能出错。&lt;/p&gt;
&lt;p&gt;仅加载脚本而不解析和执行是可能的，这也同样适用于CSS和图像。&lt;/p&gt;
&lt;p&gt;在IE中，你可以使用熟悉的图片信标模式来发起请求：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;new Image().src = &amp;quot;preloadme.js&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在其它的浏览器中，你可以使用&lt;object&gt;替代script元素，然后将它的data属性指向脚本的URL：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = document.createElement(&amp;apos;object&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.data = &amp;quot;preloadme.js&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.body.appendChild(obj);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;为了阻止object可见，你应该设置它的width和height属性为0。&lt;/p&gt;
&lt;p&gt;你可以创建一个通用的preload()函数或者方法，使用条件初始化模式（第四章）来处理浏览器差异：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var preload;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (/*@cc_on!@*/false) &amp;#123; // IE支持条件注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    preload = function (file) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Image().src = file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    preload = function (file) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var obj = document.createElement(&amp;apos;object&amp;apos;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            body = document.body;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.width = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.height = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.data = file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body.appendChild(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用这个新函数：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;preload(&amp;apos;my_web_worker.js&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种模式的坏处在于存在用户代理（浏览器）嗅探，但这里无法避免，因为特性检测没有办法告知足够的浏览器行为信息。比如在这个模式中，理论上你可以测试typeof Image是否是”function”来代替嗅探，但这种方法其实没有作用，因为所有的浏览器都支持new Image()；只是有一些浏览器会为图片单独做缓存，意味着作为图片缓存下来的组件（文件）在第二个页面中不会被作为脚本取出来，而是会重新下载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器嗅探中使用条件注释很有意思，这明显比在&lt;code&gt;navigator.userAgent&lt;/code&gt;中找字符串要安全得多，因为用户可以很容易地修改这些字符串。 比如： &lt;code&gt;var isIE = /*@cc_on!@*/false&lt;/code&gt;; 会在其它的浏览器中将&lt;code&gt;isIE&lt;/code&gt;设为&lt;code&gt;false&lt;/code&gt;（因为忽略了注释），但在IE中会是&lt;code&gt;true&lt;/code&gt;，因为在条件注释中有取反运算符!。在IE中就像是这样： var isIE = !false; // true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;预加载模式可以被用于各种组件（文件），而不仅仅是脚本。比如在登录页就很有用，当用户开始输入用户名时，你可以使用打字的时间开始预加载（非敏感的东西），因为用户很可能会到第二个也就是登录后的页面。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在软件开发过程中，模式是指一个通用问题的解决方案。一个模式不仅仅是一个可以用来复制粘贴的代码解决方案，更多地是提供了一个更好的实践经验、有用的抽象化表示和解决一类问题的模板。&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>white-space:nowrap 的妙用</title>
    <link href="http://yoursite.com/2016/04/10/2016-4-10-white-space-clever/"/>
    <id>http://yoursite.com/2016/04/10/2016-4-10-white-space-clever/</id>
    <published>2016-04-10T07:09:23.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;对于多个元素同在同一行的布局，如比较常见的是轮播。下面我将探讨这这一布局的做法：&lt;br&gt;首先约定&lt;code&gt;html&lt;/code&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div.row
  div.col
  div.col
  div.col
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;做法一：&quot;&gt;&lt;a href=&quot;#做法一：&quot; class=&quot;headerlink&quot; title=&quot;做法一：&quot;&gt;&lt;/a&gt;做法一：&lt;/h3&gt;&lt;p&gt;设定&lt;code&gt;div.row&lt;/code&gt;的宽度为&lt;code&gt;div.col宽度*div.col的个数&lt;/code&gt;，然后设置&lt;code&gt;div.col&lt;/code&gt;为&lt;code&gt;float:left&lt;/code&gt;或&lt;code&gt;display:inline-block&lt;/code&gt;&lt;br&gt;对于 &lt;code&gt;float:left&lt;/code&gt;, &lt;code&gt;div.row&lt;/code&gt; 需要清除浮动。&lt;br&gt;对于 &lt;code&gt;display:inline-block&lt;/code&gt;，需要压缩html或者为&lt;code&gt;div.row&lt;/code&gt;设置 &lt;code&gt;font-size:0&lt;/code&gt; 以去除 &lt;code&gt;div.col&lt;/code&gt; 之间的水平间隙，后者也顺便去除了垂直方向的间隙（line-height为相对单位时，其最终值为line-height值*font-size）。对于前者，还有垂直方面的间隙未去除，我们可以为&lt;code&gt;div.col&lt;/code&gt;设置 &lt;code&gt;vertical-align:top&lt;/code&gt; 或为&lt;code&gt;div.row&lt;/code&gt;设置 &lt;code&gt;line-height:0&lt;/code&gt;。推荐前者（即vertical-align），因为当 &lt;code&gt;div.col&lt;/code&gt; 高度不相等时，会按顶部对齐，当然你也可以&lt;code&gt;bottom&lt;/code&gt;或&lt;code&gt;middle&lt;/code&gt;。而且，如果&lt;code&gt;div.col&lt;/code&gt;内含有行内元素或inline-block元素时，&lt;code&gt;div.col&lt;/code&gt;会按其子元素最后一行&lt;code&gt;inline/inline-block&lt;/code&gt;元素的基线进行垂直方向上的对齐（vertical-align默认值是baseline）。因此最好显式设置&lt;code&gt;div.col&lt;/code&gt;的垂直方向上的对齐。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/nowrap-baseline.jpg&quot; alt=&quot;baseline基线&quot;&gt;&lt;br&gt;baseline基线&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/nowrap-jianxi.jpg&quot; alt=&quot;水平与竖直方向上的间隙&quot;&gt;&lt;br&gt;水平与竖直方向上的间隙&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/nowrap-inlineORinline-block.jpg&quot; alt=&quot;按其子元素最后一行inline/inline-block元素的基线进行垂直方向上的对齐&quot;&gt;&lt;br&gt;按其子元素最后一行&lt;code&gt;inline/inline-block&lt;/code&gt;元素的基线进行垂直方向上的对齐&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这也符合张鑫旭老师的《&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS深入理解vertical-align和line-height的基友关系&lt;/a&gt;》这篇文章讲到的：一个inline-block元素，如果里面没有inline内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘，否则，其基线就是元素里面最后一行内联元素的基线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;补充知识：line-height的值为&lt;strong&gt;数字&lt;/strong&gt;与&lt;strong&gt;百分比&lt;/strong&gt;的区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百分比是当前元素的字体大小&lt;code&gt;*&lt;/code&gt;百分比，算出的值让后代元素继承（固定值，后代元素均用此值）；而数字是让后代元素的字体大小&lt;code&gt;*&lt;/code&gt;数值（相对值，后代元素根据自身字体大小算出适合的行高）。具体可以看 《&lt;a href=&quot;http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入了解css的行高Line Height属性&lt;/a&gt;》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，如果&lt;code&gt;div.row&lt;/code&gt;内有行内元素或inline-block元素，它们会继承父元素的font-size与line-height，因此需要重新设置font-size和line-height，以覆盖&lt;code&gt;div.row&lt;/code&gt;对应的值。&lt;/p&gt;
&lt;p&gt;做法一的案例有：淘宝首页的主轮播（通过子元素浮动，父元素清除浮动）。&lt;br&gt;这种做法的好处有：①兼容性好，无须清除&lt;code&gt;div.col&lt;/code&gt;直接的间隙，因为浮动后的元素会一直与当前行框（line box）顶部对齐，vertical-align对齐无效。&lt;br&gt;不好的地方：要计算&lt;code&gt;div.row&lt;/code&gt;的宽度。&lt;/p&gt;
&lt;h3 id=&quot;做法二（这也是我想讲的巧妙）&quot;&gt;&lt;a href=&quot;#做法二（这也是我想讲的巧妙）&quot; class=&quot;headerlink&quot; title=&quot;做法二（这也是我想讲的巧妙）&quot;&gt;&lt;/a&gt;做法二（这也是我想讲的巧妙）&lt;/h3&gt;&lt;p&gt;直接上代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*{
    margin: 0;
    padding: 0;
}
.row{
    white-space: nowrap; // 让div.col放置在同一行
    background-color: rgb(0,0,0); // 背景色，以方便观察
    font-size: 0; // 去除水平+垂直间隙
}
.col{
    display: inline-block;
    *display: inline; // 兼容IE 6/7，模拟inline-block效果
    *zoom: 1; // 兼容IE 6/7，模拟inline-block效果
    width: 20%; 
    margin-right: 30px;
    height: 100px;
    background-color: red;
    font-size: 14px; // 覆盖父元素的font-size
    vertical-align: top; // 向上对齐，同时去除垂直间隙
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/nowrap-GIF.gif&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;黑色背景是&lt;code&gt;div.row&lt;/code&gt;，红色背景是 &lt;code&gt;div.col&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可看出这与与应用了&lt;code&gt;white-space:nowrap&lt;/code&gt;的文本容器效果一样。&lt;/p&gt;
&lt;p&gt;####做法二的好处有：&lt;br&gt;①兼容性好（IE5都正常），无须计算宽度，可任意放多个 &lt;code&gt;div.col&lt;/code&gt;，而 &lt;code&gt;div.row&lt;/code&gt; 的宽度等于其父元素的宽度（但IE6则会将div.row撑大，在IE6中，&lt;code&gt;width&lt;/code&gt;如同&lt;code&gt;min-width&lt;/code&gt;效果，&lt;code&gt;height&lt;/code&gt;也是）。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/nowrap-GIF-IE56.gif&quot; alt=&quot;IE5/6效果&quot;&gt;&lt;br&gt;IE5上的效果，IE6应该也一样。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果你还有其它想法，欢迎大家在评论处告诉我哦。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JChehe/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-JChehe&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;http://jchehe.github.io/resume/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;静态博客&lt;/a&gt; &amp;lt;- 小心这心机婊&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于多个元素同在同一行的布局，如比较常见的是轮播。下面我将探讨这这一布局的做法：&lt;br&gt;首先约定&lt;code&gt;html&lt;/code&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div.row
  div.col
  div.col
  div.col
  ...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="white-space" scheme="http://yoursite.com/tags/white-space/"/>
    
  </entry>
  
  <entry>
    <title>《图解HTTP》读书笔记</title>
    <link href="http://yoursite.com/2016/04/05/2016-4-5-illustration-http/"/>
    <id>http://yoursite.com/2016/04/05/2016-4-5-illustration-http/</id>
    <published>2016-04-05T00:47:42.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;HTTP（HyperText Transfer Protocol，超文转移协议，超文本传输协议的译法并不严谨。）&lt;/p&gt;
&lt;h3 id=&quot;网络基础-TCP-IP&quot;&gt;&lt;a href=&quot;#网络基础-TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;网络基础 TCP/IP&quot;&gt;&lt;/a&gt;网络基础 TCP/IP&lt;/h3&gt;&lt;h4 id=&quot;TCP-IP-协议族&quot;&gt;&lt;a href=&quot;#TCP-IP-协议族&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP 协议族&quot;&gt;&lt;/a&gt;TCP/IP 协议族&lt;/h4&gt;&lt;p&gt;TCP/IP 协议族是互联网相关联的协议的集合。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤，等等。而HTTP是属于它内部的一个子集。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;TCP-IP-的分层管理&quot;&gt;&lt;a href=&quot;#TCP-IP-的分层管理&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP 的分层管理&quot;&gt;&lt;/a&gt;TCP/IP 的分层管理&lt;/h4&gt;&lt;p&gt;TCP/IP 协议族按层次分别分为以下 4 层：应用层、传输层、网络层和数据链路层。&lt;br&gt;分层的好处：把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。而且，层次化之后，设计也变得相对简单。处于应用层上的应用可以只考虑分派给自己的任务，而无需弄清对方在地球上哪个地方、对方的传输路线、是否能确保传输送达等问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层：决定了向用户提供应用服务时通信的活动。&lt;br&gt;TCP/IP 协议族预存了各类通用的应用服务。如 FTP（File Transfer Protocol）、DNS（Domain Name System）和 HTTP。&lt;/li&gt;
&lt;li&gt;传输层：该层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。TCP（Transmission Control Protocol）和 UDP（User Data Protocol，用户数据报协议）。&lt;/li&gt;
&lt;li&gt;网络层：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎么样的路径到达对方计算机，并把数据包传送给对方。&lt;/li&gt;
&lt;li&gt;链路层：用来处理网络的硬件部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;TCP-IP-通信传输流&quot;&gt;&lt;a href=&quot;#TCP-IP-通信传输流&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP 通信传输流&quot;&gt;&lt;/a&gt;TCP/IP 通信传输流&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-9.jpg&quot; alt=&quot;缺一张照片P9&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。&lt;/p&gt;
&lt;p&gt;用HTTP 举例来说：首先作为发送端的客户端在应用层（HTTP协议）发出一个HTTP请求。&lt;br&gt;接着，在传输层（TCP协议）把从应用层处收到的数据（HTTP请求报文）进行分隔，并在各个报文上打上标记序号及端口号后转发给网络层。&lt;br&gt;在网络层（IP协议），增加作为通信目的地的MAC地址后转发给链路层。这就让发往网络的通信请求准备齐全了。&lt;br&gt;接收端的服务器在链路层接收到数据后，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到客户端发送过来的HTTP请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-10.jpg&quot; alt=&quot;&amp;gt; 缺一张照片P10&quot;&gt;&lt;/p&gt;
&lt;p&gt;发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。&lt;br&gt;把数据信息包装起来的做法称为封装。&lt;/p&gt;
&lt;h3 id=&quot;与HTTP关系密切的协议：IP、TCP和DNS&quot;&gt;&lt;a href=&quot;#与HTTP关系密切的协议：IP、TCP和DNS&quot; class=&quot;headerlink&quot; title=&quot;与HTTP关系密切的协议：IP、TCP和DNS&quot;&gt;&lt;/a&gt;与HTTP关系密切的协议：IP、TCP和DNS&lt;/h3&gt;&lt;h4 id=&quot;负责传输的-IP-协议&quot;&gt;&lt;a href=&quot;#负责传输的-IP-协议&quot; class=&quot;headerlink&quot; title=&quot;负责传输的 IP 协议&quot;&gt;&lt;/a&gt;负责传输的 IP 协议&lt;/h4&gt;&lt;p&gt;IP（网际协议）位于网络层。该协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中最重要的两个条件是 IP 地址和 MAC地址。&lt;br&gt;IP 地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用ARP协议凭借MAC地址进行通信&lt;/strong&gt;&lt;br&gt;IP间通信通信依赖MAC地址。通信的双方通常会经过多台计算机和网络设备中转才能连接到对方，而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。这时，会采用ARP协议。该协议是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-12.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;确保可靠性的TCP协议&quot;&gt;&lt;a href=&quot;#确保可靠性的TCP协议&quot; class=&quot;headerlink&quot; title=&quot;确保可靠性的TCP协议&quot;&gt;&lt;/a&gt;确保可靠性的TCP协议&lt;/h4&gt;&lt;p&gt;TCP属于传输层，提供可靠的字节流服务。&lt;br&gt;字节流服务是指：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。&lt;br&gt;这就是为什么下载高清大图时，图片会一块一块地加载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三次握手&lt;/strong&gt;&lt;br&gt;为了准确无误地将数据送达目标处，TCP协议在发送数据的准备阶段采用了三次握手策略（若在握手过程中某个阶段中断，TCP协议会再次以相同的顺序发送相同的数据包）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-13.jpg&quot; alt=&quot;&amp;gt; 缺图片P13&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，除了三次握手，TCP还有其它各种手段确保通信的可靠性。&lt;/p&gt;
&lt;h3 id=&quot;负责域名解析的-DNS-服务&quot;&gt;&lt;a href=&quot;#负责域名解析的-DNS-服务&quot; class=&quot;headerlink&quot; title=&quot;负责域名解析的 DNS 服务&quot;&gt;&lt;/a&gt;负责域名解析的 DNS 服务&lt;/h3&gt;&lt;p&gt;DNS服务提供域名到IP 地址之间的解析服务。&lt;br&gt;即可通过域名查找IP，或逆向从IP地址反查域名服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-14.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为域名解析也需要时间，所以可以 &lt;a href=&quot;http://fanyi.jobbole.com/14191/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提前获取DNS来提升网页加载速度&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;URI和URL&quot;&gt;&lt;a href=&quot;#URI和URL&quot; class=&quot;headerlink&quot; title=&quot;URI和URL&quot;&gt;&lt;/a&gt;URI和URL&lt;/h3&gt;&lt;p&gt;URI（uniform Resource Identifier）&lt;br&gt;Uniform：规定统一的格式可方便处理多种不同类型的资源。&lt;br&gt;Resource：可标识的任何东西&lt;br&gt;Identifier：标识符&lt;/p&gt;
&lt;p&gt;URI就是某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称，如http、ftp。&lt;/p&gt;
&lt;p&gt;URI 用字符串标识某一个互联网资源，而URL表示资源的地点。URL是URI的子集。&lt;/p&gt;
&lt;p&gt;表示指定的URI，要使用涵盖全部必要信息的绝对URI、绝对URL以及相对URL。相对URL是指从浏览器中基本URI处指定的URL，如 &lt;code&gt;/image/logo.gif&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;绝对URI的格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-18.jpg&quot; alt=&quot;图片P18&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二章-简单的HTTP协议&quot;&gt;&lt;a href=&quot;#第二章-简单的HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;第二章 简单的HTTP协议&quot;&gt;&lt;/a&gt;第二章 简单的HTTP协议&lt;/h2&gt;&lt;p&gt;HTTP协议规定，先从客户端开始建立通信，服务端在没有接收到请求之前不会发送响应。&lt;/p&gt;
&lt;p&gt;请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-24.jpg&quot; alt=&quot;&amp;gt; 图片P24&quot;&gt;&lt;/p&gt;
&lt;p&gt; 响应报文基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-25.jpg&quot; alt=&quot;&amp;gt; 图片P25&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTTP是不保存状态的协议&quot;&gt;&lt;a href=&quot;#HTTP是不保存状态的协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP是不保存状态的协议&quot;&gt;&lt;/a&gt;HTTP是不保存状态的协议&lt;/h3&gt;&lt;p&gt;HTTP是无状态协议。自身不对请求和响应之间通信状态进行保存（即不做持久化处理）。&lt;br&gt;HTTP之所以设计得如此简单，是为了更快地处理大量事物，确保协议的可伸缩性。&lt;br&gt;HTTP/1.1 随时无状态协议，但可通过 Cookie 技术保存状态。&lt;/p&gt;
&lt;h3 id=&quot;告知服务器意图的HTTP方法&quot;&gt;&lt;a href=&quot;#告知服务器意图的HTTP方法&quot; class=&quot;headerlink&quot; title=&quot;告知服务器意图的HTTP方法&quot;&gt;&lt;/a&gt;告知服务器意图的HTTP方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GET：获取资源&lt;/li&gt;
&lt;li&gt;POST：传输实体主体&lt;/li&gt;
&lt;li&gt;PUT：传输文件&lt;/li&gt;
&lt;li&gt;HEAD：获得报文首部，与GET方法一样，只是不返回报文主体内容。用于确认URI的有效性及资源更新的日期时间等。&lt;/li&gt;
&lt;li&gt;DELETE：删除文件，与PUT相反（响应返回204 No Content）。&lt;/li&gt;
&lt;li&gt;OPTIONS：询问支持的方法，查询针对请求URI指定的资源支持的方法（Allow:GET、POST、HEAD、OPTIONS）。&lt;/li&gt;
&lt;li&gt;TRACE：追踪路径&lt;/li&gt;
&lt;li&gt;CONNECT：要求用隧道协议连接代理（主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;向请求URI指定的资源发送请求报文时，采用称为方法的命令。方法名区分大小写，主要要用大写字母。&lt;/p&gt;
&lt;h3 id=&quot;持久连接节省通信量&quot;&gt;&lt;a href=&quot;#持久连接节省通信量&quot; class=&quot;headerlink&quot; title=&quot;持久连接节省通信量&quot;&gt;&lt;/a&gt;持久连接节省通信量&lt;/h3&gt;&lt;h4 id=&quot;持久连接&quot;&gt;&lt;a href=&quot;#持久连接&quot; class=&quot;headerlink&quot; title=&quot;持久连接&quot;&gt;&lt;/a&gt;持久连接&lt;/h4&gt;&lt;p&gt;HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-34.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;发送请求一份包含多张图片的HTML文档对应的Web页面，会产生大量通信开销。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-35.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;为了解决上述TCP连接的问题，HTTP/1.1和一部分的HTTP/1.0想出了持久连接（HTTP Persistent Connections，也称为HTTP keep-alive 或 HTTP Connection resue）的方法。&lt;br&gt;&lt;strong&gt;持久连接的特点&lt;/strong&gt;是，只要任意一端没有明确提出断开连接，则保持TCP连接状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-36.jpg&quot; alt=&quot;TCP持久连接&quot;&gt;&lt;/p&gt;
&lt;p&gt;持久连接的好处在于减少了TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使HTTP请求和响应能够更早地结束，这样Web页面的显示速度也相应提高了。&lt;/p&gt;
&lt;p&gt;在HTTP/1.1中，所有连接默认都是持久连接，但在HTTP/1.0内并未标准化。&lt;br&gt;毫无疑问，除了服务器端，客户端也需要支持持久连接。&lt;/p&gt;
&lt;h4 id=&quot;管线化&quot;&gt;&lt;a href=&quot;#管线化&quot; class=&quot;headerlink&quot; title=&quot;管线化&quot;&gt;&lt;/a&gt;管线化&lt;/h4&gt;&lt;p&gt;持久连接使得多数请求以管线化方式发送成为可能。以前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不等等待响应亦可直接发送下一个请求（并行发送多个请求）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个浏览器支持的请求并发数不同，但可在页面中使用多个域名加大并发量（因为浏览器是基于domain的并发控制，而不是page），不过过多的散布会导致DNS解析上付出额外的代价。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用Cookie的状态管理&quot;&gt;&lt;a href=&quot;#使用Cookie的状态管理&quot; class=&quot;headerlink&quot; title=&quot;使用Cookie的状态管理&quot;&gt;&lt;/a&gt;使用Cookie的状态管理&lt;/h3&gt;&lt;p&gt;Cookie技术通过在请求和响应报文中写入cookie信息来控制客户端的状态。&lt;br&gt;Cookie会根据从服务器端发送的响应报文内的一个叫做 &lt;code&gt;Set-Cookie&lt;/code&gt; 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。&lt;/p&gt;
&lt;p&gt;如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookie-free Domains：用户在请求静态资源时，也会发送cookie信息。对于一个拥有多个静态资源的网站，这无疑会产生不必要的流量。因此我们可以启用与主站不同的域名（包括子域名）来放置静态资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第三章-HTTP报文内的HTTP信息&quot;&gt;&lt;a href=&quot;#第三章-HTTP报文内的HTTP信息&quot; class=&quot;headerlink&quot; title=&quot;第三章 HTTP报文内的HTTP信息&quot;&gt;&lt;/a&gt;第三章 HTTP报文内的HTTP信息&lt;/h2&gt;&lt;p&gt;用于HTTP协议交互的信息被称为HTTP报文。请求端的HTTP报文叫做请求报文，响应端的叫做响应报文。HTTP报文本身是由多行（用CR+LF做换行符）数据构成的字符串文本。&lt;/p&gt;
&lt;p&gt;HTTP报文大致可分为报文首部和报文主体两部块。两者由最初出现的空行（CR+LF、回车符+换行符）来划分。通常，并不一定要有报文主体。&lt;/p&gt;
&lt;h3 id=&quot;编码提升传输速率&quot;&gt;&lt;a href=&quot;#编码提升传输速率&quot; class=&quot;headerlink&quot; title=&quot;编码提升传输速率&quot;&gt;&lt;/a&gt;编码提升传输速率&lt;/h3&gt;&lt;p&gt;HTTP在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率，但这会消耗更多的CPU等资源。&lt;/p&gt;
&lt;h4 id=&quot;报文主体和实体主体的差异&quot;&gt;&lt;a href=&quot;#报文主体和实体主体的差异&quot; class=&quot;headerlink&quot; title=&quot;报文主体和实体主体的差异&quot;&gt;&lt;/a&gt;报文主体和实体主体的差异&lt;/h4&gt;&lt;p&gt;报文：是HTTP通信中的基本单位，由8位组字节流组成，通过HTTP通信传输。&lt;br&gt;实体：作为请求或响应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成。&lt;/p&gt;
&lt;p&gt;HTTP报文的主体用于传输请求或响应的实体主体。&lt;br&gt;通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。&lt;/p&gt;
&lt;h4 id=&quot;压缩传输的内容编码&quot;&gt;&lt;a href=&quot;#压缩传输的内容编码&quot; class=&quot;headerlink&quot; title=&quot;压缩传输的内容编码&quot;&gt;&lt;/a&gt;压缩传输的内容编码&lt;/h4&gt;&lt;p&gt;内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。&lt;br&gt;常见的内容编码有：gzip（GNU zip）、compress（UNIX系统的标准压缩）、deflate（zlib）、identity（不进行编码）&lt;/p&gt;
&lt;h4 id=&quot;分隔发送的分块传输编码&quot;&gt;&lt;a href=&quot;#分隔发送的分块传输编码&quot; class=&quot;headerlink&quot; title=&quot;分隔发送的分块传输编码&quot;&gt;&lt;/a&gt;分隔发送的分块传输编码&lt;/h4&gt;&lt;p&gt;在HTTP通信过程中，请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。&lt;br&gt;这种把实体主体分块的功能称为&lt;strong&gt;分块传输编码&lt;/strong&gt;（Chunked Transfer Coding）。&lt;/p&gt;
&lt;p&gt;分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小，而实体主体的最后一块会使用“0（CR+LF）”来标记。&lt;/p&gt;
&lt;p&gt;使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码前的实体主体。&lt;/p&gt;
&lt;h3 id=&quot;发送多种数据的多部分对象集合&quot;&gt;&lt;a href=&quot;#发送多种数据的多部分对象集合&quot; class=&quot;headerlink&quot; title=&quot;发送多种数据的多部分对象集合&quot;&gt;&lt;/a&gt;发送多种数据的多部分对象集合&lt;/h3&gt;&lt;p&gt;HTTP协议中采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体。通常实在图片或文本文件等上传时使用。&lt;/p&gt;
&lt;h3 id=&quot;获取部分内容的范围请求&quot;&gt;&lt;a href=&quot;#获取部分内容的范围请求&quot; class=&quot;headerlink&quot; title=&quot;获取部分内容的范围请求&quot;&gt;&lt;/a&gt;获取部分内容的范围请求&lt;/h3&gt;&lt;p&gt;下载大尺寸的图片的过程中，如果网络中断，则需要重新下载。因此需要一种可恢复的机制。&lt;br&gt;实现该功能需要指定下载的实体范围，像这样，指定范围发送的请求叫做&lt;strong&gt;范围请求&lt;/strong&gt;。&lt;br&gt;执行范围请求时，会用到首部字段Range来指定资源的byte范围。响应会返回状态码206 Partial Content。&lt;/p&gt;
&lt;p&gt;如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。&lt;/p&gt;
&lt;h3 id=&quot;内容协商返回最合适的内容&quot;&gt;&lt;a href=&quot;#内容协商返回最合适的内容&quot; class=&quot;headerlink&quot; title=&quot;内容协商返回最合适的内容&quot;&gt;&lt;/a&gt;内容协商返回最合适的内容&lt;/h3&gt;&lt;p&gt;内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。&lt;/p&gt;
&lt;h2 id=&quot;返回结果的HTTP状态码&quot;&gt;&lt;a href=&quot;#返回结果的HTTP状态码&quot; class=&quot;headerlink&quot; title=&quot;返回结果的HTTP状态码&quot;&gt;&lt;/a&gt;返回结果的HTTP状态码&lt;/h2&gt;&lt;p&gt;状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。&lt;br&gt;状态码如200 OK，以3为数字和原因短语组成。&lt;br&gt;数字中的第一位定义了响应类别，后两位无分类。响应类别有以下五种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类别&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;原因短语&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1XX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Informational(信息性状态码)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;接收的请求正在处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2XX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Success（成功状态码）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;请求正常处理完毕&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3XX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Redirection（重定向状态码）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;需要进行附加操作以完成请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4XX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Client Error（客户端错误状态码）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;服务器无法处理请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5XX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Server Error（服务器错误状态码）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;服务器处理请求出错&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;只要遵守状态码类别的定义，即使改变 &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc2616/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC2616&lt;/a&gt; 中定义的状态码，或服务器端自行创建状态码都没问题。&lt;/p&gt;
&lt;h3 id=&quot;常用的状态码14种：&quot;&gt;&lt;a href=&quot;#常用的状态码14种：&quot; class=&quot;headerlink&quot; title=&quot;常用的状态码14种：&quot;&gt;&lt;/a&gt;常用的状态码14种：&lt;/h3&gt;&lt;h4 id=&quot;2XX-成功&quot;&gt;&lt;a href=&quot;#2XX-成功&quot; class=&quot;headerlink&quot; title=&quot;2XX 成功&quot;&gt;&lt;/a&gt;2XX 成功&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;200 OK：请求被正常处理&lt;/li&gt;
&lt;li&gt;204 No Content：一般在只需从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。&lt;/li&gt;
&lt;li&gt;206 Partial Content：客户端进行范围请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3XX-重定向&quot;&gt;&lt;a href=&quot;#3XX-重定向&quot; class=&quot;headerlink&quot; title=&quot;3XX 重定向&quot;&gt;&lt;/a&gt;3XX 重定向&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;301 Moved Permanently：永久重定向。表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。&lt;br&gt;也就是说，如果已经把资源对应的URI保存为书签了，这时应该按Location首部字段提示的URI重新保存。&lt;/li&gt;
&lt;li&gt;302 Found：临时性重定向。表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。&lt;br&gt;和301 Moved Permanently状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。比如，用户把URI保存成书签，但不会像301状态码出现时那样去更新书签，而是仍旧保留返回302状态码的页面对应的URI（在Chrome中，还是会保存为重定向后的URI，不解）。&lt;/li&gt;
&lt;li&gt;303 See Other：表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。这与302类似，但303明确表示客户端应当采用GET方法获取资源。&lt;/li&gt;
&lt;li&gt;304 Not Modified：该状态码表示客户端发送附带条件的请求（指采用GET方法的请求报文中包含If-Match,If-Modified-Since，If-None-March，If-Range，If-Unmodified-Since中任一首部。）时，服务器端允许请求访问资源，但因发生请求为满足条件的情况后，直接返回304（服务器端资源未改变，可直接使用客户端未过期的缓存）。304状态码返回时，不包含任何响应的主体部分。&lt;br&gt;304虽被划分在3XX类别，但是和重定向没有关系。&lt;/li&gt;
&lt;li&gt;307 Temporary Redirect：临时重定向。与302有相同含义。307遵守浏览器标准，不会从POST变成GET。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;就算是304，也需要发出请求与接收响应，也会耗费资源和时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4XX-客户端错误&quot;&gt;&lt;a href=&quot;#4XX-客户端错误&quot; class=&quot;headerlink&quot; title=&quot;4XX 客户端错误&quot;&gt;&lt;/a&gt;4XX 客户端错误&lt;/h4&gt;&lt;p&gt;4XX的响应结果表明客户端是发生错误的原因所在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;400 Bad Request：表示请求报文中存在语法错误。&lt;/li&gt;
&lt;li&gt;401 Unauthorized：表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。&lt;/li&gt;
&lt;li&gt;403 Forbidden：表明对请求资源的访问被服务器拒绝了。服务器端可在实体的主体部分对原因进行描述（可选）&lt;/li&gt;
&lt;li&gt;404 Not Found：表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时时用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5XX-服务器错误&quot;&gt;&lt;a href=&quot;#5XX-服务器错误&quot; class=&quot;headerlink&quot; title=&quot;5XX 服务器错误&quot;&gt;&lt;/a&gt;5XX 服务器错误&lt;/h4&gt;&lt;p&gt;5XX的响应结果表明服务器本身发生错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;500 Interval Server Error：表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的bug或某些临时的故障。&lt;/li&gt;
&lt;li&gt;503 Service Unavailable：表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第五章-与HTTP协作的Web服务器&quot;&gt;&lt;a href=&quot;#第五章-与HTTP协作的Web服务器&quot; class=&quot;headerlink&quot; title=&quot;第五章 与HTTP协作的Web服务器&quot;&gt;&lt;/a&gt;第五章 与HTTP协作的Web服务器&lt;/h2&gt;&lt;h3 id=&quot;用单台虚拟主机实现多个域名&quot;&gt;&lt;a href=&quot;#用单台虚拟主机实现多个域名&quot; class=&quot;headerlink&quot; title=&quot;用单台虚拟主机实现多个域名&quot;&gt;&lt;/a&gt;用单台虚拟主机实现多个域名&lt;/h3&gt;&lt;p&gt;HTTP/1.1 规范允许一台HTTP服务器搭建多个Web站点。这是利用虚拟主机（Virtual Host，又称虚拟服务器）的功能。&lt;/p&gt;
&lt;p&gt;在互联网上，域名通过DNS服务映射到IP地址之后访问目标网站。可见，当请求发送到服务器时，已经是以IP地址形式访问了。所以，当一台托管了两个域名的服务器接收到请求时就需要弄清楚究竟要访问哪个域名。&lt;br&gt;在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的Web网站，因此在发送HTTP请求时，必须在Host首部内完整指定主机名或域名的URI。&lt;/p&gt;
&lt;h3 id=&quot;通信数据转发程序：代理、网关、隧道&quot;&gt;&lt;a href=&quot;#通信数据转发程序：代理、网关、隧道&quot; class=&quot;headerlink&quot; title=&quot;通信数据转发程序：代理、网关、隧道&quot;&gt;&lt;/a&gt;通信数据转发程序：代理、网关、隧道&lt;/h3&gt;&lt;p&gt;HTTP通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关、隧道。它们可以配合服务器工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理：是一种有转发功能的应用程序，扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。&lt;/li&gt;
&lt;li&gt;网关：是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。&lt;/li&gt;
&lt;li&gt;隧道：是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h4&gt;&lt;p&gt;代理不改变请求URI，会直接发送给前方持有资源的目标服务器。&lt;br&gt;持有资源实体的服务器被称为源服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-68.jpg&quot; alt=&quot;&amp;gt; P68&quot;&gt;&lt;br&gt;例如：&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-%E4%BB%A3%E7%90%86.png&quot; alt=&quot;&amp;gt; 淘宝的via&quot;&gt;&lt;/p&gt;
&lt;p&gt;每次通过代理服务器转发请求或响应式，会追加写入via首部信息。&lt;/p&gt;
&lt;p&gt;使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。&lt;/p&gt;
&lt;p&gt;代理有多种使用方法，按两种基准分类。一种是是否是否使用缓存，另一种是是否会修改报文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理缓存：代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。&lt;/li&gt;
&lt;li&gt;透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;网关&quot;&gt;&lt;a href=&quot;#网关&quot; class=&quot;headerlink&quot; title=&quot;网关&quot;&gt;&lt;/a&gt;网关&lt;/h4&gt;&lt;p&gt;网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供&lt;strong&gt;非HTTP协议服务&lt;/strong&gt;。&lt;br&gt;利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用SQL语句查询数据。另外，在Web购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。&lt;/p&gt;
&lt;h4 id=&quot;隧道&quot;&gt;&lt;a href=&quot;#隧道&quot; class=&quot;headerlink&quot; title=&quot;隧道&quot;&gt;&lt;/a&gt;隧道&lt;/h4&gt;&lt;p&gt;隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保客户端与服务器进行安全的通信。&lt;/p&gt;
&lt;p&gt;隧道本身不会去解析HTTP请求。请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。&lt;/p&gt;
&lt;h3 id=&quot;保存资源的缓存&quot;&gt;&lt;a href=&quot;#保存资源的缓存&quot; class=&quot;headerlink&quot; title=&quot;保存资源的缓存&quot;&gt;&lt;/a&gt;保存资源的缓存&lt;/h3&gt;&lt;p&gt;缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可减少对源服务器的访问，节省通信流量和时间。&lt;/p&gt;
&lt;p&gt;缓存服务器是代理服务器的一种。当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。&lt;/p&gt;
&lt;p&gt;缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。&lt;/p&gt;
&lt;h4 id=&quot;缓存的有效期限&quot;&gt;&lt;a href=&quot;#缓存的有效期限&quot; class=&quot;headerlink&quot; title=&quot;缓存的有效期限&quot;&gt;&lt;/a&gt;缓存的有效期限&lt;/h4&gt;&lt;p&gt;对于缓存服务器和客户端浏览器，当判定缓存过期或客户端要求，会向源服务器确认资源的有效性。若失效，浏览器会再次请求新资源。&lt;/p&gt;
&lt;h2 id=&quot;第六章-HTTP首部&quot;&gt;&lt;a href=&quot;#第六章-HTTP首部&quot; class=&quot;headerlink&quot; title=&quot;第六章 HTTP首部&quot;&gt;&lt;/a&gt;第六章 HTTP首部&lt;/h2&gt;&lt;p&gt;HTTP协议的请求和响应报文中必定包含HTTP首部。首部内容为客户端和服务器端分别处理请求和响应提供所需要的信息。&lt;/p&gt;
&lt;p&gt;HTTP请求报文：由方法、URI、HTTP版本、HTTP首部字段等构成。&lt;br&gt;HTTP响应报文：由HTTP版本、状态码（数字和原因短语）、HTTP首部字段 3 部分组成。&lt;/p&gt;
&lt;h3 id=&quot;HTTP首部字段&quot;&gt;&lt;a href=&quot;#HTTP首部字段&quot; class=&quot;headerlink&quot; title=&quot;HTTP首部字段&quot;&gt;&lt;/a&gt;HTTP首部字段&lt;/h3&gt;&lt;p&gt;使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。&lt;/p&gt;
&lt;h4 id=&quot;4种HTTP首部字段类型&quot;&gt;&lt;a href=&quot;#4种HTTP首部字段类型&quot; class=&quot;headerlink&quot; title=&quot;4种HTTP首部字段类型&quot;&gt;&lt;/a&gt;4种HTTP首部字段类型&lt;/h4&gt;&lt;p&gt;HTTP首部字段根据实际通途被分为以下4种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用首部字段（General Header Fileds）：请求报文和响应报文两方都会使用的首部&lt;/li&gt;
&lt;li&gt;请求首都字段（Request Header Fields）：从客服端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。&lt;/li&gt;
&lt;li&gt;响应首部字段（Response Header Fields）：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。&lt;/li&gt;
&lt;li&gt;实体首部字段（Entity Header Fields）：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;HTTP-1-1首部字段一览&quot;&gt;&lt;a href=&quot;#HTTP-1-1首部字段一览&quot; class=&quot;headerlink&quot; title=&quot;HTTP/1.1首部字段一览&quot;&gt;&lt;/a&gt;HTTP/1.1首部字段一览&lt;/h4&gt;&lt;p&gt;通用首部字段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cache-Control&lt;/td&gt;
&lt;td&gt;控制缓存行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection&lt;/td&gt;
&lt;td&gt;逐跳首部、连接的管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;创建报文的日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pragma&lt;/td&gt;
&lt;td&gt;报文指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trailer&lt;/td&gt;
&lt;td&gt;报文末端的首部一览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer-Encoding&lt;/td&gt;
&lt;td&gt;指定报文主体的传输编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Upgrade&lt;/td&gt;
&lt;td&gt;升级为其他协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Via&lt;/td&gt;
&lt;td&gt;代理服务器的相关信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Warning&lt;/td&gt;
&lt;td&gt;错误通知&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Cache-Control的no-cache指令代表不缓存过期的资源，而不是不缓存。no-store才是真正不进行缓存。&lt;br&gt;Connection首部字段的值为close时，代表服务器想明确断开连接（HTTP/1.1默认都是持久连接）&lt;/p&gt;
&lt;p&gt;请求首部字段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;用户代理可处理的媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Charset&lt;/td&gt;
&lt;td&gt;优先的字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Encoding&lt;/td&gt;
&lt;td&gt;优先的内容编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Language&lt;/td&gt;
&lt;td&gt;优先的语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authorization&lt;/td&gt;
&lt;td&gt;Web认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expect&lt;/td&gt;
&lt;td&gt;期待服务器的行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;From&lt;/td&gt;
&lt;td&gt;用户的电子邮箱地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;请求资源所在服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Match&lt;/td&gt;
&lt;td&gt;比较实体标记（ETag）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Modified-Since&lt;/td&gt;
&lt;td&gt;比较资源的更新时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Node-Match&lt;/td&gt;
&lt;td&gt;比较实体标记（与If-Match相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Range&lt;/td&gt;
&lt;td&gt;资源未更新时发送实体Byte的范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Unmodified-Since&lt;/td&gt;
&lt;td&gt;比较资源的更新时间（与If-Modified-Since相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max-Forwards&lt;/td&gt;
&lt;td&gt;最大传输逐跳数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authorization&lt;/td&gt;
&lt;td&gt;代理服务器要求客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;实体的字节范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Referer&lt;/td&gt;
&lt;td&gt;对请求中URI的原始获取方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TE&lt;/td&gt;
&lt;td&gt;传输编码的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User-Agent&lt;/td&gt;
&lt;td&gt;HTTP客户端程序的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;该表的Accept*字段都可以指定权重q（0-1）。当服务器提供多种内容时，将会首先返回权重最高的。&lt;br&gt;If-xxx请求首部字段都称为条件请求，服务器接收到附带条件的请求后，只有判断指定条件为真时，才回执行请求。&lt;br&gt;Referer 的正确拼写应该是Referrer。当直接在浏览器的地址栏输入URI时，或处于安全考虑时，可不发该首部字段。&lt;/p&gt;
&lt;p&gt;响应首部字段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Ranges&lt;/td&gt;
&lt;td&gt;是否接受字节范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;推算资源创建经过时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETag&lt;/td&gt;
&lt;td&gt;资源的匹配信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;令客户端重定向至指定URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authenticate&lt;/td&gt;
&lt;td&gt;代理服务器对客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retry-After&lt;/td&gt;
&lt;td&gt;对再次发起请求的时机要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;HTTP服务器的安装信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vary&lt;/td&gt;
&lt;td&gt;代理服务器缓存的管理信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WWW-Authenticate&lt;/td&gt;
&lt;td&gt;服务器对客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;几乎所有浏览器在接收到包含首部字段Location的响应后，都会强制性地尝试对已提示的重定向资源的访问。&lt;/p&gt;
&lt;p&gt;实体首部字段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Allow&lt;/td&gt;
&lt;td&gt;资源可支持的HTTP方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Encoding&lt;/td&gt;
&lt;td&gt;实体主体适用的编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Language&lt;/td&gt;
&lt;td&gt;实体主体的自然语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Length&lt;/td&gt;
&lt;td&gt;实体主体的大小（字节）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Location&lt;/td&gt;
&lt;td&gt;替代对应资源的URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-MD5&lt;/td&gt;
&lt;td&gt;实体主体的报文摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Range&lt;/td&gt;
&lt;td&gt;实体主体的位置范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;实体主体的媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expires&lt;/td&gt;
&lt;td&gt;实体主体过期的日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last-Modified&lt;/td&gt;
&lt;td&gt;资源的最后修改日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为Cookie服务的首部字段&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;首部类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Set-Cookie&lt;/td&gt;
&lt;td&gt;开始状态管理所使用的Cookie信息&lt;/td&gt;
&lt;td&gt;响应首部字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;服务器接收到的Cookie信息&lt;/td&gt;
&lt;td&gt;请求首部字段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Set-Cookie字段的属性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NAME=VALUE&lt;/td&gt;
&lt;td&gt;赋予Cookie的名称和其值（必需项）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expires=DATE&lt;/td&gt;
&lt;td&gt;Cookie的有效期（若不明确指定则默认为浏览器关闭前为止）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path=Path&lt;/td&gt;
&lt;td&gt;将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain=域名&lt;/td&gt;
&lt;td&gt;作为Cookie适用对象的域名（若不指定则默认为创建Cookie的服务器的域名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Secure&lt;/td&gt;
&lt;td&gt;仅在HTTPS安全通信时才会发送Cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HttpOnly&lt;/td&gt;
&lt;td&gt;加以限制，使Cookie不能被JavaSript脚本访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;expires：一旦Cookie从服务器端发送至客户端，服务器端就不存在可以显示删除Cookie的方法。但可通过覆盖已过期的Cookie，实现对客户端Cookie的实质性删除操作。&lt;br&gt;path：用来指定cookie被发送到服务器的哪一个目录路径下（即被服务器哪个路径接收cookie），其中”/“指的是站点根目录，可在同一台服务器（即使有多个应用）内共享该cookie。&lt;/p&gt;
&lt;h2 id=&quot;第七章-确保Web安全的HTTPS&quot;&gt;&lt;a href=&quot;#第七章-确保Web安全的HTTPS&quot; class=&quot;headerlink&quot; title=&quot;第七章 确保Web安全的HTTPS&quot;&gt;&lt;/a&gt;第七章 确保Web安全的HTTPS&lt;/h2&gt;&lt;h3 id=&quot;HTTP的确定&quot;&gt;&lt;a href=&quot;#HTTP的确定&quot; class=&quot;headerlink&quot; title=&quot;HTTP的确定&quot;&gt;&lt;/a&gt;HTTP的确定&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通信使用明文可能会被窃听&lt;/li&gt;
&lt;li&gt;不验证通信方的身份就可能遭受伪装&lt;/li&gt;
&lt;li&gt;无法验证报文完整性，可能已遭篡改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HTTP-加密-认证-完整性保护-HTTPS&quot;&gt;&lt;a href=&quot;#HTTP-加密-认证-完整性保护-HTTPS&quot; class=&quot;headerlink&quot; title=&quot;HTTP+加密+认证+完整性保护 = HTTPS&quot;&gt;&lt;/a&gt;HTTP+加密+认证+完整性保护 = HTTPS&lt;/h3&gt;&lt;h2 id=&quot;第八章-确认访问用户身份的认证&quot;&gt;&lt;a href=&quot;#第八章-确认访问用户身份的认证&quot; class=&quot;headerlink&quot; title=&quot;第八章 确认访问用户身份的认证&quot;&gt;&lt;/a&gt;第八章 确认访问用户身份的认证&lt;/h2&gt;&lt;p&gt;核对的信息通常是指以下这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码：只有本人才会知道的字符串信息&lt;/li&gt;
&lt;li&gt;动态令牌：仅限本人持有的设备内显示的一次性密码&lt;/li&gt;
&lt;li&gt;数字证书：仅限本人（终端）持有的信息&lt;/li&gt;
&lt;li&gt;生物认证：指纹和虹膜等本人的生理信息&lt;/li&gt;
&lt;li&gt;IC卡等：仅限本人持有的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP/1.1 使用的认证方式如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BASIC认证（基本认证）&lt;/li&gt;
&lt;li&gt;DIGEST 认证（摘要认证）w&lt;/li&gt;
&lt;li&gt;SSL 客户端认证&lt;/li&gt;
&lt;li&gt;FormBase认证（基于表单认证）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第九章-基于HTTP的功能追加协议&quot;&gt;&lt;a href=&quot;#第九章-基于HTTP的功能追加协议&quot; class=&quot;headerlink&quot; title=&quot;第九章 基于HTTP的功能追加协议&quot;&gt;&lt;/a&gt;第九章 基于HTTP的功能追加协议&lt;/h2&gt;&lt;h3 id=&quot;HTTP的瓶颈&quot;&gt;&lt;a href=&quot;#HTTP的瓶颈&quot; class=&quot;headerlink&quot; title=&quot;HTTP的瓶颈&quot;&gt;&lt;/a&gt;HTTP的瓶颈&lt;/h3&gt;&lt;p&gt;使用HTTP协议探知服务器上是否有内容更新，就必须频繁地从客户端到服务器端进行确认。如果服务器上没有内容更新，那么就会产生徒劳的通信。&lt;br&gt;若想在现有Web实现所需的功能，一下这些HTTP标准就会成为瓶颈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条连接上只可发送一个请求（前面讲到，持久化可保持TCP连接状态，但仍完成一次请求/响应后才能进行下一次请求/响应，而管线化方式可让一个TCP连接并行发送多个请求。）&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始。客户端不可以接收除响应以外的指令&lt;/li&gt;
&lt;li&gt;请求/响应首部未经压缩就发送。首部信息越多延迟越大&lt;/li&gt;
&lt;li&gt;发送冗长的首部。每次互相发送相同的首部造成的浪费较多&lt;/li&gt;
&lt;li&gt;可任意选择数据压缩格式。非强制压缩发送&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Comet-的解决方法&quot;&gt;&lt;a href=&quot;#Comet-的解决方法&quot; class=&quot;headerlink&quot; title=&quot;Comet 的解决方法&quot;&gt;&lt;/a&gt;Comet 的解决方法&lt;/h4&gt;&lt;p&gt;通常，服务器接收到请求，在处理完毕后就立即返回响应，但为了实现推送功能，Comet会先将响应置于&lt;strong&gt;挂起状态&lt;/strong&gt;，当服务器端有内容更新时，再返回该响应。&lt;br&gt;内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet仍未解决HTTP协议的本身存在的问题。&lt;/p&gt;
&lt;h4 id=&quot;SPDY&quot;&gt;&lt;a href=&quot;#SPDY&quot; class=&quot;headerlink&quot; title=&quot;SPDY&quot;&gt;&lt;/a&gt;SPDY&lt;/h4&gt;&lt;p&gt;Google 在2010年发布了 SPDY，其开发目标旨在解决HTTP的性能瓶颈，缩短Web页面的加载时间。&lt;br&gt;SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层与运输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY规定通信中使用SSL。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-184.jpg&quot; alt=&quot;&amp;gt; P184&quot;&gt;&lt;/p&gt;
&lt;p&gt;SPDY以会话层的形式加入，控制对数据的流动，但还是采用HTTP建立通信连接。因此，可照常使用HTTP的GET和POST等方法、Cookie以及HTTP报文等。&lt;/p&gt;
&lt;p&gt;使用 SPDY后，HTTP协议额外获得以下功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路复用流：通过单一的TCP连接，可以无限制处理多个HTTP请求。所有请求的处理都在一条TCP连接上完成，因此TCP的处理效率得到提高。&lt;/li&gt;
&lt;li&gt;赋予请求优先级：SPDY不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。&lt;/li&gt;
&lt;li&gt;压缩HTTP首部：压缩HTTP请求和响应的首部。&lt;/li&gt;
&lt;li&gt;推送功能：支持服务器主动向客户端推送数据的功能。&lt;/li&gt;
&lt;li&gt;服务器提示功能：服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用浏览器进行全双工通信的-WebSocket&quot;&gt;&lt;a href=&quot;#使用浏览器进行全双工通信的-WebSocket&quot; class=&quot;headerlink&quot; title=&quot;使用浏览器进行全双工通信的 WebSocket&quot;&gt;&lt;/a&gt;使用浏览器进行全双工通信的 WebSocket&lt;/h3&gt;&lt;p&gt;利用Ajax和Comet技术进行通信可以提升Web的浏览速度。但问题在于通信若使用HTTP协议，就无法彻底解决瓶颈问题。&lt;/p&gt;
&lt;p&gt;WebSocket技术主要是为了解决Ajax和Comet里XMLHttpRequst附带的缺陷所引起的问题。&lt;/p&gt;
&lt;p&gt;一旦Web服务器与客户端之间建立起WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML或图片等任意格式的数据。&lt;/p&gt;
&lt;p&gt;WebSocket的主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推送功能：支持由服务器向客户端推送数据。&lt;/li&gt;
&lt;li&gt;减少通信量：和HTTP相比，不但每次连接时的总开销减少，而且由于WebSocket的首部信息很小，通信量也相应较少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了实现WebSocket通信，在HTTP连接建立之后，需要完成一次“握手”的步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;握手·请求：为了实现WebSocket通信，需要用到HTTP的Upgrade首部字段，告知服务器通信协议发生改变，以达到握手的目的。&lt;/li&gt;
&lt;li&gt;握手·响应：对于之前的请求，返回状态码101 Switching Protocols 的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成功握手确立WebSocket连接后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于是建立在HTTP基础上的协议，因此连接的发起方仍是客户端&lt;/strong&gt;，而一旦确立WebSocket通信连接，不论服务器端还是客户端，任意一方都可直接向对方发送报文。&lt;/p&gt;
&lt;h3 id=&quot;HTTP-2-0&quot;&gt;&lt;a href=&quot;#HTTP-2-0&quot; class=&quot;headerlink&quot; title=&quot;HTTP/2.0&quot;&gt;&lt;/a&gt;HTTP/2.0&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88%2806-29%29.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP2中英对照版&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/34074946&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2.0 相比1.0有哪些重大改进？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第十一章-Web攻击技术&quot;&gt;&lt;a href=&quot;#第十一章-Web攻击技术&quot; class=&quot;headerlink&quot; title=&quot;第十一章 Web攻击技术&quot;&gt;&lt;/a&gt;第十一章 Web攻击技术&lt;/h2&gt;&lt;p&gt;简单的HTTP协议本身并不存在安全性问题，因此协议本身几乎不会成为攻击的对象。应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标。&lt;/p&gt;
&lt;p&gt;HTTP不具备必要的安全功能，就拿远程登录时会用到的SSH协议来说，SSH具备协议级别的认证及会话管理等功能，HTTP协议则没有。另外在架设SSH服务方面，任何人都可以轻易地创建安全等级高的服务。而HTTP即使已假设好服务器，但开发者需要自行设计并开发认证及会话管理功能来满足Web应用的安全。而自行设计就意味着会出现各种形形色色的实现，可仍在运作的Web应用背后就会隐藏着各种容易被攻击者滥用的安全漏洞的Bug。&lt;/p&gt;
&lt;h3 id=&quot;因输出值转义不完全引发的安全漏洞&quot;&gt;&lt;a href=&quot;#因输出值转义不完全引发的安全漏洞&quot; class=&quot;headerlink&quot; title=&quot;因输出值转义不完全引发的安全漏洞&quot;&gt;&lt;/a&gt;因输出值转义不完全引发的安全漏洞&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;跨站脚本攻击（Cross-Site Scripting, XSS）：主要是指在用户浏览器内运行了非法的 HTML 标签或 JavaScript 脚本。比如富文本编辑器，如果不过滤用户输入的数据直接显示用户输入的HTML内容的话，就会有可能运行恶意的 JavaScript 脚本，导致页面结构错乱，Cookies 信息被窃取等问题。&lt;/li&gt;
&lt;li&gt;SQL注入攻击（SQL Injection）：是指针对 Web 应用使用的数据库，通过运行非法的SQL而产生的攻击。&lt;/li&gt;
&lt;li&gt;OS命令攻击（OS Command Injection）：是指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。 只要在能调用 Shell 函数的地方就有存在被攻击的风险。&lt;/li&gt;
&lt;li&gt;HTTP首部注入攻击（HTTP Header Injection）：是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击。&lt;/li&gt;
&lt;li&gt;HTTP 响应截断攻击：是用在 HTTP 首部注入的一种攻击。攻击顺序相同，但是要将两个 %0D%0A%0D%0A 并排插入字符串后 发送。利用两个连续的换行就可作出 HTTP 首部与主体分隔所需的空行了，这样 就能显示伪造的主体，达到攻击的目的。&lt;/li&gt;
&lt;li&gt;邮件首部注入攻击（Mail Header Injection）：是指 Web 应用中的邮件发送功能，攻击者通过向邮件首部 To 或 Subject 内任意添加非法内容发起的攻击。利用存在安全漏洞的Web网站，可对任意邮件地址发送广告邮件或 病毒邮件。&lt;/li&gt;
&lt;li&gt;目录遍历攻击（Directory Traversal）：是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击。比如，通过 ../ 等相对路径定位到 /etc/passwd 等绝对路径上。&lt;/li&gt;
&lt;li&gt;远程文件包含漏洞（Remote File Inclusion）： 是指当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的URL充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;因设置或设计上的缺陷引发的安全漏洞&quot;&gt;&lt;a href=&quot;#因设置或设计上的缺陷引发的安全漏洞&quot; class=&quot;headerlink&quot; title=&quot;因设置或设计上的缺陷引发的安全漏洞&quot;&gt;&lt;/a&gt;因设置或设计上的缺陷引发的安全漏洞&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;强制浏览（Forced Browsing）：是指，从安置在Web服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。比如，没有对那些需要保护的静态资源增加权限控制。&lt;/li&gt;
&lt;li&gt;不正确的错误消息处理（Error Handling Vulerability）：指Web应用的错误信息内包含对攻击者有用 的信息。&lt;/li&gt;
&lt;li&gt;开放重定向（Open Redirect）：是一种对指定的任意URL作重定向跳转的功能。而于此功能相关联的安全漏洞是指， 假如指定的重定向 URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;因会话管理疏忽引发的安全漏洞&quot;&gt;&lt;a href=&quot;#因会话管理疏忽引发的安全漏洞&quot; class=&quot;headerlink&quot; title=&quot;因会话管理疏忽引发的安全漏洞&quot;&gt;&lt;/a&gt;因会话管理疏忽引发的安全漏洞&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会话劫持（Session Hijiack）：是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。&lt;/li&gt;
&lt;li&gt;会话固定攻击（Session Fixation）：对以窃取目标会话ID为主动攻击手段的会话劫持而言，会强制用户使用攻击者指定的会话 ID，属于被动攻击。&lt;/li&gt;
&lt;li&gt;跨站点请求伪造（Cross-Site Request Forgeries, CSRF）：是指攻击者通过设置好陷阱，强制对已完成认证的用户进行非预期的个人信息或设定等某些状态更新，属于被动攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其它安全漏洞&quot;&gt;&lt;a href=&quot;#其它安全漏洞&quot; class=&quot;headerlink&quot; title=&quot;其它安全漏洞&quot;&gt;&lt;/a&gt;其它安全漏洞&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;密码破解：①通过网络进行密码试错（穷举法和字典攻击）；②对已加密密码的破解（通过穷举法·字典攻击进行类推、彩虹表、拿到加密时使用的密钥、加密算法的漏洞）&lt;/li&gt;
&lt;li&gt;点击劫持：是指利用透明的按钮或链接做成陷阱，覆盖在Web页面之上。然后诱使用户在不知情的情况下， 单击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。&lt;/li&gt;
&lt;li&gt;Dos攻击：是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。多台计算机发起的 Dos 攻击称为 DDoS 攻击（Distributed Denial of Service attach） 。&lt;/li&gt;
&lt;li&gt;后门程序：是指开发设置的隐藏入口（如开发阶段作为Debug调用的后门程序），可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自问自答：&quot;&gt;&lt;a href=&quot;#自问自答：&quot; class=&quot;headerlink&quot; title=&quot;自问自答：&quot;&gt;&lt;/a&gt;自问自答：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;URI与URL的区别&lt;br&gt;答：URI 用字符串（包括地址）标识某一个互联网资源，而URL表示资源的地点。因此URL是URI的子集。&lt;/li&gt;
&lt;li&gt;输入URL后，浏览器发生哪些变化&lt;br&gt;下图需要补充：在从DNS服务器获取IP后，进行3次握手。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/graphical-http-15.jpg&quot; alt=&quot;P15 + 三次握手&quot;&gt;&lt;br&gt;从服务器获取相应资源后，浏览器就会对这些资源进行相应的解析，具体可看&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Developers&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;GET与POST的区别&lt;br&gt;可以看看这篇文章 &lt;a href=&quot;http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈HTTP中Get与Post的区别&lt;/a&gt;。我个人认为主要的一点是：&lt;strong&gt;URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。&lt;/strong&gt;&lt;br&gt;关于URL和queryString长度限制的相关链接：&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers/417184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the maximum length of a URL in different browsers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the maximum possible length of a query string?&lt;/a&gt;&lt;br&gt;因此对于GET请求时，URL超出浏览器或者服务器限制的情况，建议改成POST请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;301与302区别&lt;br&gt;答：301是永久性重定向，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。&lt;br&gt;302是临时性重定向，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。&lt;/li&gt;
&lt;li&gt;为什么三次握手，二次不可以吗？&lt;br&gt;答：不可以，只有完成3次才能进行后续操作，若在握手过程中某个阶段中断，TCP协议会再次以相同的顺序发送相同的数据包。而且，第三次握手是客户端为了让服务器知道它是否接收到响应，确保连接建立成功。&lt;/li&gt;
&lt;li&gt;为什么有时候下载高清大图时，图片会一块一块地加载。&lt;br&gt;答：这就是因为设置了http请求的长度，这样就可以分块的加载资源文件。&lt;br&gt;　　在请求报文中使用Range属性，在响应报文中使用Content-Type属性都可以指定一定字节范围的http请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“自问自答”仅是我个人的理解，如果你有不同的观点，可以一起讨论。当然，如果你有认为不错的问答，可以联系我，我会不断完善。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/JChehe/blog/blob/master/posts/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《图解HTTP》读书笔记&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;HTTP（HyperText Transfer Protocol，超文转移协议，超文本传输协议的译法并不严谨。）&lt;/p&gt;
&lt;h3 id=&quot;网络基础-TCP-IP&quot;&gt;&lt;a href=&quot;#网络基础-TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;网络基础 TCP/IP&quot;&gt;&lt;/a&gt;网络基础 TCP/IP&lt;/h3&gt;&lt;h4 id=&quot;TCP-IP-协议族&quot;&gt;&lt;a href=&quot;#TCP-IP-协议族&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP 协议族&quot;&gt;&lt;/a&gt;TCP/IP 协议族&lt;/h4&gt;&lt;p&gt;TCP/IP 协议族是互联网相关联的协议的集合。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤，等等。而HTTP是属于它内部的一个子集。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 的 attr 与 prop 的区别</title>
    <link href="http://yoursite.com/2016/03/08/2016-3-8-attr-and-prop/"/>
    <id>http://yoursite.com/2016/03/08/2016-3-8-attr-and-prop/</id>
    <published>2016-03-08T06:47:42.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;先提出问题：对于 checked 这类值是 true/false 的属性，用 jQuery 的 attr 或 prop 方法进行 读取或设置值是有区别的。&lt;/p&gt;
&lt;p&gt;在看 jQuery 文档前，我们先看看 attribute 与 property 是什么：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;先搞懂-attribute-与-property&quot;&gt;&lt;a href=&quot;#先搞懂-attribute-与-property&quot; class=&quot;headerlink&quot; title=&quot;先搞懂 attribute 与 property&quot;&gt;&lt;/a&gt;先搞懂 attribute 与 property&lt;/h3&gt;&lt;p&gt;当编写 HTML 源码时，你能在 HTML 元素里定义 attributes。然后，一旦浏览器解析你的代码，该 HTML 元素相应的 DOM 节点就会被创建。该节点是一个对象，因此它就拥有 properties。&lt;br&gt;因此，我们知道：attributes 是 HTML 元素（标签）的属性，而 properties 是 DOM 对象的属性。&lt;/p&gt;
&lt;p&gt;例如，下面这个 HTML 元素：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; value=&amp;quot;Name:&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;拥有两个 attributes。&lt;/p&gt;
&lt;p&gt;一旦浏览器解析该代码，HTMLInputElement 对象就会被创建，并且该对象会拥有很多 peoperties，如：accept、accessKey、align、alt、attributes、autofocus、baseURI、checked、childElementCount、ChildNodes、children、classList、className、clientHeight 等等。&lt;/p&gt;
&lt;p&gt;对于某个 DOM 节点对象，properties 是该对象的所有属性，而 attributes 是该对象对应元素(标签)的属性。&lt;/p&gt;
&lt;p&gt;当一个 DOM 节点为某个 HTML 元素所创建时，其大多数 properties 与对应 attributes 拥有相同或相近的名字，但这并不是一对一的关系。例如，下面这个 HTML 元素：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input id=&amp;quot;the-input&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;Name:&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其对应 DOM 节点会拥有如下properties： id、type 和 value：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; property是 &lt;code&gt;id&lt;/code&gt; attribute 的映射：获取该 property 即等于读取其对应的 attribute 值，而设置该 property 即为 attribute 赋值。&lt;code&gt;id&lt;/code&gt; 是一个纯粹的映射 property，它不会修改或限制其值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; property 是 &lt;code&gt;type&lt;/code&gt; attribute 的映射：获取该 property 即等于读取其对应的 attribute 值，而设置该 property 即为 attribute 赋值。但 &lt;code&gt;type&lt;/code&gt; 并不是一个纯粹的映射 property，因为它的值被限制在已知值（即 input 的合法类型，如：text、password）。如果你有 &lt;code&gt;&amp;lt;input type=&amp;quot;foo&amp;quot;&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;theInput.getAttribute(&amp;quot;type&amp;quot;)&lt;/code&gt; 会返回 &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;，而 &lt;code&gt;theInput.type&lt;/code&gt; 会返回 &lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相比之下，&lt;code&gt;value&lt;/code&gt; property 并不会映射 &lt;code&gt;value&lt;/code&gt; attribute。取而代之的是 input 的当前值。当用户手动更改输入框的值，&lt;code&gt;value&lt;/code&gt; property 会反映该改变。所以，如果用户在 input 输入 &lt;code&gt;John&lt;/code&gt;，然后：&lt;/p&gt;
&lt;p&gt; theInput.value // 返回 “John”&lt;br&gt;然而：&lt;br&gt; theInput.getAttribute(‘value’) // 返回 “Name:”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt; property 反映了 input 的&lt;strong&gt;当前&lt;/strong&gt;文本内容，而 &lt;code&gt;value&lt;/code&gt; attribute 则是在 HTML 源码 value 属性所指定的&lt;strong&gt;初始&lt;/strong&gt;文本内容。&lt;/p&gt;
&lt;p&gt;因此，如果你想知道文本框的当前值，则读取 property。而如果你想知道文本框的初始值，则读取 attribute。或者你也可以利用 defaultValue property，它是 value attribute 的纯粹映射。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theInput.value                 // returns &amp;quot;John&amp;quot;
theInput.getAttribute(&amp;apos;value&amp;apos;) // returns &amp;quot;Name:&amp;quot;
theInput.defaultValue          // returns &amp;quot;Name:&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有几个 properties 是直接反映它们 attribute（rel、id），而有一些则用稍微不同的名字进行直接映射（&lt;code&gt;htmlFor&lt;/code&gt; 映射 &lt;code&gt;for&lt;/code&gt; attribute，&lt;code&gt;className&lt;/code&gt; 映射 &lt;code&gt;class&lt;/code&gt; attribute）。很多 property 所映射的 attribute 是带有限制/变动的（src、href、disabled、multiple）。该 &lt;a href=&quot;https://www.w3.org/TR/html5/infrastructure.html#reflect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;规范&lt;/a&gt; 涵盖了各种各样的映射。&lt;/p&gt;
&lt;h3 id=&quot;再看看-attr-与-prop-的区别&quot;&gt;&lt;a href=&quot;#再看看-attr-与-prop-的区别&quot; class=&quot;headerlink&quot; title=&quot;再看看 attr() 与 prop() 的区别&quot;&gt;&lt;/a&gt;再看看 attr() 与 prop() 的区别&lt;/h3&gt;&lt;p&gt;上述能让我们理清了 attribute 与 property 之间的区别，下面根据 &lt;a href=&quot;http://api.jquery.com/prop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery 文档&lt;/a&gt; 对 attr() 与 prop() 方法进行比较：&lt;/p&gt;
&lt;p&gt;自 jQuery 1.6 版本起，&lt;code&gt;attr()&lt;/code&gt; 方法对于未设置的 attributes （即标签中没写该 attributes）都会返回 &lt;code&gt;undefined&lt;/code&gt;。对于检索和改变 DOM 的 properties，如表单元素的 checked、selected 或 disabled 状态，应使用 &lt;code&gt;.prop()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;Attributes vs. Properties&lt;/p&gt;
&lt;p&gt;attributes 与 properties 之间的差异在特定情况下会变得尤为重要。在 jQuery 1.6 前，&lt;code&gt;.attr()&lt;/code&gt; 方法在检索一些 attributes 时，有时会把 property 考虑进去，这会导致不一致的行为。在 jQuery 1.6 版本之后，&lt;code&gt;.prop()&lt;/code&gt; 方法提供了一种明确检索 property 值的方式，而 &lt;code&gt;.attr&lt;/code&gt; 只会检索 attributes。&lt;/p&gt;
&lt;p&gt;例如，selectedIndex、tagName、nodeName、nodeType、ownerDocument、defaultChecked 和 defaultSelected 能被 &lt;code&gt;.prop()&lt;/code&gt; 检索与设置。在 jQuery 1.6 之前，这些 properties 都是通过 &lt;code&gt;.attr()&lt;/code&gt; 检索的，但检索这些属性并不应属于 attr 方法职责内 。这些属性并没有对应的 attributes，只有 properties 本身。&lt;/p&gt;
&lt;p&gt;对于值为布尔值的 attributes ，考虑到一个 DOM 元素是通过 HTML 标签 &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; checked=&amp;quot;checked /&amp;gt;&lt;/code&gt; 定义的，并且假定它在 JavaScript 的变量名为 &lt;code&gt;elem&lt;/code&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;读取属性&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;返回值&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;elem.checked&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true (Boolean)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;会随着 checkbox 状态作出相应改变&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$(elem).prop(“checked”)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true (Boolean)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;会随着 checkbox 状态作出相应改变&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;elem.getAttribute(“checked”)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;“checked” (String)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;checkbox 的初始状态；并且不会随着 checkbox 的状态而改变。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$(elem).attr(“checked”) (1.6)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;“checked” (String)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;checkbox 的初始状态；并且不会随着 checkbox 的状态而改变。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$(elem).attr(“checked”) (1.6.1+)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;“checked” (String)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;del&gt;会随着 checkbox 状态而作出相应改变&lt;/del&gt;（与jQuery文档描述不一样，我用jQuery 1.12.1 测试，都是返回 “checked”，并不会随着checkbox的改变而改变）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$(elem).attr(“checked”) (1.6之前版本)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true (Boolean)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;true (Boolean) 会随着 checkbox 状态作出相应改变。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据 W3C forms（表单） 规范，&lt;code&gt;checked&lt;/code&gt; 是一个值为 boolean 的 attribute，这意味着当该 attribute 存在（无论值是什么），其对应的 property 都是 true。例如，该 attribute 没赋值或设为空字符串，甚至设为 &lt;code&gt;&amp;quot;false&amp;quot;&lt;/code&gt;。这同样适用于所有值为 boolean 的 attributes。&lt;/p&gt;
&lt;p&gt;然而，对于 &lt;code&gt;checked&lt;/code&gt; attribute 最重要的概念是记住它并不是对应 &lt;code&gt;checked&lt;/code&gt; property。该 attribute 实际上是对应 &lt;code&gt;defaultChecked&lt;/code&gt; property，并仅在初次设置 checkbox 值时使用。&lt;code&gt;checked&lt;/code&gt; attribute 的值并不会随着 checkbox 的状态而作出相应改变，而 &lt;code&gt;checked&lt;/code&gt; property 会。因此，为了兼容不同浏览器，当判断一个 checkbox 是否被选择时应该使用 &lt;code&gt;property&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (elem.checked)
if ($(elem).prop(&amp;quot;checked&amp;quot;))
if ($(elem).is(&amp;quot;:checked&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这同样适用于其它动态 attributes，如 selected 和 value。&lt;/p&gt;
&lt;p&gt;其他说明：&lt;br&gt;在 IE9 之前的版本，如果使用 &lt;code&gt;.prop()&lt;/code&gt; 为 DOM 元素的 property 设置的值不是一个简单的原始值（number、string 或 boolean），且该 property 在 DOM 元素从 document 移除前未被移除（使用 .removeProp()），则会导致内存泄漏。为 DOM 对象设置值的安全做法（避免内存泄漏）是使用  &lt;code&gt;.data()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参考（翻译）：&lt;br&gt;jQuery API Documentation：&lt;a href=&quot;http://api.jquery.com/prop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api.jquery.com/prop/&lt;/a&gt;&lt;br&gt;Properties and Attributrs in HTML：&lt;a href=&quot;http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Github 地址: &lt;a href=&quot;https://github.com/JChehe/blog/blob/master/posts/jQuery%20%E7%9A%84%20attr%20%E4%B8%8E%20prop%20%E7%9A%84%E5%8C%BA%E5%88%AB.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery 的 attr 与 prop 的区别&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;先提出问题：对于 checked 这类值是 true/false 的属性，用 jQuery 的 attr 或 prop 方法进行 读取或设置值是有区别的。&lt;/p&gt;
&lt;p&gt;在看 jQuery 文档前，我们先看看 attribute 与 property 是什么：&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模块【Part 2】：模块打包</title>
    <link href="http://yoursite.com/2016/03/01/2016-2-30-javascript-modules-part-2-module-bundling/"/>
    <id>http://yoursite.com/2016/03/01/2016-2-30-javascript-modules-part-2-module-bundling/</id>
    <published>2016-03-01T03:32:56.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*e0eQH_9X8jN7yC6AEqlvdQ.jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;在文章的 &lt;a href=&quot;https://github.com/JChehe/blog/blob/master/translation/JavaScript%20%E6%A8%A1%E5%9D%97%E3%80%90Part%201%E3%80%91%EF%BC%9A%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Part 1&lt;/a&gt;，我讲解了模块是什么、为何要使用模块和为程序整合为模块的各种方式。而在 Part 2，我将会详细讲解模块“打包”：为什么要打包模块，以不同的方式进行打包和模块在 web 开发上的未来。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是模块打包？&quot;&gt;&lt;a href=&quot;#什么是模块打包？&quot; class=&quot;headerlink&quot; title=&quot;什么是模块打包？&quot;&gt;&lt;/a&gt;什么是模块打包？&lt;/h2&gt;&lt;p&gt;总体上看，模块打包只是简单地将一组模块（和它们所依赖的模块）以正确的顺序整合为单一文件（或文件组）。我们也知道：对于 web 开发，细节才是可怕的地方。 :）。&lt;/p&gt;
&lt;h2 id=&quot;究竟为什么需要打包模块？&quot;&gt;&lt;a href=&quot;#究竟为什么需要打包模块？&quot; class=&quot;headerlink&quot; title=&quot;究竟为什么需要打包模块？&quot;&gt;&lt;/a&gt;究竟为什么需要打包模块？&lt;/h2&gt;&lt;p&gt;当你将程序分为各个模块时，通常会将这些模块放到不同文件或文件夹下。当然，你所使用的库（如 Underscore 或 React）也是模块。&lt;/p&gt;
&lt;p&gt;因此，每个文件都必须以一个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签引入到主 HTML 文件中。然后当用户访问你的主页时，浏览器就会加载这些文件。分离的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签就意味着浏览器必须单独地加载每个文件（一个接一个）。&lt;/p&gt;
&lt;p&gt;…这无疑是页面加载时间的噩耗。&lt;/p&gt;
&lt;p&gt;为了解决该问题，我们需要打包或“拼接”所有文件，从而生成一个大文件（或几个文件，视情况而定）以减少请求数量。当你听到开发者讨论“构建步骤”或“构建处理”时，这大概就是他们所讨论的内容了。&lt;/p&gt;
&lt;p&gt;另一个加快打包操作的普遍做法是：“压缩”打包的代码。压缩就是从源代码中移除不必要的字符（如空格、注释和换行符等），这样能减少内容的整体大小且不会改变代码的功能。&lt;/p&gt;
&lt;p&gt;更少的数据就意味着浏览器处理的时间更短，而且反过来也减少了下载文件的时间。如果你曾看到文件拥有扩展名“min”（如 &lt;a href=&quot;https://github.com/jashkenas/underscore/blob/master/underscore-min.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;underscore-min.js&lt;/a&gt;），你应该会注意到压缩版本会比 &lt;a href=&quot;https://github.com/jashkenas/underscore/blob/master/underscore.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整版&lt;/a&gt; 小很多（当然，无可读性可言）。&lt;/p&gt;
&lt;p&gt;构建工具（如 Gulp 和 Grunt）能为开发者直接执行拼接（concatenation）和压缩（minification）操作，并确保在打包生成利于浏览器执行的代码的同时，也会导出一份开发者可读的代码。&lt;/p&gt;
&lt;h2 id=&quot;打包模块的不同方式是什么？&quot;&gt;&lt;a href=&quot;#打包模块的不同方式是什么？&quot; class=&quot;headerlink&quot; title=&quot;打包模块的不同方式是什么？&quot;&gt;&lt;/a&gt;打包模块的不同方式是什么？&lt;/h2&gt;&lt;p&gt;当使用标准的模块模式（module pattern，在文章的前一节中所讨论的）定义模块时，拼接和压缩文件都能很好运行。你实际所做的是将各个原生 JavaScript 代码混合在一起。&lt;/p&gt;
&lt;p&gt;然而，如果你使用的是非原生的模块系统，如 CommonJS 或 AMD（甚至是原生的 ES6 模块格式，因为浏览器仍不支持该语法），浏览器就不能解析识别了。此时你需要使用特定工具将模块转为顺序正确且对浏览器友好的代码。这些工具可以是 Browserify、RequireJS、Webpack 或其它“模块打包工具”或“模块加载器”。&lt;/p&gt;
&lt;p&gt;除了打包和（或）加载模块，模块打包工具也提供了很多额外功能，如自动重编译（当你对代码作出修改或为了调试而生成 source maps 时）。&lt;/p&gt;
&lt;p&gt;下面是一些常见的模块打包方法：&lt;/p&gt;
&lt;h2 id=&quot;打包-CommonJS&quot;&gt;&lt;a href=&quot;#打包-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;打包 CommonJS&quot;&gt;&lt;/a&gt;打包 CommonJS&lt;/h2&gt;&lt;p&gt;正如你从 &lt;a href=&quot;https://github.com/JChehe/blog/blob/master/translation/JavaScript%20%E6%A8%A1%E5%9D%97%E3%80%90Part%201%E3%80%91%EF%BC%9A%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Part 1&lt;/a&gt; 可知，CommonJS 是同步加载模块的，但这对于浏览器来说并不切合实际。我在 Part 1 提到了一种解决方案 —— 其中一种是模块打包工具 Browserify。Browserify 是一种将 CommonJS 模块编译成浏览器能执行的代码的工具。&lt;/p&gt;
&lt;p&gt;举个例子，main.js 文件导入一个用于计算 &lt;code&gt;number数组&lt;/code&gt; 平均数的模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myDependency = require(‘myDependency’);

var myGrades = [93, 95, 88, 0, 91];

var myAverageGrade = myDependency.average(myGrades);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，main.js 文件有一个依赖项（myDependency）。当使用以下命令时，Browserify 会递归打包所有由 main.js 文件开始引入的模块，到一个名为 bundle.js 的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;browserify main.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Browserify 要实现以上功能，它要解析 &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;抽象语法树（AST）&lt;/a&gt; 的每个 &lt;code&gt;require&lt;/code&gt; 调用，以遍历项目的整个依赖图。一旦它解决了依赖的构造关系，就能将模块以正确的顺序打包进一个单独文件内。然后，在 html 里插入一个用于引入 &lt;code&gt;“bundle.js”&lt;/code&gt; 的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，从而确保你的源代码在一个 HTTP 请求中完成下载。&lt;/p&gt;
&lt;p&gt;同样地，如果多个文件拥有多个依赖，你只需简单地告诉 Browserify 你的入口文件（entry file），然后休息一会等待它完成魔法即可。&lt;/p&gt;
&lt;p&gt;最终产品：打包文件需要通过 Minify-JS 之类的工具压缩打包后的代码。&lt;/p&gt;
&lt;h2 id=&quot;打包-AMD&quot;&gt;&lt;a href=&quot;#打包-AMD&quot; class=&quot;headerlink&quot; title=&quot;打包 AMD&quot;&gt;&lt;/a&gt;打包 AMD&lt;/h2&gt;&lt;p&gt;如果你使用的是 AMD，你需要使用 AMD 加载器，如 RequireJS 或 Curl。一个模块加载器（与打包工具不同）会动态加载程序需要运行的模块。&lt;/p&gt;
&lt;p&gt;再次提醒，AMD 与 CommonJS 的主要区别是：AMD 以异步的方式加载模块。也就是说， 对于 AMD，你实际上不需要将模块打包到一个文件的这个构建步骤，因为它是以异步方式加载模块——也就意味着当用户第一次访问网页时，浏览器会循序渐进地下载程序实际需要执行的文件，而不是一次性下载所有文件。&lt;/p&gt;
&lt;p&gt;然而，在实际生产环境中，随着用户操作，大容量的请求开销并不会产生多大意义。但大多数开发者为了优化性能，仍然使用构建工具（如 RequireJS 优化工具和 &lt;a href=&quot;http://requirejs.org/docs/optimization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;r.js&lt;/a&gt;）打包和压缩它们的 AMD 模块。&lt;/p&gt;
&lt;p&gt;总的来说，AMD 与 CommonJS 之间的打包差异是：在开发期间，AMD 应用无须任何构建步骤即可运行。当然，在代码上线前，要使用优化工具（如 r.js）进行优化。&lt;/p&gt;
&lt;p&gt;想了解更多关于 CommonJS vs. AMD 的有趣讨论，可看看 &lt;a href=&quot;http://tomdale.net/2012/01/amd-is-not-the-answer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tom Dale’s blog&lt;/a&gt; 的这篇文章 : )。&lt;/p&gt;
&lt;h2 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h2&gt;&lt;p&gt;就打包工具而言，Webpack 是这方面的新生儿。它与你所使用的具体模块系统无关，也就是说它允许开发者使用 CommonJS、AMD 或 ES6。&lt;/p&gt;
&lt;p&gt;你可能会疑惑：我们已经有其它打包工具（如 Browserify 和 RequireJS）完成相应工作并做得相当好了，为什么还需要 Webpack。没错，Webpack 提供了一些有用的功能，如“代码分割（code splitting）”——一种将代码库分割为“块（chunks）”的方式，从而能实现按需加载。 &lt;/p&gt;
&lt;p&gt;例如，如果 web 应用的某段代码块在某种环境下才被用到时，却直接将整个代码库放进一个庞大的打包文件，显然不那么高效。因此，你可使用“代码分割”，将其提取出来成为“打包块（bundled chunks）”，然后按需加载。对于大多数用户只需应用程序的核心部分这种情况，就避免了前期负荷过重的问题。&lt;/p&gt;
&lt;p&gt;代码分割只是 Webpack 提供的众多引人注目的功能之一，网上有很多关于 “Webpack 与 Browserify 谁更好”的激烈讨论。下面列出了一些围绕该问题的、能理清思路的讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/substack/68f8d502be42d5cd4942&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/substack/68f8d502be42d5cd4942&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/browserify-vs-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mattdesl.svbtle.com/browserify-vs-webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.namangoel.com/browserify-vs-webpack-js-drama&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.namangoel.com/browserify-vs-webpack-js-drama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ES6-模块&quot;&gt;&lt;a href=&quot;#ES6-模块&quot; class=&quot;headerlink&quot; title=&quot;ES6 模块&quot;&gt;&lt;/a&gt;ES6 模块&lt;/h2&gt;&lt;p&gt;跟得上吧？很好！因为接下来要讲 ES6 模块，某种意义上它在未来能削弱对打包工具的需求。（你马上会明白我的意思。）首先，让我们知道 ES6 模块如何被加载。&lt;/p&gt;
&lt;p&gt;当前的 JS 模块规范（CommonJS、AMD）与 ES6 模块之间最重要的区别是：设计 ES6 模块时考虑到了静态分析。其意思是：当你导入模块时，该导入在编译时（换言之，在脚本开始执行前。）已执行。这允许我们在运行程序前移除那些不被其它模块使用的导出模块（exports）。移除不被使用的模块能节省空间，且有效地减少浏览器的压力。&lt;/p&gt;
&lt;p&gt;一个常被提起的问题是：使用 UglifyJS 之类的工具压缩代码后（即消除冗余代码 dead code elimination）会有何不同？答案是：“视情况而定”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（注意：消除冗余代码是一个优化步骤，它能移除无用的代码和变量——即移除打包程序不需要执行的冗余代码）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时 UglifyJS 与 ES6 模块的消除冗余代码的工作完全相同，有时则不是。如果你想了解相关知识，可看看 &lt;a href=&quot;https://github.com/rollup/rollup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rollup’s wiki&lt;/a&gt; 的案例。&lt;/p&gt;
&lt;p&gt;导致 ES6 模块不同的原因是它以不同方式去完成消除冗余代码的效果，我们称该方式为“tree shaking”。Tree shaking 本质与消除冗余代码相反。它仅包含打包文件需要运行的代码，而不是排除打包文件不需要的代码。让我们看看 tree shaking 的一个案例：&lt;/p&gt;
&lt;p&gt;假设有一个带有多个函数的 utils.js 文件，每个函数都用 ES6 的语法导出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export function each(collection, iterator) {
  if (Array.isArray(collection)) {
    for (var i = 0; i &amp;lt; collection.length; i++) {
      iterator(collection[i], i, collection);
    }
  } else {
    for (var key in collection) {
      iterator(collection[key], key, collection);
    }
  }
 }

export function filter(collection, test) {
  var filtered = [];
  each(collection, function(item) {
    if (test(item)) {
      filtered.push(item);
    }
  });
  return filtered;
}

export function map(collection, iterator) {
  var mapped = [];
  each(collection, function(value, key, collection) {
    mapped.push(iterator(value));
  });
  return mapped;
}

export function reduce(collection, iterator, accumulator) {
    var startingValueMissing = accumulator === undefined;

    each(collection, function(item) {
      if(startingValueMissing) {
        accumulator = item;
        startingValueMissing = false;
      } else {
        accumulator = iterator(accumulator, item);
      }
    });

    return accumulator;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着，假设我们不知道程序需要 utils.js 里的哪些函数，所以直接将上述模块内的所有函数导入到 main.js，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import * as Utils from ‘./utils.js’;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终我们只用到了 each 函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import * as Utils from ‘./utils.js’;

Utils.each([1, 2, 3], function(x) { console.log(x) });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“tree shaken” 版本的 main.js 看起来如下（一旦模块被加载后）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function each(collection, iterator) {
  if (Array.isArray(collection)) {
    for (var i = 0; i &amp;lt; collection.length; i++) {
      iterator(collection[i], i, collection);
    }
  } else {
    for (var key in collection) {
      iterator(collection[key], key, collection);
    }
  }
 };

each([1, 2, 3], function(x) { console.log(x) });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：只导出我们使用的 &lt;code&gt;each&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;或者我们决定使用 filter 函数，而不是 each 函数，则最终看到的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import * as Utils from ‘./utils.js’;

Utils.filter([1, 2, 3], function(x) { return x === 2 });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tree shaken 版本如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function each(collection, iterator) {
  if (Array.isArray(collection)) {
    for (var i = 0; i &amp;lt; collection.length; i++) {
      iterator(collection[i], i, collection);
    }
  } else {
    for (var key in collection) {
      iterator(collection[key], key, collection);
    }
  }
 };

function filter(collection, test) {
  var filtered = [];
  each(collection, function(item) {
    if (test(item)) {
      filtered.push(item);
    }
  });
  return filtered;
};

filter([1, 2, 3], function(x) { return x === 2 });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此刻，&lt;code&gt;each&lt;/code&gt; 和 &lt;code&gt;filter&lt;/code&gt; 函数都被包含进来。这是因为 &lt;code&gt;filter&lt;/code&gt; 在定义时使用了 &lt;code&gt;each&lt;/code&gt;。因此也需要导出该函数模块以保证程序正常运行。&lt;/p&gt;
&lt;p&gt;很聪明，对吧？&lt;/p&gt;
&lt;p&gt;我要向你发起挑战，在 Rollup.js 的 &lt;a href=&quot;http://rollupjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线上案例与编辑器&lt;/a&gt; 中探索 tree shaking 吧。&lt;/p&gt;
&lt;h2 id=&quot;构建-ES6-模块&quot;&gt;&lt;a href=&quot;#构建-ES6-模块&quot; class=&quot;headerlink&quot; title=&quot;构建 ES6 模块&quot;&gt;&lt;/a&gt;构建 ES6 模块&lt;/h2&gt;&lt;p&gt;现在我们知道加载 ES6 模块与其它模块规范是不同的，但我们还没讲使用 ES6 模块时的构建步骤。&lt;/p&gt;
&lt;p&gt;不幸的是，由于浏览器到现在仍不支持加载原生 ES6 模块，如果现在要使用 ES6 模块则需要其它额外的工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*lpAgpggDLcK1a3MBEbmODg.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面有两个实现构建/转化 ES6 模块（以至浏览器能执行）的方法，第一个是现在最常用的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用转译器（如 Babel 或 Traceur）以 CommonJS、AMD 或 UMD 其中一种规范将 ES6 代码转译为 ES5 代码。然后通过模块打包工具（如 Browserify 或 Webpack）将转译后的代码打包成一个或多个文件。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;http://rollupjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rollup.js&lt;/a&gt;，这与前一个方式很相似，不同的是 Rollup 拥有 ES6 模块的静态分析代码（ES6 代码）与依赖的能力。它利用 “tree shaking” 让打包文件拥有最精简的代码。总言之，对于 ES6 模块，使用 Rollup.js （相较于 Browserify 或 Webpack）的最大好处是 tree shaking 能让打包文件更小。需要提醒你的是：Rollup 提供了几种打包代码的规范，包括 ES6、CommonJS、AMD、UMD 和 IIFE（立即调用函数表达式）。IIFE 和 UMD 的打包能直接在浏览器运行，但如果你选择打包 AMD、CommonJS 或 ES6 模块时，需要寻找能将代码转成浏览器能理解运行的代码的方法（例如，使用 Broserify、Webpack、RequireJS 等）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;跨越障碍&quot;&gt;&lt;a href=&quot;#跨越障碍&quot; class=&quot;headerlink&quot; title=&quot;跨越障碍&quot;&gt;&lt;/a&gt;跨越障碍&lt;/h2&gt;&lt;p&gt;作为 Web 开发者，我们不得不跨越很多障碍。例如，将优美的 ES6 模块转为浏览器能识别的代码并不总是一帆风顺。&lt;/p&gt;
&lt;p&gt;问题是，ES6 模块什么时候才能脱离上述的代码构建开销呢？&lt;/p&gt;
&lt;p&gt;答案是：“尽快”。&lt;/p&gt;
&lt;p&gt;ECMAScript 目前有一个解决方案叫 &lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6 module loader API&lt;/a&gt;。简言之，这是一个纲领性的、基于 Promise 的 API，它支持动态加载模块并缓存模块，以便后续的导入不需要重新加载模块。&lt;/p&gt;
&lt;p&gt;它看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;myModule.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export class myModule {
  constructor() {
    console.log(&amp;apos;Hello, I am a module&amp;apos;);
  }

  hello() {
    console.log(&amp;apos;hello!&amp;apos;);
  }

  goodbye() {
    console.log(&amp;apos;goodbye!&amp;apos;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.import(‘myModule’).then(function(myModule) {
  new myModule.hello();
});

// ‘hello!’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你亦可直接对 script 标签指定 “type=module” 来定义模块，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;
  // loads the &amp;apos;myModule&amp;apos; export from &amp;apos;mymodule.js&amp;apos;
  import { hello } from &amp;apos;mymodule&amp;apos;;

  new Hello(); // &amp;apos;Hello, I am a module!&amp;apos;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你还没看过 the module API polyfill 的 repo，我强烈建议你 &lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看看&lt;/a&gt;。 &lt;/p&gt;
&lt;p&gt;此外，如果你想试试该方法，那就看看 &lt;a href=&quot;https://github.com/systemjs/systemjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SystemJS&lt;/a&gt;，它构建于 &lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Module Loader polyfill&lt;/a&gt; 之上。SystemJS 能在浏览器和 Node 上动态加载任何模块规范（ES6 模块、AMD、CommonJS、全局脚本）。它在一个 “模块注册器（module registry）”上保存了所有已加载模块的路径，从而避免重新加载先前已加载的模块。更不用说它能自动转译 ES6 模块（只需简单配置）和拥有从任何类型模块中加载任何类型模块的能力了。&lt;/p&gt;
&lt;h2 id=&quot;有了原生的-ES6-模块后，还需要模块打包吗？&quot;&gt;&lt;a href=&quot;#有了原生的-ES6-模块后，还需要模块打包吗？&quot; class=&quot;headerlink&quot; title=&quot;有了原生的 ES6 模块后，还需要模块打包吗？&quot;&gt;&lt;/a&gt;有了原生的 ES6 模块后，还需要模块打包吗？&lt;/h2&gt;&lt;p&gt;对于日益普及的 ES6 模块，下面有一些有趣的观点：&lt;/p&gt;
&lt;h3 id=&quot;HTTP-2-会淘汰模块打包吗？&quot;&gt;&lt;a href=&quot;#HTTP-2-会淘汰模块打包吗？&quot; class=&quot;headerlink&quot; title=&quot;HTTP/2 会淘汰模块打包吗？&quot;&gt;&lt;/a&gt;HTTP/2 会淘汰模块打包吗？&lt;/h3&gt;&lt;p&gt;HTTP/1 只允许每个 TCP 连接带一个请求。这就是加载多个资源时需要多个请求的原因。而 HTTP/2 是完全多路复用的，这意味着多个请求和响应可并行执行。因此，我们可用单独一个链接同时处理多个请求。&lt;/p&gt;
&lt;p&gt;由于每个 HTTP 请求（HTTP/2）的成本远低于 HTTP/1，从长远来说，加载多个模块不再是一个严重的性能问题。一些人认为模块打包不再需要了。这当然是有可能的，但这要具体情况具体分析了。&lt;/p&gt;
&lt;p&gt;举个例说，HTTP/2 不享有模块打包提供的优势，例如移除未被使用的导出模块以节省空间。如果一个网站的每一丁点性能都至关重要，那么长远来看，打包能带来增量效益。当然，如果你对性能需求不那么极端，你可能会通过跳过该构建步骤（打包文件），以最小的成本节省时间。&lt;/p&gt;
&lt;p&gt;总的来说，要让大多数网站使用 HTTP/2 协议仍有很长的路要走。我预测构建处理至少在短期内仍会保留。&lt;/p&gt;
&lt;p&gt;PS：如果你对 HTTP/2 与 HTTP/1.x 的差异感兴趣，可看看这份 &lt;a href=&quot;https://http2.github.io/faq/#what-are-the-key-differences-to-http1x&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优秀的资源&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;CommonJS、AMD-与-UMD-会被淘汰吗？&quot;&gt;&lt;a href=&quot;#CommonJS、AMD-与-UMD-会被淘汰吗？&quot; class=&quot;headerlink&quot; title=&quot;CommonJS、AMD 与 UMD 会被淘汰吗？&quot;&gt;&lt;/a&gt;CommonJS、AMD 与 UMD 会被淘汰吗？&lt;/h3&gt;&lt;p&gt;一旦 ES6 成为模块标准，我们还需要其它非原生的模块规范吗？&lt;/p&gt;
&lt;p&gt;我持怀疑态度。&lt;/p&gt;
&lt;p&gt;若 Web 开发遵守一个标准方法进行导入和导出模块，将获益匪浅，而且省去了中间步骤（译者注：一些构建处理）。但 ES6 成为模块规范需要多长时间呢？&lt;/p&gt;
&lt;p&gt;机会是有，但得等一段时间 ;)&lt;/p&gt;
&lt;p&gt;再者，众口难调，所以“一个标准的方法”可能永远不会成为现实。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我希望文章的两章节能让你理清一些开发者口中的模块和模块打包的相关概念。如果发现上文有令你困惑的地方，可看看 &lt;a href=&quot;https://github.com/JChehe/blog/blob/master/translation/JavaScript%20%E6%A8%A1%E5%9D%97%E3%80%90Part%201%E3%80%91%EF%BC%9A%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;part I&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一如既往，可以在评论区和我尽情交流或回答问题！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://web.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt; - &lt;a href=&quot;http://www.jobbole.com/members/q574805242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超-J.c&lt;/a&gt; 翻译，等待校稿。未经许可，禁止转载！&lt;/p&gt;
&lt;p&gt;英文出处：&lt;a href=&quot;https://medium.com/@preethikasireddy/javascript-modules-part-2-module-bundling-5020383cf306&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules Part 2: Module Bundling&lt;/a&gt;。欢迎加入翻译组。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*e0eQH_9X8jN7yC6AEqlvdQ.jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;在文章的 &lt;a href=&quot;https://github.com/JChehe/blog/blob/master/translation/JavaScript%20%E6%A8%A1%E5%9D%97%E3%80%90Part%201%E3%80%91%EF%BC%9A%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97.md&quot;&gt;Part 1&lt;/a&gt;，我讲解了模块是什么、为何要使用模块和为程序整合为模块的各种方式。而在 Part 2，我将会详细讲解模块“打包”：为什么要打包模块，以不同的方式进行打包和模块在 web 开发上的未来。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="module" scheme="http://yoursite.com/tags/module/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模块【Part 1】：初学者指南</title>
    <link href="http://yoursite.com/2016/02/29/2016-2-29-javascript-modules-a-beginner-guide/"/>
    <id>http://yoursite.com/2016/02/29/2016-2-29-javascript-modules-a-beginner-guide/</id>
    <published>2016-02-29T03:31:16.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/e36f4ad51fef734fae6cdf155b053239.jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你刚接触 JavaScript，想必已经被“module bundlers vs. module loaders”、“Webpack vs. Browserify”和“AMD vs. CommonJS” 等诸如此类的行业术语所吓到。&lt;/p&gt;
&lt;p&gt;JavaScript 模块系统听起来挺吓人的，但明白它是每个 Web 开发者所必备的要求。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在这篇文章中，我将抛开这些行业术语，用通俗易懂的语言（和一些代码案例）向你解释清楚。希望你能从中收益！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：为了让文章更易理解，我分为两部分进行讲述：第一部分会深入解释「模块是什么」和「为什么要使用它们」。第二部分（下周发布）讲述「模块打包意味着什么」和「用不同方式实现模块打包」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Part-1-你能再次解释模块是什么吗？&quot;&gt;&lt;a href=&quot;#Part-1-你能再次解释模块是什么吗？&quot; class=&quot;headerlink&quot; title=&quot;Part 1: 你能再次解释模块是什么吗？&quot;&gt;&lt;/a&gt;Part 1: 你能再次解释模块是什么吗？&lt;/h2&gt;&lt;p&gt;优秀的作者会将他的书分为章和节。同理，优秀的程序员能将他的程序划分为各个模块。&lt;/p&gt;
&lt;p&gt;就像书的章节，模块就是词（或代码，视情况而定）的集群。&lt;/p&gt;
&lt;p&gt;好的模块拥有以下特点：不同功能是高度独立的，并且它们允许被打乱、移除或在必要时进行补充，而不会扰乱系统作为一个整体。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用模块？&quot;&gt;&lt;a href=&quot;#为什么使用模块？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用模块？&quot;&gt;&lt;/a&gt;为什么使用模块？&lt;/h2&gt;&lt;p&gt;使用模块有诸多好处，如利于建立一个扩展性强的、互相依赖的代码库。而在我看来，其最重要是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）可维护性：&lt;/strong&gt;根据定义，模块是独立的。一个设计良好的模块意在尽可能减少依赖代码库的某部分，因此它才能单独地扩展与完善。更新一个从其它代码段解耦出来的独立模块显然来得更简单。&lt;/p&gt;
&lt;p&gt;回到书的案例，如果书的某个章节需要进行小改动，而该改动会牵涉到其它所有章节，这无疑是个梦魇。相反，如果每章节都以某种良好方式进行编写，那么改动某章节，则不会影响其它章节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）命名空间：&lt;/strong&gt;在 JavaScript 中，如果变量声明在顶级函数的作用域外，那么这些变量都是全局的（意味着，任何地方都能读写它）。因此，造成了常见的“命名空间污染”，从而导致完全无关的代码却共享着全局变量。&lt;/p&gt;
&lt;p&gt;无关代码间共享着全局变量是一个严重的 &lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编程禁忌&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们将在本文后面看到，模块通过为变量创建一个私有空间，从而避免了命名空间的污染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）可重用性：&lt;/strong&gt;坦诚地讲：我们都试过复制旧项目的代码到新项目上。例如，我们复制以前项目的某些功能方法到当前项目中。&lt;/p&gt;
&lt;p&gt;该做法看似可行，但如果发现那段代码有更好的实现方式（即需要改动），那么你就不得不去追溯并更新任何你所粘贴到的任何地方。&lt;/p&gt;
&lt;p&gt;这无疑会浪费大量的时间。因此可重用的模块显然让你编码轻松。&lt;/p&gt;
&lt;h2 id=&quot;如何整合为模块？&quot;&gt;&lt;a href=&quot;#如何整合为模块？&quot; class=&quot;headerlink&quot; title=&quot;如何整合为模块？&quot;&gt;&lt;/a&gt;如何整合为模块？&lt;/h2&gt;&lt;p&gt;整合为模块的方式有很多。下面就看看其中一些方法：&lt;/p&gt;
&lt;h3 id=&quot;模块模式（Module-pattern）&quot;&gt;&lt;a href=&quot;#模块模式（Module-pattern）&quot; class=&quot;headerlink&quot; title=&quot;模块模式（Module pattern）&quot;&gt;&lt;/a&gt;模块模式（Module pattern）&lt;/h3&gt;&lt;p&gt;模块模式用于模仿类（由于 JavaScript 并不支持原生的类），以致我们能在单个对象中存储公有和私有变量与方法——类似于其它编程语言（如 Java 或 Python ）中的类的用法。模块模式不仅允许我们创建公用接口 API（如果我们需要暴露方法时），而且也能在闭包作用域中封装私有变量和方法。&lt;/p&gt;
&lt;p&gt;下面有几种方式能实现模块模式（module pattern）。第一个案例中，我将会使用匿名闭包。只需将所有代码放进匿名函数中，就能帮助我们实现目标（记住：在 JavaScript 中，函数是唯一创建新作用域的方式）。&lt;/p&gt;
&lt;h4 id=&quot;Example-1：匿名闭包（Anonymous-closure）&quot;&gt;&lt;a href=&quot;#Example-1：匿名闭包（Anonymous-closure）&quot; class=&quot;headerlink&quot; title=&quot;Example 1：匿名闭包（Anonymous closure）&quot;&gt;&lt;/a&gt;Example 1：匿名闭包（Anonymous closure）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;(function () {
  // We keep these variables private inside this closure scope
  // 让这些变量在闭包作用域内变为私有（外界访问不到这些变量）。
  var myGrades = [93, 95, 88, 0, 55, 91];

  var average = function() {
    var total = myGrades.reduce(function(accumulator, item) {
      return accumulator + item}, 0);

      return &amp;apos;Your average grade is &amp;apos; + total / myGrades.length + &amp;apos;.&amp;apos;;
  }

  var failing = function(){
    var failingGrades = myGrades.filter(function(item) {
      return item &amp;lt; 70;});

    return &amp;apos;You failed &amp;apos; + failingGrades.length + &amp;apos; times.&amp;apos;;
  }

  console.log(failing());

}());

// ‘You failed 2 times.’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这种结构，匿名函数拥有自身的求值环境或”闭包“，并立即执行它。这就实现了对上级（全局）命名空间的隐藏。&lt;/p&gt;
&lt;p&gt;这种方法的好处是：能在函数内使用本地变量，而不会意外地重写已存在的全局变量。当然，你也能获取全局变量，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var global = &amp;apos;Hello, I am a global variable :)&amp;apos;;

(function () {
  // We keep these variables private inside this closure scope

  var myGrades = [93, 95, 88, 0, 55, 91];

  var average = function() {
    var total = myGrades.reduce(function(accumulator, item) {
      return accumulator + item}, 0);

    return &amp;apos;Your average grade is &amp;apos; + total / myGrades.length + &amp;apos;.&amp;apos;;
  }

  var failing = function(){
    var failingGrades = myGrades.filter(function(item) {
      return item &amp;lt; 70;});

    return &amp;apos;You failed &amp;apos; + failingGrades.length + &amp;apos; times.&amp;apos;;
  }

  console.log(failing());
  console.log(global);
}());

// &amp;apos;You failed 2 times.&amp;apos;
// &amp;apos;Hello, I am a global variable :)&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意的是，包围着匿名函数的小括号是必须的，这是因为当语句以关键字 function 开头时，它会被认为是一个函数声明语句（记住，JavaScript 中不能拥有未命名的函数声明语句）。因此，该括号会创建一个函数表达式代替它。欲知详情，可点击 &lt;a href=&quot;http://stackoverflow.com/questions/1634268/explain-javascripts-encapsulated-anonymous-function-syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Example-2：全局导入（Global-import-）&quot;&gt;&lt;a href=&quot;#Example-2：全局导入（Global-import-）&quot; class=&quot;headerlink&quot; title=&quot;Example 2：全局导入（Global import ）&quot;&gt;&lt;/a&gt;Example 2：全局导入（Global import ）&lt;/h4&gt;&lt;p&gt;另一个常见的方式是类似于 &lt;a href=&quot;https://github.com/jquery/jquery/tree/master/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt; 的全局导入（global import）。该方式与上述的匿名闭包相似，特别之处是传入了一个全局变量作为参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function (globalVariable) {

  // Keep this variables private inside this closure scope
  var privateFunction = function() {
    console.log(&amp;apos;Shhhh, this is private!&amp;apos;);
  }

  // Expose the below methods via the globalVariable interface while
  // hiding the implementation of the method within the 
  // function() block
  // 通过 globalVariable 接口暴露下面的方法。当然，这些方法的实现则隐藏在 function() 块内

  globalVariable.each = function(collection, iterator) {
    if (Array.isArray(collection)) {
      for (var i = 0; i &amp;lt; collection.length; i++) {
        iterator(collection[i], i, collection);
      }
    } else {
      for (var key in collection) {
        iterator(collection[key], key, collection);
      }
    }
  };

  globalVariable.filter = function(collection, test) {
    var filtered = [];
    globalVariable.each(collection, function(item) {
      if (test(item)) {
        filtered.push(item);
      }
    });
    return filtered;
  };

  globalVariable.map = function(collection, iterator) {
    var mapped = [];
    globalUtils.each(collection, function(value, key, collection) {
      mapped.push(iterator(value));
    });
    return mapped;
  };

  globalVariable.reduce = function(collection, iterator, accumulator) {
    var startingValueMissing = accumulator === undefined;

    globalVariable.each(collection, function(item) {
      if(startingValueMissing) {
        accumulator = item;
        startingValueMissing = false;
      } else {
        accumulator = iterator(accumulator, item);
      }
    });

    return accumulator;

  };

 }(globalVariable));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在该案例中，&lt;code&gt;globalVariable&lt;/code&gt; 是唯一的全局变量。这个相对于匿名闭包的优势是：提前声明了全局变量，能让别人更清晰地阅读你的代码。&lt;/p&gt;
&lt;h4 id=&quot;Example-3：对象接口（Object-interface）&quot;&gt;&lt;a href=&quot;#Example-3：对象接口（Object-interface）&quot; class=&quot;headerlink&quot; title=&quot;Example 3：对象接口（Object interface）&quot;&gt;&lt;/a&gt;Example 3：对象接口（Object interface）&lt;/h4&gt;&lt;p&gt;使用一个独立的对象接口创建模块，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myGradesCalculate = (function () {

  // Keep this variable private inside this closure scope
  var myGrades = [93, 95, 88, 0, 55, 91];

  // Expose these functions via an interface while hiding
  // the implementation of the module within the function() block

  return {
    average: function() {
      var total = myGrades.reduce(function(accumulator, item) {
        return accumulator + item;
        }, 0);

      return&amp;apos;Your average grade is &amp;apos; + total / myGrades.length + &amp;apos;.&amp;apos;;
    },

    failing: function() {
      var failingGrades = myGrades.filter(function(item) {
          return item &amp;lt; 70;
        });

      return &amp;apos;You failed &amp;apos; + failingGrades.length + &amp;apos; times.&amp;apos;;
    }
  }
})();

myGradesCalculate.failing(); // &amp;apos;You failed 2 times.&amp;apos; 
myGradesCalculate.average(); // &amp;apos;Your average grade is 70.33333333333333.&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如你所看到的，该方式让你决定哪个变量/方法是私有的（如 &lt;code&gt;myGrades&lt;/code&gt;），哪个变量/方法是需要暴露出来的（通过将需要暴露出来的变量/方法放在 return 语句中，如 &lt;code&gt;average&lt;/code&gt; &amp;amp; &lt;code&gt;failing&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&quot;Example-4-暴露模块模式（Revealing-module-pattern）&quot;&gt;&lt;a href=&quot;#Example-4-暴露模块模式（Revealing-module-pattern）&quot; class=&quot;headerlink&quot; title=&quot;Example 4: 暴露模块模式（Revealing module pattern）&quot;&gt;&lt;/a&gt;Example 4: 暴露模块模式（Revealing module pattern）&lt;/h4&gt;&lt;p&gt;这与上一个方法非常类似，只不过该方法确保所有变量和方法都是私有的，除非显式暴露它们：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myGradesCalculate = (function () {

  // Keep this variable private inside this closure scope
  var myGrades = [93, 95, 88, 0, 55, 91];

  var average = function() {
    var total = myGrades.reduce(function(accumulator, item) {
      return accumulator + item;
      }, 0);

    return&amp;apos;Your average grade is &amp;apos; + total / myGrades.length + &amp;apos;.&amp;apos;;
  };

  var failing = function() {
    var failingGrades = myGrades.filter(function(item) {
        return item &amp;lt; 70;
      });

    return &amp;apos;You failed &amp;apos; + failingGrades.length + &amp;apos; times.&amp;apos;;
  };

  // Explicitly reveal public pointers to the private functions 
  // that we want to reveal publicly

  return {
    average: average,
    failing: failing
  }
})();

myGradesCalculate.failing(); // &amp;apos;You failed 2 times.&amp;apos; 
myGradesCalculate.average(); // &amp;apos;Your average grade is 70.33333333333333.&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看似有许多知识需要我们吸收，但这只是模块模式（module patterns）的冰山一角。在我学习这方面知识时，发现了下面这些有用的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning JavaScript Design Patterns&lt;/a&gt;： 出自 Addy Osmani，他以极其简洁的方式对模块模式进行详细分析。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adequately Good by Ben Cherry&lt;/a&gt;：一篇通过案例对模块模式的高级用法进行概述的文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://carldanley.com/js-module-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blog of Carl Danley&lt;/a&gt;：一篇对模块模式进行概述并拥有其它 JavaScript 模式资源的文章。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CommonJS-and-AMD&quot;&gt;&lt;a href=&quot;#CommonJS-and-AMD&quot; class=&quot;headerlink&quot; title=&quot;CommonJS and AMD&quot;&gt;&lt;/a&gt;CommonJS and AMD&lt;/h3&gt;&lt;p&gt;上述所有方法都有一个共同点：使用一个全局变量将其代码封装在一个函数中，从而利用闭包作用域为自身创建一个私有的命名空间。&lt;/p&gt;
&lt;p&gt;虽每种方式都有效，但他们也有消极的一面。&lt;/p&gt;
&lt;p&gt;举个例子说，作为一名开发者，需要以正确的依赖顺序去加载你的文件。更直接地说，假如你在项目中使用 Backbone，那么你需要在文件中用 script 标签引入 Backbone 的源代码。&lt;/p&gt;
&lt;p&gt;然而，由于 Backbone 重度依赖于 Underscore.js，因此 Backbone 的 script 标签不能放在 Underscore 的 script 标签前。&lt;/p&gt;
&lt;p&gt;作为一名开发者，有时会为了正确处理并管理好依赖而感到头痛。&lt;/p&gt;
&lt;p&gt;另一个消极面是：他们仍会导致命名空间污染。例如，两个模块拥有同样的名字，或者一个模块拥有两个版本，而且你同时需要他们俩。&lt;/p&gt;
&lt;p&gt;所以，你可能会想到：我们能不能设计一种方法，无须通过全局作用域去请求一个模块接口呢？&lt;/p&gt;
&lt;p&gt;答案是能！&lt;/p&gt;
&lt;p&gt;有两种流行且实现良好的方法：CommonJS 和 AMD。&lt;/p&gt;
&lt;h4 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h4&gt;&lt;p&gt;CommonJS 是一个志愿工作组设计并实现的 JavaScript 声明模块 APIs&lt;/p&gt;
&lt;p&gt;CommonJS 模块本质上是一片可重用的 JavaScript 代码段，将其以特定对象导出后，其它模块即可引用它。如果你接触过 Node.js，那么你应该非常熟悉这种格式。&lt;/p&gt;
&lt;p&gt;通过 CommonJS，每个 JavaScript 文件保存的模块都拥有其独一无二的模块上下文（就像封装在闭包内）。在此作用域中，我们使用 &lt;code&gt;module.exports&lt;/code&gt; 对象导出模块，然后通过 require 导入它们。&lt;/p&gt;
&lt;p&gt;当你定义一个 CommonJS 模块时，代码类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function myModule() {
  this.hello = function() {
    return &amp;apos;hello!&amp;apos;;
  }

  this.goodbye = function() {
    return &amp;apos;goodbye!&amp;apos;;
  }
}

module.exports = myModule;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用特定对象模块，并将 module.exports 指向我们的函数。这让 CommonJS 模块系统知道我们想导出什么，并让其它文件能访问到它。&lt;/p&gt;
&lt;p&gt;然后，当有人想使用 &lt;code&gt;myModule&lt;/code&gt; 时，他们可在文件内将其 &lt;code&gt;require&lt;/code&gt; 进来，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myModule = require(&amp;apos;myModule&amp;apos;);

var myModuleInstance = new myModule();
myModuleInstance.hello(); // &amp;apos;hello!&amp;apos;
myModuleInstance.goodbye(); // &amp;apos;goodbye!&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该方法相对于我们先前讨论的模块模式有两个显而易见的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免了全局命名空间的污染&lt;/li&gt;
&lt;li&gt;让依赖关系更明确&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，该语法非常紧凑简单，我个人非常喜欢。&lt;/p&gt;
&lt;p&gt;另外需要注意的一点是：CommonJS 采用服务器优先的方式，并采用同步的方式加载模块。这点很重要，因为如果我们有其它三个模块需要 &lt;code&gt;require&lt;/code&gt; 进来的话，这些模块会被一个接一个地加载。&lt;/p&gt;
&lt;p&gt;这种工作方式很适合应用在服务器上。但不幸的是，当你将这种方式应用在浏览器端时，就会出现问题。因为相对于硬盘，从 web 上读取模块&lt;strong&gt;更耗时&lt;/strong&gt;（网络传输等因素）。而且，只要模块正在加载，就会阻塞浏览器运行其它任务。这是由于 JavaScript 线程会在代码加载完成前被停止。（在 Part 2 的模块打包部分，我会告诉你如何解决此问题。而现在，只需了解到这）。&lt;/p&gt;
&lt;h4 id=&quot;AMD&quot;&gt;&lt;a href=&quot;#AMD&quot; class=&quot;headerlink&quot; title=&quot;AMD&quot;&gt;&lt;/a&gt;AMD&lt;/h4&gt;&lt;p&gt;CommonJS 是不错，但如果我们想异步加载模块呢？答案是异步模块定义（Asynchronous Module Definition），或简称 AMD。&lt;/p&gt;
&lt;p&gt;使用 AMD 加载模块的代码类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define([&amp;apos;myModule&amp;apos;, &amp;apos;myOtherModule&amp;apos;], function(myModule, myOtherModule) {
  console.log(myModule.hello());
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;define&lt;/code&gt; 函数的第一个参数是一个包含本模块所依赖的模块数组。这些依赖都在后台加载（以不阻塞的方式）。加载完成后，&lt;code&gt;define&lt;/code&gt; 会调用其指定的回调函数。&lt;/p&gt;
&lt;p&gt;接着，回调函数会将加载完成后的依赖作为其参数（一一对应）——在该案例中，是 &lt;code&gt;myModule&lt;/code&gt; 和 &lt;code&gt;myOtherModule&lt;/code&gt;。因此，回调函数就能使用这些依赖。当然，这些依赖本身也需要通过 &lt;code&gt;define&lt;/code&gt; 关键字定义。&lt;br&gt;例如，&lt;code&gt;myModule&lt;/code&gt; 类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define([], function() {

  return {
    hello: function() {
      console.log(&amp;apos;hello&amp;apos;);
    },
    goodbye: function() {
      console.log(&amp;apos;goodbye&amp;apos;);
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不像 CommonJS，AMD 采取浏览器优先的方式，通过异步加载的方式完成任务。（注意，有很多人并不赞成此方式，因为他们坚信在代码开始运行时动态且逐个地加载文件是不好的。我将会在下一节的模块构建（module-building）中探讨更多相关信息）。&lt;/p&gt;
&lt;p&gt;除了异步外，AMD 的另一个好处是：模块可以是一个对象、函数、构造函数、字符串、JSON 或其它各种类型，而 CommonJS 仅支持对象作为模块。&lt;/p&gt;
&lt;p&gt;话虽如此，AMD 不兼容 io、文件系统（filesystem）和其它通过 CommonJS 实现的面向服务器的功能，而且其通过函数封装的语法与简单的 require 语句相比显得有点啰嗦。&lt;/p&gt;
&lt;h4 id=&quot;UMD&quot;&gt;&lt;a href=&quot;#UMD&quot; class=&quot;headerlink&quot; title=&quot;UMD&quot;&gt;&lt;/a&gt;UMD&lt;/h4&gt;&lt;p&gt;对于需要同时支持 AMD 和 CommonJS 特性的项目，你可选择另一种规范：通用的模块定义（Universal Module Defintion，简称 UMD）。&lt;/p&gt;
&lt;p&gt;UMD 在本质上创建了一种使用二者其一的方式，同时也支持定义全局变量。因此，UMD 模块适用于客户端和服务器端。&lt;/p&gt;
&lt;p&gt;下面快速浏览 UMD 是如何处理其业务的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function (root, factory) {
  if (typeof define === &amp;apos;function&amp;apos; &amp;amp;&amp;amp; define.amd) {
      // AMD
    define([&amp;apos;myModule&amp;apos;, &amp;apos;myOtherModule&amp;apos;], factory);
  } else if (typeof exports === &amp;apos;object&amp;apos;) {
      // CommonJS
    module.exports = factory(require(&amp;apos;myModule&amp;apos;), require(&amp;apos;myOtherModule&amp;apos;));
  } else {
    // Browser globals (Note: root is window)
    root.returnExports = factory(root.myModule, root.myOtherModule);
  }
}(this, function (myModule, myOtherModule) {
  // Methods
  function notHelloOrGoodbye(){}; // A private method
  function hello(){}; // A public method because it&amp;apos;s returned (see below)
  function goodbye(){}; // A public method because it&amp;apos;s returned (see below)

  // Exposed public methods
  return {
      hello: hello,
      goodbye: goodbye
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;想获取更多关于 UMD 的案例，可看看 Github 上的 &lt;a href=&quot;https://github.com/umdjs/umd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enlightening repo&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;原生-JS（Native-JS）&quot;&gt;&lt;a href=&quot;#原生-JS（Native-JS）&quot; class=&quot;headerlink&quot; title=&quot;原生 JS（Native JS）&quot;&gt;&lt;/a&gt;原生 JS（Native JS）&lt;/h3&gt;&lt;p&gt;哊！我没把你绕晕了吧？好吧，下面还有&lt;strong&gt;另一种&lt;/strong&gt;定义模块的方式。&lt;/p&gt;
&lt;p&gt;可能你已注意到：上述的模块都不是原生 JavaScript 模块。它们只不过是我们用模块模式（module pattern）、CommonJS 或 AMD &lt;strong&gt;模仿&lt;/strong&gt;的模块系统。&lt;/p&gt;
&lt;p&gt;幸运的是，机智的标准制定者在 TC39（该标准定义了 ECMAScript 的语法与语义）已经为 ECMAScript 6（ES6）引入内置的模块系统了。&lt;/p&gt;
&lt;p&gt;ES6 为导入（importing）导出（exporting）模块带来了很多可能性。下面是很好的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsmodules.io/cjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsmodules.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exploringjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对于 CommonJS 或 AMD，ES6 模块如何设法提供两全其美的实现方案：简洁紧凑的声明式语法和异步加载，另外能更好地支持循环依赖。&lt;/p&gt;
&lt;p&gt;我最喜欢 ES6 模块的特性应该是导入的都是&lt;strong&gt;动态&lt;/strong&gt;且只读的导出视图（CommonJS 导入的都是导出的副本，因此不是动态的）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上一句的原文是：Probably my favorite feature of ES6 modules is that imports&lt;br&gt;are live read-only views of the exports. (Compare this to CommonJS,&lt;br&gt;where imports are copies of exports and consequently not alive).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面这个例子展示了它（CommonJS）如何运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// lib/counter.js

var counter = 1;

function increment() {
  counter++;
}

function decrement() {
  counter--;
}

module.exports = {
  counter: counter,
  increment: increment,
  decrement: decrement
};

// src/main.js

var counter = require(&amp;apos;../../lib/counter&amp;apos;);

counter.increment();
console.log(counter.counter); // 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此案例中，我们主要构造了该模块的两个副本：一个是在我们导出它时，另一个是在我们引入它时。&lt;/p&gt;
&lt;p&gt;此外，在 main.js 的副本与原来的模块是分离的。这就是为什么当我们的计数器自增时，仍返回 1 —— 因为我们导入的计数器变量（counter）与来自原本模块的计数器副本是分离的。&lt;/p&gt;
&lt;p&gt;所以，计算器的自增只会在模块内自增，并不会在复制的版本自增。要修改复制版本的计数器的唯一方式是手动自增。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;counter.counter++;
console.log(counter.counter); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于ES6，它会在导入时创建一个动态的、只读的模块视图。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// lib/counter.js
export let counter = 1;

export function increment() {
  counter++;
}

export function decrement() {
  counter--;
}

// src/main.js
import * as counter from &amp;apos;../../counter&amp;apos;;

console.log(counter.counter); // 1
counter.increment();
console.log(counter.counter); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很酷对吧？但我认为动态且只读的视图的真正引人注目的是，它允许你将模块分成更小的片段，而又不导致功能的缺失。&lt;/p&gt;
&lt;p&gt;你可以反过来再次合并他们，且不会导致任何问题。&lt;/p&gt;
&lt;h3 id=&quot;期待：模块打包（bundling-modules）&quot;&gt;&lt;a href=&quot;#期待：模块打包（bundling-modules）&quot; class=&quot;headerlink&quot; title=&quot;期待：模块打包（bundling modules）&quot;&gt;&lt;/a&gt;期待：模块打包（bundling modules）&lt;/h3&gt;&lt;p&gt;哇！时间过得真快。这是个疯狂之旅，但我真心希望本文能让你更好地了解 JavaScript 模块。&lt;/p&gt;
&lt;p&gt;在下一节，我将会讲述模块打包（module bundling）和覆盖以下核心主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么需要模块打包&lt;/li&gt;
&lt;li&gt;以不同方式进行打包&lt;/li&gt;
&lt;li&gt;ECMAScript 的模块加载 API&lt;/li&gt;
&lt;li&gt;等等 :）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：为了尽可能通俗易懂，我跳过了一些细节（如：循环依赖）。如果我漏了任何重要或有趣的知识，请在评论里告诉我！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://web.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt; - &lt;a href=&quot;http://www.jobbole.com/members/q574805242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超-J.c&lt;/a&gt; 翻译，等待校稿。未经许可，禁止转载！&lt;/p&gt;
&lt;p&gt;英文出处：&lt;a href=&quot;https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Modules: A Beginner’s Guide&lt;/a&gt;。欢迎加入翻译组。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/e36f4ad51fef734fae6cdf155b053239.jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你刚接触 JavaScript，想必已经被“module bundlers vs. module loaders”、“Webpack vs. Browserify”和“AMD vs. CommonJS” 等诸如此类的行业术语所吓到。&lt;/p&gt;
&lt;p&gt;JavaScript 模块系统听起来挺吓人的，但明白它是每个 Web 开发者所必备的要求。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="module" scheme="http://yoursite.com/tags/module/"/>
    
  </entry>
  
  <entry>
    <title>关于 Glob (gulp)的学习</title>
    <link href="http://yoursite.com/2016/02/24/2016-2-24-study-glob/"/>
    <id>http://yoursite.com/2016/02/24/2016-2-24-study-glob/</id>
    <published>2016-02-24T04:47:42.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;参考资料：&lt;a href=&quot;https://github.com/isaacs/node-glob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/isaacs/node-glob&lt;/a&gt;&lt;br&gt;下文是关于 Gulp 的 &lt;code&gt;gulp.src(globs[, options])&lt;/code&gt; 方法的第一个参数 &lt;code&gt;globs&lt;/code&gt; 的学习。&lt;br&gt;需要注意的是：&lt;br&gt;当该参数 &lt;code&gt;globs&lt;/code&gt; 为数组时，其包含的多个 glob 会&lt;strong&gt;按顺序进行解析&lt;/strong&gt;，这意味着以下意图是可以实现的：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;    // 排除所有以字母 b 开头的 js 文件，但不排除 bad.js&lt;br&gt;    gulp.src([‘&lt;em&gt;.js’, ‘!b&lt;/em&gt;.js’, ‘bad.js’])&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Glob&quot;&gt;&lt;a href=&quot;#Glob&quot; class=&quot;headerlink&quot; title=&quot;Glob&quot;&gt;&lt;/a&gt;Glob&lt;/h2&gt;&lt;p&gt;使用 shell 里的 patterns 匹配文件，如 &lt;code&gt;*&lt;/code&gt; 等。&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;h3 id=&quot;用-npm-安装-glob&quot;&gt;&lt;a href=&quot;#用-npm-安装-glob&quot; class=&quot;headerlink&quot; title=&quot;用 npm 安装 glob&quot;&gt;&lt;/a&gt;用 npm 安装 glob&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;npm i glob
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编写js代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var glob = require(&amp;quot;glob&amp;quot;);

// options 是可选参数
glob(&amp;quot;**/*.js&amp;quot;, options, function (er, files) {
  // files 参数是一个文件名数组。
  // 若参数 options 的 `nonull` 属性为 true，则在匹配不到文件时， files 参数则为 [&amp;quot;**/*.js&amp;quot;]。
  //（ 若 `nonull` 为 false 时， files 为空数组）。
  // er 是一个 error 对象或 null。
})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Glob-初级&quot;&gt;&lt;a href=&quot;#Glob-初级&quot; class=&quot;headerlink&quot; title=&quot;Glob 初级&quot;&gt;&lt;/a&gt;Glob 初级&lt;/h2&gt;&lt;p&gt;“Globs” 是你通过在命令行输入字符后完成某些操作时的 pattern。如 &lt;code&gt;ls *.js&lt;/code&gt;，或将 &lt;code&gt;build/*&lt;/code&gt; 放在 &lt;code&gt;.gitignore&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在解析路径段的 patterns 前，braced sections 会展开为一个集合。braced sections 以 &lt;code&gt;{&lt;/code&gt; 开头，&lt;code&gt;}&lt;/code&gt; 为结尾，中间部分以英文逗号 &lt;code&gt;,&lt;/code&gt; 分隔。braced sections 可以含有斜杠符号 &lt;code&gt;/&lt;/code&gt;。因此，&lt;code&gt;a{/b/c,bcd}&lt;/code&gt; 会展开为 &lt;code&gt;a/b/c&lt;/code&gt; 和 &lt;code&gt;abcd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下字符用在路径段时，会拥有特别的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt; ： 匹配0或多个字符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/*.js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取js目录下的所有js文件（不包括以&lt;code&gt;.&lt;/code&gt;开头的文件，下文有方法解决：对 glob 方法的 options 参数的属性 &lt;code&gt;dot:true&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;?&lt;/code&gt; ： 匹配一个字符（不能为空）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/a?.js&amp;quot;, function(err, files){
    console.log(files);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取js目录下所有文件名长度为1字符的js文件。例如：能匹配 js/ab.js，不能匹配 js/a.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[...]&lt;/code&gt; ： 匹配该路径段中在指定范围内的一个字符。&lt;br&gt;注意：不能组合，只能匹配其中&lt;strong&gt;一个&lt;/strong&gt;字符。另外，如果指定范围的首字符是 &lt;code&gt;!&lt;/code&gt; 或 &lt;code&gt;^&lt;/code&gt;，则匹配&lt;strong&gt;不在指定范围内&lt;/strong&gt;的&lt;strong&gt;一个&lt;/strong&gt;字符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/a[0-3].js&amp;quot;, function(err, files){
    console.log(files);
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取js目录下以&lt;code&gt;a&lt;/code&gt;开头，第二个字符为0-3之间（包括0和3）的js文件。若改为 &lt;code&gt;[&amp;quot;js/[^ab].js&amp;quot;]&lt;/code&gt;，则匹配  js/c.js，不匹配 js/cd.js、js/ac.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;!(pattern|pattern|pattern)&lt;/code&gt; ： 匹配（完全且精确地匹配，且不可组合）不符合任何模型之一的字符。注意 &lt;code&gt;|&lt;/code&gt; 前后不能有空格，下同。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/!(a|b).js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下的 aa.js、ab.js、ba.js、c.js 不匹配 a.js、b.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;?(pattern|pattern|pattern)&lt;/code&gt;：匹配多个 pattern 中 0 或 1 个（精确匹配，不可以组合）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/?(a|b).js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下的 a.js、b.js，不匹配 ab.js&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+(pattern|pattern|pattern)&lt;/code&gt; ： 至少匹配多个 pattern 中的一个。与&lt;code&gt;*(pattern|pattern|pattern)&lt;/code&gt; 不用的是，它必须1个及以上，不能为空。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/+(a|b)b.js&amp;quot;, function(err, files){
     console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下的 ab.js、bb.js、ababab.js，不能匹配 abcd.js（也就是说：只允许匹配出现在范围内的字符） ，也不能像 &lt;code&gt;js/*(a|b)b.js&lt;/code&gt; 那样匹配 b.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*(a|b|c)&lt;/code&gt; ： 匹配括号中多个 pattern 中0或任意多个（pattern可相互组合）。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/*(a|b|c).js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下的 a.js、ab.js、abc.js、ba.js，不匹配 abcd.js（也就是说：只允许匹配出现在范围内的字符）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@(pattern|pattern|pattern)&lt;/code&gt; 匹配多个 pattern 中的任意一个（即不可以组合，且不能为空或大于1个）。与 &lt;code&gt;?(pattern|pattern|pattern)&lt;/code&gt; 区别是不可为空。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/@(a|b)b.js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下的 ab.js、bb.js，不匹配 b.js、abb.js、abc.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;**&lt;/code&gt; 与 &lt;code&gt;*&lt;/code&gt; 类似，可以匹配任何内容（可匹配空），但 &lt;code&gt;**&lt;/code&gt; 不仅能匹配路径中的特定一段，还能匹配后代所有目录（即多段路径段）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glob(&amp;quot;js/**/*.js&amp;quot;, function(err, files){
    console.log(files);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配 js 目录下所有js文件，如 js/a.js 或 js/a/b/c/d.js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Dots-即&quot;&gt;&lt;a href=&quot;#Dots-即&quot; class=&quot;headerlink&quot; title=&quot;Dots(即 .)&quot;&gt;&lt;/a&gt;Dots(即 &lt;code&gt;.&lt;/code&gt;)&lt;/h2&gt;&lt;p&gt;如果文件或目录的某路径段以 &lt;code&gt;.&lt;/code&gt; 作为首字符，那么该路径段不会符合任何  glob pattern，除非该 pattern 的相应路径段同样以 &lt;code&gt;.&lt;/code&gt; 作为首字符。&lt;/p&gt;
&lt;p&gt;例如，pattern &lt;code&gt;a/.*/c&lt;/code&gt; 会匹配文件 &lt;code&gt;a/.b/c&lt;/code&gt;，而 pattern &lt;code&gt;a/*/c&lt;/code&gt; 则不会匹配该文件，因为 &lt;code&gt;*&lt;/code&gt; 不会匹配以 &lt;code&gt;.&lt;/code&gt; 字符开头的文件。&lt;/p&gt;
&lt;p&gt;可通过在 options 设置 &lt;code&gt;dot: true&lt;/code&gt;，让 glob 将 &lt;code&gt;.&lt;/code&gt; 视为普通字符。&lt;/p&gt;
&lt;h2 id=&quot;Basename-匹配&quot;&gt;&lt;a href=&quot;#Basename-匹配&quot; class=&quot;headerlink&quot; title=&quot;Basename 匹配&quot;&gt;&lt;/a&gt;Basename 匹配&lt;/h2&gt;&lt;p&gt;如果在 options 设置 &lt;code&gt;matchBase: true&lt;/code&gt;，且 pattern 不含有 &lt;code&gt;/&lt;/code&gt;，那么将会寻找任何匹配 basename 的文件，即在当前路径下的文件树进行搜索。例如，&lt;code&gt;*.js&lt;/code&gt; 会匹配 &lt;code&gt;test/simple.basic.js&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;空集&quot;&gt;&lt;a href=&quot;#空集&quot; class=&quot;headerlink&quot; title=&quot;空集&quot;&gt;&lt;/a&gt;空集&lt;/h2&gt;&lt;p&gt;如果不匹配任何文件，则会返回空数组。这点与 shell 不同，shell 会返回自身 pattern。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$echo echo a*s*d*f
a*s*d*f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若想得到 bash 那样的行为，可对 options 参数设置 &lt;code&gt;nonull:true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若发现文中有任何错误，或有任何好的建议，欢迎评论。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/JChehe/blog/blob/master/posts/%E5%85%B3%E4%BA%8E%20Glob%20%E7%9A%84%E5%AD%A6%E4%B9%A0.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 Glob (gulp) 的学习&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料：&lt;a href=&quot;https://github.com/isaacs/node-glob&quot;&gt;https://github.com/isaacs/node-glob&lt;/a&gt;&lt;br&gt;下文是关于 Gulp 的 &lt;code&gt;gulp.src(globs[, options])&lt;/code&gt; 方法的第一个参数 &lt;code&gt;globs&lt;/code&gt; 的学习。&lt;br&gt;需要注意的是：&lt;br&gt;当该参数 &lt;code&gt;globs&lt;/code&gt; 为数组时，其包含的多个 glob 会&lt;strong&gt;按顺序进行解析&lt;/strong&gt;，这意味着以下意图是可以实现的：&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="glob" scheme="http://yoursite.com/tags/glob/"/>
    
  </entry>
  
  <entry>
    <title>用Mocha和Chai对JavaScript进行单元测试</title>
    <link href="http://yoursite.com/2016/02/06/2016-2-6-unit-test-javascript-mocha-chai/"/>
    <id>http://yoursite.com/2016/02/06/2016-2-6-unit-test-javascript-mocha-chai/</id>
    <published>2016-02-06T03:28:13.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;你曾试过修改代码后，导致其它地方出现问题吗？&lt;/p&gt;
&lt;p&gt;也许有大多数人试过。因为这是几乎不可避免的，特别在庞大的代码面前。由于代码间可能是环环相扣的，改变一处会影响另一处。&lt;/p&gt;
&lt;p&gt;但如果这种情况不会发生呢？如果你有一种方法能知道改变后会出现的结果呢？这无疑是极好的。因为修改代码后无需担心会破坏什么东西，从而程序出现 bug 的概率更低，在 debug 上花费时间更少。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这就是单元测试的魅力。它能自动检测代码中的任何问题。在修改代码后进行相应测试，若有问题，能立刻知道问题是什么，问题在哪和正确的做法是什么。这完全消除任何猜测！&lt;/p&gt;
&lt;p&gt;在本文，我会让你了解如何对 JavaScript 代码进行单元测试。而且，在本文出现的案例和技术可同时应用到基于浏览器的代码和 Node.js 的代码。&lt;/p&gt;
&lt;p&gt;教程中的代码也可到我的 &lt;a href=&quot;https://github.com/sitepoint-editors/mocha-unit-testing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub repo&lt;/a&gt; 中得到。&lt;/p&gt;
&lt;h2 id=&quot;什么是单元测试&quot;&gt;&lt;a href=&quot;#什么是单元测试&quot; class=&quot;headerlink&quot; title=&quot;什么是单元测试&quot;&gt;&lt;/a&gt;什么是单元测试&lt;/h2&gt;&lt;p&gt;当你对代码库进行测试时，可先取一段代码（如函数），然后在特定情况下，验证其行为是否正确。而单元测试就是这方面的一种结构化和自动化的方法。当然，写的测试越多，获得的益处也更大。这也让你进行开发时会更加自信。&lt;/p&gt;
&lt;p&gt;单元测试的核心思想是给函数特定的输入，测试其行为。也就是说，以特定的参数调用函数，然后检查是否得到正确的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Given 1 and 10 as inputs...
// 输入 1 和 10...
var result = Math.max(1, 10);

// ...we should receive 10 as the output
// ...应该输出 10
if(result !== 10) {
  throw new Error(&amp;apos;Failed&amp;apos;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在实际中，测试有时会更复杂。例如，如果你的函数含有一个 Ajax 请求，那么测试就需要设定更多的东西。当然，“赋予特定的输入，期待得到一个特定的输出”原理仍然适用。&lt;/p&gt;
&lt;h2 id=&quot;设置工具&quot;&gt;&lt;a href=&quot;#设置工具&quot; class=&quot;headerlink&quot; title=&quot;设置工具&quot;&gt;&lt;/a&gt;设置工具&lt;/h2&gt;&lt;p&gt;在本文，我们选择 Mocha。它入门简单，能同时适用于基于浏览器的测试和 Node.js 的测试，而且与其它测试工具运行良好。&lt;/p&gt;
&lt;p&gt;安装 Mocha 的最简单方式是 npm（为此，也需要安装 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;）。如果你不懂得如何在你的电脑上安装 npm 或 Node.js，可查看我的教程 &lt;a href=&quot;http://www.sitepoint.com/beginners-guide-node-package-manager/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Beginner’s Guide to npm — the Node Package Manager&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安装好 Node.js 后，在你的项目目录下打开 terminal 或 command line。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你想在浏览器上测试代码，执行 &lt;code&gt;npm install mocha chai --save-dev&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果你想测试 Node.js 代码，除了执行上面那行命令，也要执行 &lt;code&gt;npm install -g mocha&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就安装了 &lt;code&gt;mocha&lt;/code&gt; 和 &lt;code&gt;chai&lt;/code&gt; 包（package）了。&lt;a href=&quot;https://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt; 是一个运行测试的库，而 &lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chai&lt;/a&gt; 包含一些有用的功能，我们能利用这些功能对我们的测试结果进行验证。&lt;/p&gt;
&lt;h3 id=&quot;Node-js-vs-Browser-测试对比&quot;&gt;&lt;a href=&quot;#Node-js-vs-Browser-测试对比&quot; class=&quot;headerlink&quot; title=&quot;Node.js vs Browser 测试对比&quot;&gt;&lt;/a&gt;Node.js vs Browser 测试对比&lt;/h3&gt;&lt;p&gt;下面的案例是在浏览器上运行测试的。如果想为你的 Node.js 应用进行单元测试，要遵循以下步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 Node，无需测试运行文件（test runner file）。&lt;/li&gt;
&lt;li&gt;为了引入 Chari，需在测试文件顶部添加语句 &lt;code&gt;var chai = require(&amp;#39;chai&amp;#39;);&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;mocha&lt;/code&gt; 命令执行单元测试，而不是打开浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;设置目录结构&quot;&gt;&lt;a href=&quot;#设置目录结构&quot; class=&quot;headerlink&quot; title=&quot;设置目录结构&quot;&gt;&lt;/a&gt;设置目录结构&lt;/h2&gt;&lt;p&gt;为了让文件结构更清晰，应将测试文件放在主代码文件的一个独立目录下。这是为了方便以后添加其它类型的测试（如&lt;a href=&quot;https://en.wikipedia.org/wiki/Integration_testing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;集成测试（integration tests）&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_testing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;功能测试（functional tests）&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;对于 JavaScript，最流行的实践方案是在项目根目录下创建一个 &lt;code&gt;test/&lt;/code&gt; 文件夹。然后，将每个测试文件放置在该文件夹下，如 &lt;code&gt;test/someModuleTest.js&lt;/code&gt;。另一种方案是，在 &lt;code&gt;test/&lt;/code&gt; 目录下，再创建文件夹。但我建议尽量保持简单——这样能保证在后面必要时进行（快速）修改。&lt;/p&gt;
&lt;h2 id=&quot;设置测试运行器（Test-Runner）&quot;&gt;&lt;a href=&quot;#设置测试运行器（Test-Runner）&quot; class=&quot;headerlink&quot; title=&quot;设置测试运行器（Test Runner）&quot;&gt;&lt;/a&gt;设置测试运行器（Test Runner）&lt;/h2&gt;&lt;p&gt;为了能在浏览器上进行测试，我们需要创建一个简单的 HTML 页面作为测试运行页（test runner page）。该页面会加载 Mocha、测试库文件和实际测试文件。为了运行这些测试，我们只需在浏览器打开运行器（runner）。&lt;/p&gt;
&lt;p&gt;如果你使用 Node.js，你可跳过这一步。Node.js 的单元测试能通过命令 &lt;code&gt;mocha&lt;/code&gt; 运行，前提是按照我推荐的目录结构。&lt;/p&gt;
&lt;p&gt;下面是我们用于测试运行器（test runner）的代码。我将其存为 &lt;code&gt;testrunner.html&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Mocha Tests&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;node_modules/mocha/mocha.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;mocha&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;node_modules/mocha/mocha.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;node_modules/chai/chai.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;mocha.setup(&amp;apos;bdd&amp;apos;)&amp;lt;/script&amp;gt;

    &amp;lt;!-- load code you want to test here --&amp;gt;

    &amp;lt;!-- load your test files here --&amp;gt;

    &amp;lt;script&amp;gt;
      mocha.run();
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试运行器的几个重要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了让测试结果拥有漂亮的样式，我们加载了 Mocha 的 CSS 文件。&lt;/li&gt;
&lt;li&gt;创建了一个 ID 为 mochat 的 div 标签。测试结果将放在该标签内。&lt;/li&gt;
&lt;li&gt;加载 Mocha 和 Chai 脚本文件。由于这两个文件是通过 npm 安装的，它们被放在 node_modules 目录的相应文件夹下。&lt;/li&gt;
&lt;li&gt;通过调用 mocha.setup，开启 Mocha 的测试功能（testing helpers）。&lt;/li&gt;
&lt;li&gt;然后，加载需要的测试项和相应测试的文件。尽管我们还没在这放置任何代码。&lt;/li&gt;
&lt;li&gt;最后，调用了 mocha.run 执行相应测试。当然，要确保在资源和测试文件加载完成后才调用该函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基本的测试骨架&quot;&gt;&lt;a href=&quot;#基本的测试骨架&quot; class=&quot;headerlink&quot; title=&quot;基本的测试骨架&quot;&gt;&lt;/a&gt;基本的测试骨架&lt;/h2&gt;&lt;p&gt;现在我们可以运行测试了，下面就开始写点测试相关的东西吧。&lt;/p&gt;
&lt;p&gt;首先，创建 &lt;code&gt;test/arrayTest.js&lt;/code&gt;。每个文件名都有其具体含义，显然它是个测试文件，并会测试 array 的基本功能。&lt;/p&gt;
&lt;p&gt;每个测试案例文件都会遵循以下基本模式。首先，有个 &lt;code&gt;describe&lt;/code&gt; 块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&amp;apos;Array&amp;apos;, function() {
  // Further code for tests goes here
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;describe&lt;/code&gt; 用于把单独的测试聚合在一起。其第一个参数用于指示测试什么。在本例中，由于我们打算测试 array 功能，我传入一个 &lt;code&gt;&amp;#39;Array&amp;#39;&lt;/code&gt; 字符串。&lt;/p&gt;
&lt;p&gt;然后，在 &lt;code&gt;describe&lt;/code&gt; 内需有 &lt;code&gt;it&lt;/code&gt; 块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&amp;apos;Array&amp;apos;, function() {
  it(&amp;apos;should start empty&amp;apos;, function() {
    // Test implementation goes here
  });

  // We can have more its here
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;it&lt;/code&gt; 用于创建实际的测试。其第一个参数是对该测试的描述，且该描述的语言应该是人类可读的（而非编程语言）。如在本例中，“it should empty”能很好地描述了 array 的行为。实现该测试的具体代码则写在 &lt;code&gt;it&lt;/code&gt; 的第二个参数 function 内。&lt;/p&gt;
&lt;p&gt;所有 Mocha 测试都以同样的骨架编写，而且它们遵循这相同且基本的模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，使用 &lt;code&gt;describe&lt;/code&gt; 表明我们测试什么，如“描述 array 该如何运行”。&lt;/li&gt;
&lt;li&gt;然后，使用多个 &lt;code&gt;it&lt;/code&gt; 函数创建独立的测试，每个 &lt;code&gt;it&lt;/code&gt; 应该描述一个特定的行为，如上述的案例 “it should start empty（array 运行前应为空）”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编写测试代码&quot;&gt;&lt;a href=&quot;#编写测试代码&quot; class=&quot;headerlink&quot; title=&quot;编写测试代码&quot;&gt;&lt;/a&gt;编写测试代码&lt;/h2&gt;&lt;p&gt;现在我们已经知道如何构造测试案例了，下面就开始更有趣的部分——实现测试。&lt;/p&gt;
&lt;p&gt;由于我们的测试是 array 初始值应为空，即我们需要创建一个数组并确保它为空。实现该测试是非常简单的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var assert = chai.assert;

describe(&amp;apos;Array&amp;apos;, function() {
  it(&amp;apos;should start empty&amp;apos;, function() {
    var arr = [];

    assert.equal(arr.length, 0);
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意首行代码，我们设置了 &lt;code&gt;assert&lt;/code&gt; 变量。这样就不用每次需要它时输入 &lt;code&gt;chai.assert&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;it&lt;/code&gt; 函数里，我们创建了一个数组并检查其长度。尽管简单，但很好地展示了测试是如何工作的。&lt;/p&gt;
&lt;p&gt;首先，你有东西需要被测试——这叫 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;被测系统（System Under Test，SUT）&lt;/a&gt;。若有需要，则对被测系统进行相应操作。对于上述案例，由于检查数组初始值是否为空，我们没做任何操作。&lt;/p&gt;
&lt;p&gt;测试的最后步骤应该是验证——对结果进行断言（assertion）检查。对于上述案例，我们对此使用 &lt;code&gt;assert.equal&lt;/code&gt;。大多数断言函数的参数顺序是一致的：首先是“实际”值，然后是“期待”值。 &lt;/p&gt;
&lt;p&gt;实际值是测试代码的结果，因此，在该案例中是 &lt;code&gt;arr.length&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;期待值是预想的结果。由于数组的初始值应为空，因此，在该案例中的期待值是 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;虽然 Chai 提供了两种不同的断言（assertion）编写方式，但现在为了保持简单，我们使用了 &lt;a href=&quot;http://chaijs.com/api/assert/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;assert&lt;/a&gt;。当你能熟练编写测试时，你可能更想用 &lt;a href=&quot;http://chaijs.com/api/bdd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;expect assertions&lt;/a&gt; ，因为它提供了更灵活的操作。&lt;/p&gt;
&lt;h2 id=&quot;运行测试&quot;&gt;&lt;a href=&quot;#运行测试&quot; class=&quot;headerlink&quot; title=&quot;运行测试&quot;&gt;&lt;/a&gt;运行测试&lt;/h2&gt;&lt;p&gt;为了运行该测试，我们需要将其添加到先前创建的测试运行器文件内。&lt;/p&gt;
&lt;p&gt;对于 Node.js，可跳过此步骤，然后使用命令 &lt;code&gt;mocha&lt;/code&gt; 执行测试。你会在 terminal 里看到测试结果。&lt;/p&gt;
&lt;p&gt;向运行器添加该测试（针对浏览器端）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- load your test files here --&amp;gt;
&amp;lt;script src=&amp;quot;test/arrayTest.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你一旦添加了脚本，就可以加载测试运行器页面了（若选择在浏览器进行测试）。&lt;/p&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h2&gt;&lt;p&gt;当你运行这些测试，其测试结果看起来和下图类似：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/1mocha-test-results.jpg&quot; alt=&quot;Mocha test results - 1 test passing&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：在 &lt;code&gt;describe&lt;/code&gt; 和 &lt;code&gt;it&lt;/code&gt; 函数的描述语句都在页面展示出来了——测试项（如：should start empty）都分组放在描述（如：Array）下。当然，也可以对 &lt;code&gt;describe&lt;/code&gt; 块再嵌套，以创建更深的子分组。&lt;/p&gt;
&lt;p&gt;下面看看测试失败是显示什么。&lt;/p&gt;
&lt;p&gt;将测试的该行代码进行修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert.equal(arr.length, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将 0 改为 1。这无疑会导致测试失败，因为数组长度不再匹配期待值。&lt;/p&gt;
&lt;p&gt;如果你再次运行测试，那么在测试结果中，运行错误的描述将以红色显示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/2mochatest-error.jpg&quot; alt=&quot;Mocha test error - one test failing&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试的一项好处是能帮助你更快地找到 bug，尽管错误信息在这并不是非常详细。&lt;/p&gt;
&lt;p&gt;大多数断言函数都带有一个可选的 &lt;code&gt;message&lt;/code&gt; 参数。该信息参数会在断言失败时显示。因此我们可以利用该参数，让错误信息更易被我们所理解。&lt;/p&gt;
&lt;p&gt;我们能像下面那样向断言添加 &lt;code&gt;message&lt;/code&gt; 参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert.equal(arr.length, 1, &amp;apos;Array length was not 0&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你再次运行测试，那么自定义的信息会取代默认的信息而显示出来。&lt;/p&gt;
&lt;p&gt;OK，让我们将 &lt;code&gt;1&lt;/code&gt; 改回 &lt;code&gt;0&lt;/code&gt;，确保测试通过。&lt;/p&gt;
&lt;h2 id=&quot;综合案例&quot;&gt;&lt;a href=&quot;#综合案例&quot; class=&quot;headerlink&quot; title=&quot;综合案例&quot;&gt;&lt;/a&gt;综合案例&lt;/h2&gt;&lt;p&gt;到目前为止，案例都是相当简单的。那么下面就让我们将学到的知识付诸实践，看看如何测试一段实际当中所用到的代码。&lt;/p&gt;
&lt;p&gt;下面是一个将 CSS 类名添加到元素的函数。我们将该函数放进新文件 &lt;code&gt;js/className.js&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function addClass(el, newClass) {
  if(el.className.indexOf(newClass) === -1) {
    el.className += newClass;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当元素的 &lt;code&gt;className&lt;/code&gt; 属性不含有新类名时，才向元素添加新类名——毕竟谁想看到 &lt;code&gt;&amp;lt;div class=&amp;quot;hello hello hello hello&amp;quot;&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在最好的情况下，我们要在编写代码前先为该函数编写测试。但 &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试驱动开发（test-driven development）&lt;/a&gt; 是一个复杂的主题，因此我们现在仅专注于编写测试。&lt;/p&gt;
&lt;p&gt;开始前，让我们重温单元测试的基本思想：赋予函数特定的输入，然后验证函数的行为是否符合预期。所以，该函数的输入和行为是什么呢？&lt;/p&gt;
&lt;p&gt;给定一个元素和一个类名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若元素的 &lt;code&gt;className&lt;/code&gt; 属性未含有该类名，则应添加。&lt;/li&gt;
&lt;li&gt;若元素的 &lt;code&gt;className&lt;/code&gt; 属性已含有该类名，则不应添加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将这两种情况转化为两个测试。在 &lt;code&gt;test&lt;/code&gt; 目录下，创建新文件 &lt;code&gt;classNameTest.js&lt;/code&gt; 并添加以下内容： &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&amp;apos;addClass&amp;apos;, function() {
  it(&amp;apos;should add class to element&amp;apos;);
  it(&amp;apos;should not add a class which already exists&amp;apos;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们也可以将措词稍微地改成“it should do X”，虽然可读性更强一点，但本质上仍然与我们上述语句的可读性一致。根据原来的措词联想到相应的测试也不难。&lt;/p&gt;
&lt;p&gt;等等，测试函数跑去哪了？当我们省略 &lt;code&gt;it&lt;/code&gt; 的第二个参数，Mocha 会在测试结果中标记这些测试为待测试项。这让设置多个测试变得更方便——就像一个备忘录，列着打算编写的测试。&lt;/p&gt;
&lt;p&gt;接着实现第一个测试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&amp;apos;addClass&amp;apos;, function() {
  it(&amp;apos;should add class to element&amp;apos;, function() {
    var element = { className: &amp;apos;&amp;apos; };

    addClass(element, &amp;apos;test-class&amp;apos;);

    assert.equal(element.className, &amp;apos;test-class&amp;apos;);
  });

  it(&amp;apos;should not add a class which already exists&amp;apos;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在该测试中，我们创建了 &lt;code&gt;element&lt;/code&gt; 变量，并将其与字符串 &lt;code&gt;test-class&lt;/code&gt;（作为元素的新类名） 作为参数传入 &lt;code&gt;addClass&lt;/code&gt; 函数。然后，使用断言检查该类名是否已包含在值（element.className）里。&lt;/p&gt;
&lt;p&gt;再一次，我们从初始的想法出发——给定一个元素和一个类名，将类名添加到 class 列表，然后以简单的方式将其转化为代码。&lt;/p&gt;
&lt;p&gt;尽管该函数（addClass）是针对 DOM 元素的，但我们在此使用了一个简单JS对象（plain JS object，根据 jQuery 官方定义：含有零个或多个键值对的对象）。是的，有时我们可以利用 JavaScript 的动态特性，以上述方式简化测试。如果不这样做，我们就要创建一个实际的元素，这无疑会使测试代码变复杂。当然，这还有另一个好处，由于没使用 DOM，该测试也能在 Node.js 运行。&lt;/p&gt;
&lt;h3 id=&quot;在浏览器运行测试&quot;&gt;&lt;a href=&quot;#在浏览器运行测试&quot; class=&quot;headerlink&quot; title=&quot;在浏览器运行测试&quot;&gt;&lt;/a&gt;在浏览器运行测试&lt;/h3&gt;&lt;p&gt;为了在浏览器运行测试，你需要在运行器添加 &lt;code&gt;className.js&lt;/code&gt; 和 &lt;code&gt;classNameTest.js&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- load code you want to test here --&amp;gt;
&amp;lt;script src=&amp;quot;js/className.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- load your test files here --&amp;gt;
&amp;lt;script src=&amp;quot;test/classNameTest.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如 CodePen 所显示：一个测试通过，而另一个显示待测试。注意：为了让代码运行在 CodePen 环境下，代码需稍作调整。&lt;/p&gt;
&lt;iframe height=&quot;268&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/SitePoint/embed/XXzXLX/?height=268&amp;theme-id=0&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/XXzXLX/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (1)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;br&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XXzXLX&quot; data-default-tab=&quot;result&quot; data-user=&quot;SitePoint&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/XXzXLX/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (1)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;接着，实现第二个测试…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it(&amp;apos;should not add a class which already exists&amp;apos;, function() {
  var element = { className: &amp;apos;exists&amp;apos; };

  addClass(element, &amp;apos;exists&amp;apos;);

  var numClasses = element.className.split(&amp;apos; &amp;apos;).length;
  assert.equal(numClasses, 1);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经常运行测试是一种好习惯。因此，让我们现在运行测试看看会发生什么。&lt;/p&gt;
&lt;p&gt;不出所料，两者均通过。&lt;/p&gt;
&lt;p&gt;下面是在 CodePen 实现第二个测试的例子。&lt;/p&gt;
&lt;iframe height=&quot;268&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/SitePoint/embed/pgdyzz/?height=268&amp;theme-id=0&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/pgdyzz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (2)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;br&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;pgdyzz&quot; data-default-tab=&quot;result&quot; data-user=&quot;SitePoint&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/pgdyzz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (2)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;但事情没那么简单！该函数的第三种情况我们并没有考虑到，这也是该函数的一个非常严重的 Bug。虽然该函数只有三行代码，但你注意到了吗？&lt;/p&gt;
&lt;p&gt;下面为第三种情况编写多一个案例，让这个 Bug 暴露出来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it(&amp;apos;should append new class after existing one&amp;apos;, function() {
  var element = { className: &amp;apos;exists&amp;apos; };

  addClass(element, &amp;apos;new-class&amp;apos;);

  var classes = element.className.split(&amp;apos; &amp;apos;);
  assert.equal(classes[1], &amp;apos;new-class&amp;apos;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可在下面的 CodePen 看到，这次测试失败了。导致该问题的原因很简单：元素上的 CSS 类名应以空格隔开。然而，现在实现的 &lt;code&gt;addClass&lt;/code&gt; 并未加空格！&lt;/p&gt;
&lt;iframe height=&quot;268&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/SitePoint/embed/oboxve/?height=268&amp;theme-id=0&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/oboxve/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (3)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;br&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;oboxve&quot; data-default-tab=&quot;result&quot; data-user=&quot;SitePoint&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/oboxve/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (3)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;修复该函数，让测试通过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function addClass(el, newClass) {
  if(el.className.indexOf(newClass) !== -1) {
    return;
  }

  if(el.className !== &amp;apos;&amp;apos;) {
    //ensure class names are separated by a space
    newClass = &amp;apos; &amp;apos; + newClass;
  }

  el.className += newClass;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修复后，最终在 CodePen 测试通过。&lt;/p&gt;
&lt;iframe height=&quot;268&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/SitePoint/embed/BjmKBG/?height=268&amp;theme-id=0&amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/BjmKBG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (4)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;br&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;BjmKBG&quot; data-default-tab=&quot;result&quot; data-user=&quot;SitePoint&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SitePoint/pen/BjmKBG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Testing with Mocha (4)&lt;/a&gt; by SitePoint (&lt;a href=&quot;http://codepen.io/SitePoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;在-Node-运行测试&quot;&gt;&lt;a href=&quot;#在-Node-运行测试&quot; class=&quot;headerlink&quot; title=&quot;在 Node 运行测试&quot;&gt;&lt;/a&gt;在 Node 运行测试&lt;/h3&gt;&lt;p&gt;在 Node，由于 &lt;code&gt;className.js&lt;/code&gt; 和 &lt;code&gt;classNameTest.js&lt;/code&gt; 在不同文件下，我们需要一种方式将一个文件导出到另一个文件内。而标准的方式是通过 &lt;code&gt;module.exports&lt;/code&gt;。如果你需要复习相关知识，你可以看看 &lt;a href=&quot;http://www.sitepoint.com/understanding-module-exports-exports-node-js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding module.exports and exports in Node.js&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;代码本质不变，只是结构稍微不同：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// className.js

module.exports = {
  addClass: function(el, newClass) {
    if(el.className.indexOf(newClass) !== -1) {
      return;
    }

    if(el.className !== &amp;apos;&amp;apos;) {
      //ensure class names are separated by a space
      newClass = &amp;apos; &amp;apos; + newClass;
    }

    el.className += newClass;
  }
}


// classNameTest.js

var chai = require(&amp;apos;chai&amp;apos;);
var assert = chai.assert;

var className = require(&amp;apos;../js/className.js&amp;apos;);
var addClass = className.addClass;

// The rest of the file remains the same
// 文件其它部分保持不变
describe(&amp;apos;addClass&amp;apos;, function() {
  ...
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如你所看到的，测试通过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/3running-mocha-in-the-terminal.png&quot; alt=&quot;Mocha terminal output - 4 tests passing&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;下一步呢？&quot;&gt;&lt;a href=&quot;#下一步呢？&quot; class=&quot;headerlink&quot; title=&quot;下一步呢？&quot;&gt;&lt;/a&gt;下一步呢？&lt;/h2&gt;&lt;p&gt;正如你所看到的，测试并不复杂或困难。与编写 JavaScript 应用的其它方面一样，有一些重复的基本模式。一旦你熟悉这些，你可以一次又一次使用它们。&lt;/p&gt;
&lt;p&gt;但这些只是单元测试的皮毛，还有很多相关知识需要学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试更复杂的系统&lt;/li&gt;
&lt;li&gt;如何处理Ajax、数据库和其它“外部”的东西。&lt;/li&gt;
&lt;li&gt;测试驱动开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你想继续学习更多相关知识，可看看我编写的 &lt;a href=&quot;http://codeutopia.net/blog/h/subscribe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费的 JavaScript 单元测试快速入门系列&lt;/a&gt;。如果你觉得本文有用，你更应该点击 &lt;a href=&quot;http://codeutopia.net/blog/h/subscribe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 看看。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://web.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt; - &lt;a href=&quot;http://www.jobbole.com/members/q574805242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超-J.c&lt;/a&gt; 翻译，等待校稿。未经许可，禁止转载！ &lt;/p&gt;
&lt;p&gt;英文出处：&lt;a href=&quot;http://www.sitepoint.com/unit-test-javascript-mocha-chai/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unit Test Your JavaScript Using Mocha and Chai&lt;/a&gt;。欢迎加入翻译组。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;你曾试过修改代码后，导致其它地方出现问题吗？&lt;/p&gt;
&lt;p&gt;也许有大多数人试过。因为这是几乎不可避免的，特别在庞大的代码面前。由于代码间可能是环环相扣的，改变一处会影响另一处。&lt;/p&gt;
&lt;p&gt;但如果这种情况不会发生呢？如果你有一种方法能知道改变后会出现的结果呢？这无疑是极好的。因为修改代码后无需担心会破坏什么东西，从而程序出现 bug 的概率更低，在 debug 上花费时间更少。&lt;br&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="BDD" scheme="http://yoursite.com/tags/BDD/"/>
    
      <category term="chai" scheme="http://yoursite.com/tags/chai/"/>
    
      <category term="mocha" scheme="http://yoursite.com/tags/mocha/"/>
    
      <category term="tdd" scheme="http://yoursite.com/tags/tdd/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript（ES5）的面向对象精要》读书笔记</title>
    <link href="http://yoursite.com/2016/01/20/2016-1-19-object-oriented-programming-notes/"/>
    <id>http://yoursite.com/2016/01/20/2016-1-19-object-oriented-programming-notes/</id>
    <published>2016-01-20T02:04:36.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;2016年1月16日-17日两天看完了《JavaScript面向对象精要》（参加异步社区的活动送的），这本书虽然不够100页，但都是精华，不愧是《JavaScript高级程序设计》作者 Nicholas C.Zakas 的最新力作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面是我的读书笔记（ES5）：&lt;/p&gt;
&lt;h2 id=&quot;原始类型和引用类型&quot;&gt;&lt;a href=&quot;#原始类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;原始类型和引用类型&quot;&gt;&lt;/a&gt;原始类型和引用类型&lt;/h2&gt;&lt;h3 id=&quot;什么是类型&quot;&gt;&lt;a href=&quot;#什么是类型&quot; class=&quot;headerlink&quot; title=&quot;什么是类型&quot;&gt;&lt;/a&gt;什么是类型&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原始类型&lt;/strong&gt; 保存为简单数据值。&lt;br&gt;&lt;strong&gt;引用类型&lt;/strong&gt; 保存为对象，其本质是指向内存位置的引用。&lt;/p&gt;
&lt;p&gt;为了让开发者能够把原始类型和引用类型按相同的方式处理，JavaScript花费了很大的努力来保证语言的一致性。&lt;/p&gt;
&lt;p&gt;其他编程语言用栈存原始类型，用对存储引用类型。而JavaScript则完全不同：它使用一个变量对象追踪变量的生存期。原始值被直接保存在变量对象内，而引用值则作为一个指针保存在变量对象内，该指针指向实际对象在内存中的存储位置。&lt;/p&gt;
&lt;h3 id=&quot;原始类型&quot;&gt;&lt;a href=&quot;#原始类型&quot; class=&quot;headerlink&quot; title=&quot;原始类型&quot;&gt;&lt;/a&gt;原始类型&lt;/h3&gt;&lt;p&gt;原始类型代表照原样保存的一些简单数据。&lt;br&gt;JavaScript共有 &lt;strong&gt;5&lt;/strong&gt; 种原始类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean    布尔，值为 &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number     数字，值为任何整型或浮点数值&lt;/li&gt;
&lt;li&gt;string     字符串，值为由单引号或双引号括住的单个字符或连续字符&lt;/li&gt;
&lt;li&gt;null       空类型，仅有一个值：null&lt;/li&gt;
&lt;li&gt;undefined  未定义，只有一个值：undefined（undefined会被赋给一个还没有初始化的变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript和许多其他语言一样，原始类型的变量直接保存原始值（而不是一个指向对象的指针）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var color1 = &amp;quot;red&amp;quot;;
var color2 = color1;

console.log(color1); // &amp;quot;red&amp;quot;
console.log(color2); // &amp;quot;red&amp;quot;

color1 = &amp;quot;blue&amp;quot;;

console.log(color1); // &amp;quot;blue&amp;quot;
console.log(color2); // &amp;quot;red&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;鉴别原始类型&quot;&gt;&lt;a href=&quot;#鉴别原始类型&quot; class=&quot;headerlink&quot; title=&quot;鉴别原始类型&quot;&gt;&lt;/a&gt;鉴别原始类型&lt;/h4&gt;&lt;p&gt;鉴别原始类型的最佳方式是使用 &lt;code&gt;typeof&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(typeof &amp;quot;Nicholas&amp;quot;); // &amp;quot;string&amp;quot;
console.log(typeof 10);         // &amp;quot;number&amp;quot;
console.log(typeof true);       // &amp;quot;boolean&amp;quot;
console.log(typeof undefined);  // &amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至于空类型（null）则有些棘手。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(typeof null); // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 typeof null，结果是”object”。（其实这已被设计和维护JavaScript的委员会TC39认定是一个错误。在逻辑上，你可以认为 &lt;code&gt;null&lt;/code&gt; 是一个空的对象指针，所以结果为”object”，但这还是很令人困惑。）&lt;/p&gt;
&lt;p&gt;判断一个值是否为空类型（null）的最佳方式是直接和 &lt;code&gt;null&lt;/code&gt; 比较：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(value === null); // true or false
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：以上这段代码使用了三等号（全等===）&lt;/strong&gt;，因为三等号（全等）不会将变量强制转换为另一种类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;5&amp;quot; == 5); // true
console.log(&amp;quot;5&amp;quot; === 5); // false

console.log(undefined == null); // true
console.log(undefined === null); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;原始方法&quot;&gt;&lt;a href=&quot;#原始方法&quot; class=&quot;headerlink&quot; title=&quot;原始方法&quot;&gt;&lt;/a&gt;原始方法&lt;/h4&gt;&lt;p&gt;虽然字符串、数字和布尔值是原始类型，但是它们也拥有方法（null和undefined没有方法）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Nicholas&amp;quot;;
var lowercaseName = name.toLowerCase(); // 转为小写

var count = 10;
var fixedCount = count.toFixed(2); // 转为10.00

var flag = true;
var stringFlag = flag.toString(); // 转为&amp;quot;true&amp;quot;

console.log(&amp;quot;YIBU&amp;quot;.charAt(0)); // 输出&amp;quot;Y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;尽管原始类型拥有方法，但它们不是对象。JavaScript使它们看上去像对象一样，以此来提高语言上的一致性体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h3&gt;&lt;p&gt;引用类型是指JavaScript中的对象，同时也是你在该语言中能找到最接近类的东西。&lt;br&gt;引用值是引用类型的实例，也是对象的同义词（后面将用对象指代引用值）。对象是属性的无序列表。属性包含键（始终是字符串）和值。如果一个属性的值是函数，它就被称为方法。除了函数可以运行以外，一个包含数组的属性和一个包含函数的属性没有什么区别。&lt;/p&gt;
&lt;h4 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h4&gt;&lt;p&gt;有时候，把JavaScript对象想象成哈希表可以帮助你更好地理解对象结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/Object_hash.jpg&quot; alt=&quot;Object&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 有好几种方法可以创建对象，或者说实例化对象。第一种是使用 &lt;code&gt;new&lt;/code&gt; 操作符和构造函数。&lt;br&gt;构造函数就是通过 &lt;code&gt;new&lt;/code&gt; 操作符来创建对象的函数——任何函数都可以是构造函数。根据命名规范，JavaScript中的构造函数用&lt;strong&gt;首字母大写&lt;/strong&gt;来跟非构造函数进行区分。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var object = new Object();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为引用类型不再变量中直接保存对象，所以本例中的 &lt;code&gt;object&lt;/code&gt; 变量实际上并&lt;strong&gt;不包含对象的实例，而是一个指向内存中实际对象所在位置的指针（或者说引用）&lt;/strong&gt;。这是对象和原始值之间的一个基本差别，原始值是直接保存在变量中。&lt;/p&gt;
&lt;p&gt;当你将一个对象赋值给变量时，实际是赋值给这个变量一个指针。这意味着，将一个变量赋值给另外一个变量时，两个变量各获得了一份指针的拷贝，指向内存中的同一个对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = new Object();
var obj2 = obj1;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/copy_obj.jpg&quot; alt=&quot;copy_obj&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;对象引用解除&quot;&gt;&lt;a href=&quot;#对象引用解除&quot; class=&quot;headerlink&quot; title=&quot;对象引用解除&quot;&gt;&lt;/a&gt;对象引用解除&lt;/h4&gt;&lt;p&gt;JavaScript语言有垃圾收集的功能，因此当你使用引用类型时无需担心内存分配。&lt;strong&gt;但最好在不使用对象时将其引用解除，让垃圾收集器对那块内存进行释放。解除引用的最佳手段是将对象变量设置为 &lt;code&gt;null&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = new Object();
// dosomething
obj1 = null; // dereference
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;添加删除属性&quot;&gt;&lt;a href=&quot;#添加删除属性&quot; class=&quot;headerlink&quot; title=&quot;添加删除属性&quot;&gt;&lt;/a&gt;添加删除属性&lt;/h4&gt;&lt;p&gt;在JavaScript中，你可以随时添加和删除其属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = new Object();
var obj2 = obj1;

obj1.myCustomProperty = &amp;quot;Awsome!&amp;quot;;
console.log(obj2.myCustomProperty); // &amp;quot;Awsome!&amp;quot; 因为obj1和obj2指向同一个对象。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;内建类型实例化&quot;&gt;&lt;a href=&quot;#内建类型实例化&quot; class=&quot;headerlink&quot; title=&quot;内建类型实例化&quot;&gt;&lt;/a&gt;内建类型实例化&lt;/h3&gt;&lt;p&gt;内建类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array       数组类型，以数字为索引的一组值的有序列表&lt;/li&gt;
&lt;li&gt;Date        日期和时间类型&lt;/li&gt;
&lt;li&gt;Error       运行期错误类型&lt;/li&gt;
&lt;li&gt;Function    函数类型&lt;/li&gt;
&lt;li&gt;Object      通用对象类型&lt;/li&gt;
&lt;li&gt;RegExp      正则表达式类型    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可使用 &lt;code&gt;new&lt;/code&gt; 来实例化每一个内建引用类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var items = new Array();
var new = new Date();
var error = new Error(&amp;quot;Something bad happened.&amp;quot;);
var func = new Function(&amp;quot;console.log(&amp;apos;HI&amp;apos;);&amp;quot;);
var object = new Object();
var re = new RegExp();
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;字面形式&quot;&gt;&lt;a href=&quot;#字面形式&quot; class=&quot;headerlink&quot; title=&quot;字面形式&quot;&gt;&lt;/a&gt;字面形式&lt;/h4&gt;&lt;p&gt;内建引用类型有字面形式。字面形式允许你在不需要使用 &lt;code&gt;new&lt;/code&gt; 操作符和构造函数显示创建对象的情况下生成引用值。属性的&lt;strong&gt;键&lt;/strong&gt;可以是标识符或字符串（若含有空格或其他特殊字符）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var book = {
    name: &amp;quot;Book_name&amp;quot;,
    year: 2016
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码与下面这段代码等价：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var book = new Object();
book.name = &amp;quot;Book_name&amp;quot;;
book.year = 2016;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;虽然使用字面形式并没有调用 new Object()，但是JavaScript引擎背后做的工作和 new Object()一样，除了没有调用构造函数。其他引用类型的字面形式也是如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;访问属性&quot;&gt;&lt;a href=&quot;#访问属性&quot; class=&quot;headerlink&quot; title=&quot;访问属性&quot;&gt;&lt;/a&gt;访问属性&lt;/h3&gt;&lt;p&gt;可通过 &lt;code&gt;.&lt;/code&gt; 和 &lt;code&gt;中括号&lt;/code&gt; 访问对象的属性。&lt;br&gt;中括号&lt;code&gt;[]&lt;/code&gt;在需要动态决定访问哪个属性时，特别有用。因为你可以用&lt;strong&gt;变量&lt;/strong&gt;而不是字符串字面形式来指定访问的属性。&lt;/p&gt;
&lt;h3 id=&quot;鉴别引用类型&quot;&gt;&lt;a href=&quot;#鉴别引用类型&quot; class=&quot;headerlink&quot; title=&quot;鉴别引用类型&quot;&gt;&lt;/a&gt;鉴别引用类型&lt;/h3&gt;&lt;p&gt;函数是最容易鉴别的引用类型，因为对函数使用 &lt;code&gt;typeof&lt;/code&gt; 操作符时，返回”function”。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function reflect(value){
    return value;
}
console.log(typeof reflect); // &amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对其他引用类型的鉴别则较为棘手，因为对于所有非函数的引用类型，&lt;code&gt;typeof&lt;/code&gt; 返回 &lt;code&gt;object&lt;/code&gt;。为了更方便地鉴别引用类型，可以使用 JavaScript 的 &lt;code&gt;instanceof&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var items = [];
var obj = {};
function reflect(value){
    return value;
}

console.log(items instanceof Array); // true;
console.log(obj instanceof Object); // true;
console.log(reflect instanceof Function); // true;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;instanceof&lt;/code&gt; 操作符可鉴别继承类型。这意味着所有对象都是 &lt;code&gt;Oject&lt;/code&gt; 的实例，因为所有引用类型都继承自 &lt;code&gt;Object&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 instanceof 可以鉴别对象类型（如数组），但是有一个列外。JavaScript 的值可以在同一个网页的不用框架之间传来传去。由于每个网页拥有它自己的全局上下文——Object、Array以及其他内建类型的版本。所以当你把一个对象（如数组）从一个框架传到另外一个框架时，instanceof就无法识别它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;原始封装类型&quot;&gt;&lt;a href=&quot;#原始封装类型&quot; class=&quot;headerlink&quot; title=&quot;原始封装类型&quot;&gt;&lt;/a&gt;原始封装类型&lt;/h3&gt;&lt;p&gt;原始封装类型有 &lt;code&gt;3&lt;/code&gt; 种：String、Number 和 Boolean。&lt;br&gt;当读取字符串、数字或布尔值时，原始封装类型将被自动创建。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Nicholas&amp;quot;;
var firstChar = name.charAt(0); // &amp;quot;N&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这在背后发生的事情如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Nichola&amp;quot;;
var temp = new String(name);
var firstChar = temp.charAt(0);
temp = null;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于第二行把字符串当成对象使用，JavaScript引擎创建了一个字符串的实体让 &lt;code&gt;charAt(0)&lt;/code&gt; 可以工作。字符串对象的存在仅用于该语句并在随后销毁（一种被称为自动打包的过程）。为了测试这一点，试着给字符串添加一个属性看看它是不是对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Nicholas&amp;quot;;
name.last = &amp;quot;Zakas&amp;quot;;

console.log(name.last); // undefined;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面是在JavaScript引擎中实际发生的事情：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Nicholas&amp;quot;;
var temp = new String(name);
temp.last = &amp;quot;Zakas&amp;quot;;
temp = null; // temporary object destroyed

var temp = new String(name);
console.log(temp.last);
temp = null;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新属性 &lt;code&gt;last&lt;/code&gt; 实际上是在一个立刻就被销毁的临时对象上而不是字符串上添加。之后当你试图访问该属性时，另一个不同的临时对象被创建，而新属性并不存在。&lt;/p&gt;
&lt;p&gt;虽然原始封装类型会被自动创建，在这些值上进行 &lt;code&gt;instanceof&lt;/code&gt; 检查对应类型的返回值却是 &lt;code&gt;false&lt;/code&gt;。&lt;br&gt;这是因为&lt;strong&gt;临时对象仅在值被读取时创建&lt;/strong&gt;。&lt;code&gt;instanceof&lt;/code&gt; 操作符并没有真的读取任何东西，也就没有临时对象的创建。&lt;/p&gt;
&lt;p&gt;当然你也可以手动创建原始封装类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str = new String(&amp;quot;me&amp;quot;);
str.age = 18;

console.log(typeof str); // object
console.log(str.age); // 18
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如你所见，手动创建原始封装类型实际会创建出一个 &lt;code&gt;object&lt;/code&gt;。这意味着 &lt;code&gt;typeof&lt;/code&gt; 无法鉴别出你实际保存的数据的类型。&lt;/p&gt;
&lt;p&gt;另外，手动创建原始封装类型和使用原始值是有一定区别的。所以尽量避免使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var found = new Boolean(false);
if(found){
    console.log(&amp;quot;Found&amp;quot;); // 执行到了，尽管对象的值为 false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为一个对象(如 &lt;code&gt;{}&lt;/code&gt; )在条件判断语句中总被认为是 &lt;code&gt;true&lt;/code&gt;;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MDN:Any object whose value is not undefined or null, including a Boolean oject whose value is false, evaluates to true when passed to a conditional statement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;第一章的东西都是我们一些比较熟悉的知识。但是也有一些需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确区分原始类型和引用类型&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;5&lt;/code&gt; 种原始类型都可以用typeof来鉴别，而空类型必须直接跟 &lt;code&gt;null&lt;/code&gt; 进行全等比较。&lt;/li&gt;
&lt;li&gt;函数也是对象，可用 &lt;code&gt;typeof&lt;/code&gt; 鉴别。其它引用类型，可用 &lt;code&gt;instanceof&lt;/code&gt; 和一个构造函数来鉴别。（当然可以用  &lt;code&gt;Object.prototype.toString.call()&lt;/code&gt; 鉴别，它会返回[object Array]之类的）。&lt;/li&gt;
&lt;li&gt;为了让原始类型看上去更像引用类型，JavaScript提供了 &lt;code&gt;3&lt;/code&gt; 种封装类型。JavaScript会在背后创建这些对象使得你能够像使用普通对象那样使用原始值。但这些临时对象在使用它们的语句结束时就立刻被销毁。虽然可手动创建，但不建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;函数也是对象，使对象不同于其它对象的决定性特点是函数存在一个被称为 &lt;code&gt;[[Call]]&lt;/code&gt; 的内部属性。&lt;br&gt;&lt;strong&gt;内部属性无法通过代码访问而是定义了代码执行时的行为&lt;/strong&gt;。ECMAScript为JavaScript的对象定义了多种内部属性，这些&lt;strong&gt;内部属性都用双重中括号来标注&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[[Call]]属性是函数独有的，表明该对象可以被执行。由于仅函数拥有该属性，ECMAScript 定义typeof操作符对任何具有[[Call]]属性的对象返回”function”&lt;/strong&gt;。过去因某些浏览器曾在正则表达式中包含 &lt;code&gt;[[Call]]&lt;/code&gt; 属性，导致正则表达式被错误鉴别为函数。&lt;/p&gt;
&lt;h3 id=&quot;声明还是表达式&quot;&gt;&lt;a href=&quot;#声明还是表达式&quot; class=&quot;headerlink&quot; title=&quot;声明还是表达式&quot;&gt;&lt;/a&gt;声明还是表达式&lt;/h3&gt;&lt;p&gt;两者的一个重要区别是：函数声明会被提升至上下文（要么是该函数被声明时所在的函数范围，要么是全局范围）的顶部。&lt;/p&gt;
&lt;h3 id=&quot;函数就是值&quot;&gt;&lt;a href=&quot;#函数就是值&quot; class=&quot;headerlink&quot; title=&quot;函数就是值&quot;&gt;&lt;/a&gt;函数就是值&lt;/h3&gt;&lt;p&gt;可以像使用对象一样使用函数（因为函数本来就是对象，Function构造函数更加容易说明）。&lt;/p&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;p&gt;函数参数保存在类数组对象 &lt;code&gt;argument&lt;/code&gt; （&lt;code&gt;Array.isArray(arguments)&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt;）中。可以接收任意数量的参数。&lt;br&gt;函数的 &lt;code&gt;length&lt;/code&gt; 属性表明其期望的参数个数。&lt;/p&gt;
&lt;h3 id=&quot;重载&quot;&gt;&lt;a href=&quot;#重载&quot; class=&quot;headerlink&quot; title=&quot;重载&quot;&gt;&lt;/a&gt;重载&lt;/h3&gt;&lt;p&gt;大多数面向对象语言支持函数重载，它能让一个函数具有多个签名。函数签名由函数的名字、参数的个数及其类型组成。&lt;br&gt;而JavaScript可以接收任意数量的参数且参数类型完全没有限制。这说明JavaScript函数根本就没有签名，因此也不存在重载。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sayMessage(message){
    console.log(message);
}
function sayMessage(){
    console.log(&amp;quot;Default Message&amp;quot;);
}

sayMessage(&amp;quot;Hello!&amp;quot;); // 输出&amp;quot;Default Message&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Javscript里，当你试图定义多个同名的函数时，只有最后的定义有效，之前的函数声明被完全删除（函数也是对象，变量只是存指针)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var sayMessage = new Function(&amp;quot;message&amp;quot;, &amp;quot;console.log(message)&amp;quot;);
var sayMessage = new Function(&amp;quot;console.log(\&amp;quot;Default Message\&amp;quot;);&amp;quot;);

sayMessage(&amp;quot;Hello!&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，你可以根据传入参数的数量来模仿重载。&lt;/p&gt;
&lt;h3 id=&quot;对象方法&quot;&gt;&lt;a href=&quot;#对象方法&quot; class=&quot;headerlink&quot; title=&quot;对象方法&quot;&gt;&lt;/a&gt;对象方法&lt;/h3&gt;&lt;p&gt;对象的值是函数，则该属性被称为方法。&lt;/p&gt;
&lt;h4 id=&quot;this对象&quot;&gt;&lt;a href=&quot;#this对象&quot; class=&quot;headerlink&quot; title=&quot;this对象&quot;&gt;&lt;/a&gt;this对象&lt;/h4&gt;&lt;p&gt;JavaScript 所有的函数作用域内都有一个 &lt;code&gt;this&lt;/code&gt; 对象代表调用该函数的对象。在全局作用域中，&lt;code&gt;this&lt;/code&gt; 代表全局对象（浏览器里的window）。当一个函数作为对象的方法调用时，默认 &lt;code&gt;this&lt;/code&gt; 的值等于该对象。&lt;br&gt;&lt;strong&gt;this在函数调用时才被设置。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sayNameForAll(){
    console.log(this.name);
}

var person1 = {
    name: &amp;quot;Nicholas&amp;quot;,
    sayName: sayNameForAll
}

var name = &amp;quot;Jack&amp;quot;;

person1.sayName(); // 输出 &amp;quot;Nicholas&amp;quot;
sayNameforAll(); // 输出 &amp;quot;Jack&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;改变this&quot;&gt;&lt;a href=&quot;#改变this&quot; class=&quot;headerlink&quot; title=&quot;改变this&quot;&gt;&lt;/a&gt;改变this&lt;/h4&gt;&lt;p&gt;有 &lt;code&gt;3&lt;/code&gt; 种函数方法运行你改变 &lt;code&gt;this&lt;/code&gt; 值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fun.call(thisArg[, arg1[, arg2[, …]]]);&lt;/li&gt;
&lt;li&gt;fun.apply(thisArg, [argsArray]);&lt;/li&gt;
&lt;li&gt;fun.bind(thisArg[, arg1[, arg2[, …]]])&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;call&lt;/code&gt; 或 &lt;code&gt;apply&lt;/code&gt; 方法，就不需要将函数加入每个对象——你显示地指定了 &lt;code&gt;this&lt;/code&gt; 的值而不是让JavaScript引擎自动指定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call&lt;/code&gt; 与 &lt;code&gt;apply&lt;/code&gt; 的不同地方是，&lt;code&gt;call&lt;/code&gt; 需要把所有参数一个个列出来，而 &lt;code&gt;apply&lt;/code&gt; 的参数需要一个数组或者类似数组的对象（如 &lt;code&gt;arguments&lt;/code&gt; 对象）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; 是ECMAScript 5 新增的，它会创建一个新函数返回。其参数与 &lt;code&gt;call&lt;/code&gt; 类似，而且其所有参数代表需要被&lt;strong&gt;永久&lt;/strong&gt;设置在新函数中的命名参数（绑定了的参数（没绑定的参数依然可以传入），就算调用时再传入其它参数，也不会影响这些绑定的参数）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sayNameForAll(label){
    console.log(label + &amp;quot;:&amp;quot; + this.name);
}
var person = {
    name: &amp;quot;Nicholas&amp;quot;
}

var sayNameForPerson = sayNameForAll.bind(person);
sayNameForPerson(&amp;quot;Person&amp;quot;); // 输出&amp;quot;Person:Nicholas&amp;quot;

var sayName = sayNameForAll.bind(person, &amp;quot;Jc&amp;quot;);

sayName(&amp;quot;change&amp;quot;); // 输出&amp;quot;Jc:Nicholas&amp;quot; 因为绑定的形参，会忽略调用时再传入参数
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数也是对象，所以它可以被访问、复制和覆盖。&lt;/li&gt;
&lt;li&gt;函数与其他对象最大的区别在于它们有一个特殊的内部属性 &lt;code&gt;[[Call]]&lt;/code&gt;，包含了该函数的执行指令。&lt;/li&gt;
&lt;li&gt;函数声明会被提升至上下文的顶部。&lt;/li&gt;
&lt;li&gt;函数是对象，所以存在一个 &lt;code&gt;Function&lt;/code&gt; 构造函数。但这会使你的代码难以理解和调试，除非函数的真实形式要直到运行时才能确定的时候才会利用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h2&gt;&lt;p&gt;JavaScript中的对象是动态的，可在代码执行的任意时刻发生改变。基于类的语言会根据类的定义锁定对象。&lt;/p&gt;
&lt;h3 id=&quot;定义属性&quot;&gt;&lt;a href=&quot;#定义属性&quot; class=&quot;headerlink&quot; title=&quot;定义属性&quot;&gt;&lt;/a&gt;定义属性&lt;/h3&gt;&lt;p&gt;当一个属性第一次被添加到对象时，JavaScript会在对象上调用一个名为 &lt;code&gt;[[Put]]&lt;/code&gt; 的内部方法。&lt;code&gt;[[Put]]&lt;/code&gt; 方法会在对象上创建一个新节点来保存属性。&lt;br&gt;当一个已有的属性被赋予一个新值时，调用的是一个名为 &lt;code&gt;[[Set]]&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;h3 id=&quot;属性探测&quot;&gt;&lt;a href=&quot;#属性探测&quot; class=&quot;headerlink&quot; title=&quot;属性探测&quot;&gt;&lt;/a&gt;属性探测&lt;/h3&gt;&lt;p&gt;检查对象是否已有一个属性。JavaScript开发新手错误地使用以下模式检测属性是否存在。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(person.age){
    // do something with ag
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的问题在于JavaScript的类型强制会影响该模式的输出结果。&lt;br&gt;当if判断中的值如下时，会判断为&lt;strong&gt;真&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;非空字符串&lt;/li&gt;
&lt;li&gt;非零&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当if判断中的值如下时，会判断为&lt;strong&gt;假&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;NaN&lt;/li&gt;
&lt;li&gt;空字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此判断属性是否存在的方法是使用 &lt;code&gt;in&lt;/code&gt; 操作符。&lt;br&gt;&lt;code&gt;in&lt;/code&gt; 操作符会检查&lt;strong&gt;自有属性和原型属性&lt;/strong&gt;。&lt;br&gt;所有的对象都拥有的 &lt;code&gt;hasOwnProperty()&lt;/code&gt; 方法（其实是 &lt;code&gt;Object.prototype&lt;/code&gt; 原型对象的），该方法在给定的属性存在且为&lt;strong&gt;自有属性&lt;/strong&gt;时返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nicholas&amp;quot;
}

console.log(&amp;quot;name&amp;quot; in person); // true
console.log(person.hasOwnpropert(&amp;quot;name&amp;quot;)); // true

console.log(&amp;quot;toString&amp;quot; in person); // true
console.log(person.hasOwnproperty(&amp;quot;toString&amp;quot;)); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除属性&quot;&gt;&lt;a href=&quot;#删除属性&quot; class=&quot;headerlink&quot; title=&quot;删除属性&quot;&gt;&lt;/a&gt;删除属性&lt;/h3&gt;&lt;p&gt;设置一个属性的值为 &lt;code&gt;null&lt;/code&gt; 并不能从对象中彻底移除那个属性，这只是调用 &lt;code&gt;[[Set]]&lt;/code&gt; 将 &lt;code&gt;null&lt;/code&gt; 值替换了该属性原来的值而已。&lt;br&gt;&lt;code&gt;delete&lt;/code&gt; 操作符针对单个对象属性调用名为 &lt;code&gt;[[Delete]]&lt;/code&gt; 的内部方法。删除成功时，返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nicholas&amp;quot;
}

person.name = null;
console.log(&amp;quot;name&amp;quot; in person); // true
delete person.name;
console.log(person.name); // undefined 访问一个不存在的属性将返回 undefined
console.log(&amp;quot;name&amp;quot; in person); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;属性枚举&quot;&gt;&lt;a href=&quot;#属性枚举&quot; class=&quot;headerlink&quot; title=&quot;属性枚举&quot;&gt;&lt;/a&gt;属性枚举&lt;/h3&gt;&lt;p&gt;所有人为添加的属性默认都是可枚举的。可枚举的内部特征 &lt;code&gt;[[Enumerable]]&lt;/code&gt; 都被设置为 &lt;code&gt;true&lt;/code&gt;。&lt;br&gt;&lt;code&gt;for-in&lt;/code&gt; 循环会枚举一个对象所有的可枚举属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的备注：在Chrome中，对象属性会按ASCII表排序，而不是定义时的顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ECMAScript 5 的 Object() 方法可以获取可枚举属性的名字的数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Ljc&amp;quot;,
    age: 18
}

Object.keys(person); // [&amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;for-in&lt;/code&gt; 与 &lt;code&gt;Object.keys()&lt;/code&gt; 的一个区别是：前者也会遍历原型属性，而后者返回自有(实例)属性。&lt;/p&gt;
&lt;p&gt;实际上，对象的大部分原生方法的 &lt;code&gt;[[Enumerable]]&lt;/code&gt; 特征都被设置为 &lt;code&gt;false&lt;/code&gt;。可用 &lt;code&gt;propertyIsEnumerable()&lt;/code&gt; 方法检查一个属性是否为可枚举的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [&amp;quot;abc&amp;quot;, 2];
console.log(arr.propertyIsEnumerable(&amp;quot;length&amp;quot;)); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;属性类型&quot;&gt;&lt;a href=&quot;#属性类型&quot; class=&quot;headerlink&quot; title=&quot;属性类型&quot;&gt;&lt;/a&gt;属性类型&lt;/h3&gt;&lt;p&gt;属性有两种类型：&lt;strong&gt;数据属性&lt;/strong&gt;和&lt;strong&gt;访问器属性&lt;/strong&gt;。&lt;br&gt;数据属性包含一个值。&lt;code&gt;[[Put]]&lt;/code&gt; 方法的默认行为是创建&lt;strong&gt;数据属性&lt;/strong&gt;。&lt;br&gt;访问器属性不包含值而是定义了一个当属性被读取时调用的函数（称为&lt;code&gt;getter&lt;/code&gt;）和一个当属性被写入时调用的函数（称为&lt;code&gt;setter&lt;/code&gt;）。访问器属性仅需要 &lt;code&gt;getter&lt;/code&gt; 或 &lt;code&gt;setter&lt;/code&gt; 两者中的任意一个，当然也可以两者。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 对象字面形式中定义访问器属性有特殊的语法：
var person = {
    _name: &amp;quot;Nicholas&amp;quot;,

    get name(){
        console.log(&amp;quot;Reading name&amp;quot;);
        return this._name;
    },
    set name(value){
        console.log(&amp;quot;Setting name to %s&amp;quot;, value);
        this._name = value;
    }
};

console.log(person.name); // &amp;quot;Reading name&amp;quot; 然后输出 &amp;quot;Nicholas&amp;quot;

person.name = &amp;quot;Greg&amp;quot;;
console.log(person.name); // &amp;quot;Setting name to Greg&amp;quot; 然后输出 &amp;quot;Greg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;前置下划线_ 是一个约定俗成的命名规范，表示该属性是私有的，实际上它还是公开的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;访问器就是定义了我们在对象读取或设置属性时，触发的动作（函数），&lt;code&gt;_name&lt;/code&gt; 相当于一个内部变量。&lt;br&gt;当你希望赋值（读取）操作会触发一些行为，访问器就会非常有用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当只定义getter或setter其一时，该属性就会变成只读或只写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;属性特征&quot;&gt;&lt;a href=&quot;#属性特征&quot; class=&quot;headerlink&quot; title=&quot;属性特征&quot;&gt;&lt;/a&gt;属性特征&lt;/h3&gt;&lt;p&gt;在ECMAScript 5 之前没有办法指定一个属性是否可枚举。实际上根本没有方法访问属性的任何内部特征。为了改变这点，ECMAScript 5引入了多种方法来和属性特征值直接互动。&lt;/p&gt;
&lt;h4 id=&quot;通用特征&quot;&gt;&lt;a href=&quot;#通用特征&quot; class=&quot;headerlink&quot; title=&quot;通用特征&quot;&gt;&lt;/a&gt;通用特征&lt;/h4&gt;&lt;p&gt;数据属性和访问器属性均由以下两个属性特制：&lt;br&gt;&lt;code&gt;[[Enumerable]]&lt;/code&gt; 决定了是否可以遍历该属性；&lt;br&gt;&lt;code&gt;[[Configurable]]&lt;/code&gt; 决定了该属性是否可配置。&lt;/p&gt;
&lt;p&gt;所有人为定义的属性默认都是可枚举、可配置的。&lt;/p&gt;
&lt;p&gt;可以用 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 方法改变属性特征。&lt;br&gt;其参数有三：拥有该属性的对象、属性名和包含需要设置的特性的属性描述对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nicholas&amp;quot;
}
Object.defineProperty(person, &amp;quot;name&amp;quot;, {
    enumerable: false
})

console.log(&amp;quot;name&amp;quot; in person); // true
console.log(person.propertyIsEnumerable(&amp;quot;name&amp;quot;)); // false

var properties = Object.keys(person);
console.log(properties.length); // 0

Object.defineProperty(person, &amp;quot;name&amp;quot;,{
    configurable: false
})

delete person.name; // false
console.log(&amp;quot;name&amp;quot; in person); // true

Object.defineProperty(person, &amp;quot;name&amp;quot;,{ // error! 
// 在 chrome：Uncaught TypeError: Cannot redefine property: name
    configurable: true
})
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;无法将一个不可配置的属性变为可配置，相反则可以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;数据属性特征&quot;&gt;&lt;a href=&quot;#数据属性特征&quot; class=&quot;headerlink&quot; title=&quot;数据属性特征&quot;&gt;&lt;/a&gt;数据属性特征&lt;/h4&gt;&lt;p&gt;数据属性额外拥有两个访问器属性不具备的特征。&lt;br&gt;&lt;code&gt;[[Value]]&lt;/code&gt; 包含属性的值(哪怕是函数)。&lt;br&gt;&lt;code&gt;[[Writable]]&lt;/code&gt; 布尔值，指示该属性是否可写入。所有属性默认都是可写的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {};

Object.defineProperty(person, &amp;quot;name&amp;quot;, {
    value: &amp;quot;Nicholas&amp;quot;,
    enumerable: true,
    configurable: true,
    writable: true
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 被调用时，如果属性本来就有，则会按照新定义属性特征值去覆盖默认属性特征（&lt;code&gt;enumberable&lt;/code&gt;、&lt;code&gt;configurable&lt;/code&gt; 和 &lt;code&gt;writable&lt;/code&gt; 均为 &lt;code&gt;true&lt;/code&gt;）。但如果用该方法定义新的属性时，没有为所有的特征值指定一个值，则所有布尔值的特征值会被默认设置为 &lt;code&gt;false&lt;/code&gt;。即不可枚举、不可配置、不可写的。&lt;br&gt;当你用 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 改变一个已有的属性时，只有你指定的特征会被改变。&lt;/p&gt;
&lt;h4 id=&quot;访问器属性特征&quot;&gt;&lt;a href=&quot;#访问器属性特征&quot; class=&quot;headerlink&quot; title=&quot;访问器属性特征&quot;&gt;&lt;/a&gt;访问器属性特征&lt;/h4&gt;&lt;p&gt;访问器属性额外拥有两个特征。&lt;code&gt;[[Get]]&lt;/code&gt; 和 &lt;code&gt;[[Set]]&lt;/code&gt;，内含 &lt;code&gt;getter&lt;/code&gt; 和 &lt;code&gt;setter&lt;/code&gt; 函数。&lt;br&gt;使用访问其属性特征比使用对象字面形式定义访问器属性的优势在于：可以为已有的对象定义这些属性。而后者只能在创建时定义访问器属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    _name: &amp;quot;Nicholas&amp;quot;
};

Object.defineProperty(person, &amp;quot;name&amp;quot;, {
    get: function(){
        return this._name;
    },
    set: function(value){
        this._name = value;
    },
    enumerable: true,
    configurable: true
})

for(var x in person){
    console.log(x); // _name \n(换行) name（访问器属性）
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置一个不可配置、不可枚举、不可以写的属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.defineProperty(person, &amp;quot;name&amp;quot;,{
    get: function(){
        return this._name;
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于一个新的访问器属性，没有显示设置值为布尔值的属性，默认为 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;定义多重属性&quot;&gt;&lt;a href=&quot;#定义多重属性&quot; class=&quot;headerlink&quot; title=&quot;定义多重属性&quot;&gt;&lt;/a&gt;定义多重属性&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt; 方法可以定义任意数量的属性，甚至可以同时改变已有的属性并创建新属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {};

Object.defineProperties(person, {

    // data property to store data
    _name: {
        value: &amp;quot;Nicholas&amp;quot;,
        enumerable: true,
        configurable: true,
        writable: true
    },

    // accessor property
    name: {
        get: function(){
            return this._name;
        },
        set: function(value){
            this._name = value;
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;获取属性特征&quot;&gt;&lt;a href=&quot;#获取属性特征&quot; class=&quot;headerlink&quot; title=&quot;获取属性特征&quot;&gt;&lt;/a&gt;获取属性特征&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; 方法。该方法接受两个参数：对象和属性名。如果属性存在，它会返回一个属性描述对象，内涵&lt;code&gt;4&lt;/code&gt;个属性：&lt;code&gt;configurable&lt;/code&gt; 和 &lt;code&gt;enumerable&lt;/code&gt;，另外两个属性则根据属性类型决定。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nicholas&amp;quot;
}

var descriptor = Object.getOwnPropertyDescriptor(person, &amp;quot;name&amp;quot;);

console.log(descriptor.enumerable); // true
console.log(descriptor.configuable); // true
console.log(descriptor.value); // &amp;quot;Nicholas&amp;quot;
console.log(descriptor.wirtable); // true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;禁止修改对象&quot;&gt;&lt;a href=&quot;#禁止修改对象&quot; class=&quot;headerlink&quot; title=&quot;禁止修改对象&quot;&gt;&lt;/a&gt;禁止修改对象&lt;/h3&gt;&lt;p&gt;对象和属性一样具有指导其行为的内部特性。其中， &lt;code&gt;[[Extensible]]&lt;/code&gt; 是布尔值，指明该对象本身是否可以被修改。默认是 &lt;code&gt;true&lt;/code&gt;。当值为 &lt;code&gt;false&lt;/code&gt; 时，就能禁止新属性的添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议在 “use strict”; 严格模式下进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;禁止扩展&quot;&gt;&lt;a href=&quot;#禁止扩展&quot; class=&quot;headerlink&quot; title=&quot;禁止扩展&quot;&gt;&lt;/a&gt;禁止扩展&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt; 创建一个不可扩展的对象（即&lt;strong&gt;不能添加新属性&lt;/strong&gt;）。&lt;br&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt; 检查 &lt;code&gt;[[Extensible]]&lt;/code&gt; 的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nocholas&amp;quot;
}

Object.preventExtensions(person);

person.sayName = function(){
    console.log(this.name)
}

console.log(&amp;quot;sayName&amp;quot; in person); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;对象封印&quot;&gt;&lt;a href=&quot;#对象封印&quot; class=&quot;headerlink&quot; title=&quot;对象封印&quot;&gt;&lt;/a&gt;对象封印&lt;/h4&gt;&lt;p&gt;一个被封印的对象是不可扩展的且其所有属性都是不可配置的（即不能添加、删除属性或修改其属性类型（从数据属性变成访问器属性或相反））。&lt;strong&gt;只能读写它的属性&lt;/strong&gt;。&lt;br&gt;Object.seal()。调用此方法后，该对象的 &lt;code&gt;[[Extensible]]&lt;/code&gt; 特征被设置为 &lt;code&gt;false&lt;/code&gt;，其所有属性的 &lt;code&gt;[[configurable]]&lt;/code&gt; 特征被设置为 &lt;code&gt;false&lt;/code&gt;。&lt;br&gt;&lt;code&gt;Object.isSealed()&lt;/code&gt; 判断一个对象是否被封印。&lt;/p&gt;
&lt;h4 id=&quot;对象冻结&quot;&gt;&lt;a href=&quot;#对象冻结&quot; class=&quot;headerlink&quot; title=&quot;对象冻结&quot;&gt;&lt;/a&gt;对象冻结&lt;/h4&gt;&lt;p&gt;被冻结的对象不能添加或删除属性，不能修改属性类型，也不能写入任何数据属性。简言而之，被冻结对象是一个&lt;strong&gt;数据属性都为只读&lt;/strong&gt;的被封印对象。&lt;br&gt;&lt;code&gt;Object.freeze()&lt;/code&gt; 冻结对象。&lt;br&gt;&lt;code&gt;Object.isFrozen()&lt;/code&gt; 判断对象是否被冻结。&lt;/p&gt;
&lt;h3 id=&quot;总结-2&quot;&gt;&lt;a href=&quot;#总结-2&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; 操作符检测自有属性和原型属性，而 &lt;code&gt;hasOwnProperty()&lt;/code&gt; 只检查自有属性。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;delete&lt;/code&gt; 操作符删除对象属性。&lt;/li&gt;
&lt;li&gt;属性有两种类型：数据属性和访问器属性。&lt;/li&gt;
&lt;li&gt;所有属性都有一些相关特征。&lt;code&gt;[[Enumerable]]&lt;/code&gt; 和 &lt;code&gt;[[Configurable]]&lt;/code&gt; 的两种属性都有的，而数据属性还有 &lt;code&gt;[[Value]]&lt;/code&gt; 和 &lt;code&gt;[[Writable]]&lt;/code&gt;，访问器属性还有 &lt;code&gt;[[Get]]&lt;/code&gt; 和 &lt;code&gt;[[Set]]&lt;/code&gt;。可通过 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 和 &lt;code&gt;Object.defineProperties()&lt;/code&gt; 改变这些特征。用 &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; 获取它们。&lt;/li&gt;
&lt;li&gt;有 &lt;code&gt;3&lt;/code&gt; 种可以锁定对象属性的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;构造函数和原型对象&quot;&gt;&lt;a href=&quot;#构造函数和原型对象&quot; class=&quot;headerlink&quot; title=&quot;构造函数和原型对象&quot;&gt;&lt;/a&gt;构造函数和原型对象&lt;/h2&gt;&lt;p&gt;由于JavaScript(ES5)缺乏类，但可用构造函数和原型对象给对象带来与类相似的功能。&lt;/p&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;p&gt;构造函数的函数名首字母应大写，以此区分其他函数。&lt;br&gt;当没有需要给构造函数传递参数，可忽略小括号：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Person = {
    // 故意留空
}
var person = new Person;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尽管 Person 构造函数没有显式返回任何东西，但 new 操作符会自动创建给定类型的对象并返回它们。&lt;/p&gt;
&lt;p&gt;每个对象在创建时都自动拥有一个构造函数属性（constructor，其实是它们的原型对象上的属性），其中包含了一个指向其构造函数的引用。&lt;br&gt;通过对象字面量形式（{}）或Object构造函数创建出来的泛用对象，其构造函数属性（constructor）指向 Object；而那些通过自定义构造函数创建出来的对象，其构造函数属性指向创建它的构造函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(person.constructor === Person); // true
console.log(({}).constructor === Object); // true
console.log(([1,2,3]).constructor === Object); // true

// 证明 constructor是在原型对象上
console.log(person.hasOwnPrototype(&amp;quot;constructor&amp;quot;)); // false
console.log(person.constructor.prototype.hasOwnPrototype(&amp;quot;constructor&amp;quot;)); // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尽管对象实例及其构造函数之间存在这样的关系，但还是建议使用 &lt;code&gt;instanceof&lt;/code&gt; 来检查对象类型。这是因为构造函数属性可以被覆盖。（person.constructor = “”）。&lt;/p&gt;
&lt;p&gt;当你调用构造函数时，new 会自动自动创建 this 对象，且其类型就是构造函数的类型（构造函数就好像类，相当于一种数据类型）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你也可以在构造函数中显式调用 return。如果返回值是一个对象，它会代替新创建的对象实例而返回，如果返回值是一个原始类型，它会被忽略，新创建的对象实例会被返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;始终确保要用 new 调用构造函数；否则，你就是在冒着改变全局对象的风险，而不是创建一个新的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = Person(&amp;quot;Nicholas&amp;quot;); // 缺少 new

console.log(person instanceof Person); // false
console.log(person); // undefined，因为没用 new，就相当于一个普通函数，默认返回 undefined
console.log(name); // &amp;quot;Nicholas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当Person不是被 new 调用时，构造函数中的 this 对象等于全局 this 对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在严格模式下，会报错。因为严格模式下，并没有为全局对象设置 this，this 保持为 undefined。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下代码，通过 new 实例化 100 个对象，则会有 100 个函数做相同的事。因此可用 &lt;code&gt;prototype&lt;/code&gt; 共享同一个方法会更高效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Nicholas&amp;quot;,
    sayName: function(){
        console.log(this.name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h3&gt;&lt;p&gt;可以把原型对象看作是对象的基类。几乎所有的函数（除了一些内建函数）都有一个名为 prototype 的属性，该属性是一个原型对象用来创建新的对象实例。所有创建的对象实例（同一构造函数，当然，可能访问上层的原型对象）&lt;strong&gt;共享&lt;/strong&gt;该原型对象，且这些对象实例可以访问原型对象的属性。例如，hasOwnProperty()定义在 Object 的原型对象中，但却可被任何对象当作自己的属性访问。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var book = {
    title : &amp;quot;book_name&amp;quot;
}

&amp;quot;hasOwnProperty&amp;quot; in book; // true
book.hasOwnProperty(&amp;quot;hasOwnProperty&amp;quot;); // false
Object.property.hasOwnProperty(&amp;quot;hasOwnProperty&amp;quot;); // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;鉴别一个原型属性&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function hasPrototypeProperty(object, name){
    return name in object &amp;amp;&amp;amp; !object.hasOwnProperty(name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Prototype-属性&quot;&gt;&lt;a href=&quot;#Prototype-属性&quot; class=&quot;headerlink&quot; title=&quot;[[Prototype]] 属性&quot;&gt;&lt;/a&gt;[[Prototype]] 属性&lt;/h4&gt;&lt;p&gt;一个对象实例通过内部属性 [[Prototype]] 跟踪其原型对象。该属性是一个指向该实例使用的原型对象的指针。当你用 new 创建一个新的对象时，构造函数的原型对象就会被赋给该对象的 [[Prototype]] 属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/prototype.jpg&quot; alt=&quot;prototype&quot;&gt;&lt;/p&gt;
&lt;p&gt;由上图可以看出，[[Prototype]] 属性是如何让多个对象实例引用同一个原型对象来减少重复代码。&lt;/p&gt;
&lt;p&gt;Object.getPrototypeOf() 方法可读取 [[Prototype]] 属性的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {};
var prototype = Object.getPrototypeOf(Object);

console.log(prototype === Object.prototype); // true
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;大部分JavaScript引擎在所有对象上都支持一个名为 &lt;code&gt;__proto__&lt;/code&gt; 的属性。该属性使你可以直接读写 [[Prototype]] 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;isPrototypeOf() 方法会检查某个对象是否是另一个对象的原型对象，该方法包含在所有对象中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {}
console.log(Object.prototype.isPrototypeOf(obj)); // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当读取一个对象的属性时，JavaScript 引擎首先在该对象的自有属性查找属性名。如果找到则返回。否则会搜索 [[Prototype]] 中的对象，找到则返回，找不到则返回 undefined。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = new Object();
console.log(obj.toString()); // &amp;quot;[object Object]&amp;quot;

obj.toString = function(){
    return &amp;quot;[object Custom]&amp;quot;;
}
console.log(obj.toString()); // &amp;quot;[object Custom]&amp;quot;

delete obj.toString; // true
console.log(obj.toString()); // &amp;quot;[object Object]&amp;quot;

delete obj.toString; // 无效，delete不能删除一个对象从原型继承而来的属性
cconsole.log(obj.toString()); // // &amp;quot;[object Object]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;MDN：delete 操作符不能删除的属性有：①显式声明的全局变量不能被删除,该属性不可配置（not configurable）； ②内置对象的内置属性不能被删除； ③不能删除一个对象从原型继承而来的属性(不过你可以从原型上直接删掉它)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个重要概念：无法给一个对象的原型属性赋值。但我们可以通过 &lt;code&gt;obj.constructor.prototype.sayHi = function(){console.log(&amp;quot;Hi!&amp;quot;)}&lt;/code&gt; 向原型对象添加属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;（图片中间可以看出，为对象obj添加的toString属性代替了原型属性）&lt;/p&gt;
&lt;h4 id=&quot;在构造函数中使用原型对象&quot;&gt;&lt;a href=&quot;#在构造函数中使用原型对象&quot; class=&quot;headerlink&quot; title=&quot;在构造函数中使用原型对象&quot;&gt;&lt;/a&gt;在构造函数中使用原型对象&lt;/h4&gt;&lt;h5 id=&quot;在原型对象上定义公用方法&quot;&gt;&lt;a href=&quot;#在原型对象上定义公用方法&quot; class=&quot;headerlink&quot; title=&quot;在原型对象上定义公用方法&quot;&gt;&lt;/a&gt;在原型对象上定义公用方法&lt;/h5&gt;&lt;h5 id=&quot;在原型对象上定义数据类型&quot;&gt;&lt;a href=&quot;#在原型对象上定义数据类型&quot; class=&quot;headerlink&quot; title=&quot;在原型对象上定义数据类型&quot;&gt;&lt;/a&gt;在原型对象上定义数据类型&lt;/h5&gt;&lt;p&gt;开发中需要注意原型对象的数据是否共享。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    this.name = name
}

Person.prototype.sayName = function(){
    console.log(this.name);
}

Person.prototype.position = &amp;quot;school&amp;quot;;
Person.prototype.arr = [];

var person1 = new Person(&amp;quot;xiaoming&amp;quot;);
var person2 = new Person(&amp;quot;Jc&amp;quot;);

console.log(&amp;quot;原始类型&amp;quot;)
console.log(person1.position); // &amp;quot;school&amp;quot;
console.log(person2.position); // &amp;quot;school&amp;quot;

person1.position = 2; // 这是在当前属性设置position，引用类型同理
console.log(person1.hasOwnProperty(&amp;quot;position&amp;quot;)); // true
console.log(person2.hasOwnProperty(&amp;quot;position&amp;quot;)); // false

console.log(&amp;quot;引用类型&amp;quot;);
person1.arr.push(&amp;quot;pizza&amp;quot;); // 这是在原型对象上设置，而不是直接在对象上
person2.arr.push(&amp;quot;quinoa&amp;quot;); // 这是在原型对象上设置
console.log(person1.hasOwnProperty(&amp;quot;arr&amp;quot;)); // false
console.log(person2.hasOwnProperty(&amp;quot;arr&amp;quot;)); // false
console.log(person1.arr); // [&amp;quot;pizza&amp;quot;, &amp;quot;quinoa&amp;quot;]
console.log(person2.arr); // [&amp;quot;pizza&amp;quot;, &amp;quot;quinoa&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面是在原型对象上一一添加属性，下面一种更简洁的方式：以一个对象字面形式替换原型对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    this.name
}

Person.prototype = {
    sayName: function(){
        console.log(this.name);
    },
    toString: function(){
        return &amp;quot;[Person ]&amp;quot; + this.name + &amp;quot;]&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式有一种副作用：因为原型对象上具有一个 &lt;code&gt;constructor&lt;/code&gt; 属性，这是其他对象实例所没有的。当一个函数被创建时，它的  &lt;code&gt;prototype&lt;/code&gt; 属性也会被创建，且该原型对象的 &lt;code&gt;constructor&lt;/code&gt; 属性指向该函数。当使用字面量时，因没显式设置原型对象的 &lt;code&gt;constructor&lt;/code&gt; 属性，因此其 &lt;code&gt;constructor&lt;/code&gt; 属性是指向 &lt;code&gt;Object&lt;/code&gt; 的。&lt;br&gt;因此，当通过此方式设置原型对象时，可手动设置 &lt;code&gt;constructor&lt;/code&gt; 属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    this.name
}

// 建议第一个属性就是设置其 constructor 属性。
Person.prototype = {
    constructor: Person,

    sayName: function(){
        console.log(this.name);
    },
    toString: function(){
        return &amp;quot;[Person ]&amp;quot; + this.name + &amp;quot;]&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造函数、原型对象和对象实例之间的关系最有趣的一方面也许是：&lt;br&gt;对象实例和构造函数直接没有直接联系。（对象实例只有 &lt;code&gt;[[Prototype]]&lt;/code&gt; 属性指向其相应的原型对象，而原型对象的 &lt;code&gt;constructor&lt;/code&gt; 属性指向构造函数，而构造函数的 &lt;code&gt;prototype&lt;/code&gt; 指向原型对象）&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/obj_constructor_prototype.jpg&quot; alt=&quot;obj_constructor_prototype&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;改变原型对象&quot;&gt;&lt;a href=&quot;#改变原型对象&quot; class=&quot;headerlink&quot; title=&quot;改变原型对象&quot;&gt;&lt;/a&gt;改变原型对象&lt;/h4&gt;&lt;p&gt;因为每个对象的 &lt;code&gt;[[Prototype]]&lt;/code&gt; 只是一个指向原型对象的指针，所以原型对象的改动会立刻反映到所有引用它的对象。&lt;br&gt;当对一个对象使用封印 &lt;code&gt;Object.seal()&lt;/code&gt; 或冻结 &lt;code&gt;Object.freeze()&lt;/code&gt; 时，完全是在操作对象的自有属性，但任然可以通过在原型对象上添加属性来扩展这些对象实例。&lt;/p&gt;
&lt;h4 id=&quot;内建对象（如Array、String）的原型对象&quot;&gt;&lt;a href=&quot;#内建对象（如Array、String）的原型对象&quot; class=&quot;headerlink&quot; title=&quot;内建对象（如Array、String）的原型对象&quot;&gt;&lt;/a&gt;内建对象（如Array、String）的原型对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;String.prototype.capitalize = function(){
    return this.charAt(0).toUpperCase() + this.substring(1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;总结-3&quot;&gt;&lt;a href=&quot;#总结-3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构造函数就是用 &lt;code&gt;new&lt;/code&gt; 操作符调用的普通函数。可用过 &lt;code&gt;instanceof&lt;/code&gt; 操作符或直接访问 &lt;code&gt;constructor&lt;/code&gt;(实际上是原型对象的属性) 来鉴别对象是被哪个构造函数所创建的。&lt;/li&gt;
&lt;li&gt;每个函数都有一个 &lt;code&gt;prototype&lt;/code&gt; 对象，它定义了该构造函数创建的所有对象共享的属性。而 &lt;code&gt;constructor&lt;/code&gt; 属性实际上是定义在原型对象里，供所有对象实例共享。&lt;/li&gt;
&lt;li&gt;每个对象实例都有 &lt;code&gt;[[Prototype]]&lt;/code&gt; 属性，它是指向原型对象的指针。当访问对象的某个属性时，先从对象自身查找，找不到的话就到原型对象上找。&lt;/li&gt;
&lt;li&gt;内建对象的原型对象也可被修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;h3 id=&quot;原型对象链和-Object-prototype&quot;&gt;&lt;a href=&quot;#原型对象链和-Object-prototype&quot; class=&quot;headerlink&quot; title=&quot;原型对象链和 Object.prototype&quot;&gt;&lt;/a&gt;原型对象链和 Object.prototype&lt;/h3&gt;&lt;p&gt;JavaScript内建的继承方法被称为 原型对象链（又叫原型对象继承）。&lt;br&gt;原型对象的属性可经由对象实例访问，这就是继承的一种形式。对象实例继承了原型对象的属性，而原型对象也是一个对象，它也有自己的原型对象并继承其属性，以此类推。这就是原型对象链。&lt;/p&gt;
&lt;p&gt;所有对象（包括自义定的）都自动继承自 &lt;code&gt;Object&lt;/code&gt;，除非你另有指定。更确切地说，所有对象都继承自 &lt;code&gt;Object.prototype&lt;/code&gt;。任何以对象字面量形式定义的对象，其 &lt;code&gt;[[Prototype]]&lt;/code&gt; 的值都被设为 &lt;code&gt;Object.prototype&lt;/code&gt;，这意味着它继承 &lt;code&gt;Object.prototype&lt;/code&gt; 的属性。&lt;/p&gt;
&lt;h4 id=&quot;继承自-Object-prototype-的方法&quot;&gt;&lt;a href=&quot;#继承自-Object-prototype-的方法&quot; class=&quot;headerlink&quot; title=&quot;继承自 Object.prototype 的方法&quot;&gt;&lt;/a&gt;继承自 Object.prototype 的方法&lt;/h4&gt;&lt;p&gt;Object.prototype 一般有以下几个方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hasOwnProperty()             检测是否存在一个给定名字的自有属性&lt;/li&gt;
&lt;li&gt;propertyIsemumerable()       检查一个自有属性是否可枚举&lt;/li&gt;
&lt;li&gt;isPrototypeOf                检查一个对象是否是另一个对象的原型对象&lt;/li&gt;
&lt;li&gt;valueOf()                    返回一个对象的值表达&lt;/li&gt;
&lt;li&gt;toString()                   返回一个对象的字符串表达&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这 5 种方法经由继承出现在所有对象中。&lt;br&gt;因为所有对象都默认继承自 &lt;code&gt;Object.prototype&lt;/code&gt;，所以改变它就会影响所有的对象。所以不建议。&lt;/p&gt;
&lt;h3 id=&quot;继承-1&quot;&gt;&lt;a href=&quot;#继承-1&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;对象继承是最简单的继承类型。你唯需要做的是指定哪个对象是新对象的 &lt;code&gt;[[Prototype]]&lt;/code&gt;。对象字面量形式会隐式指定 &lt;code&gt;Object.prototype&lt;/code&gt; 为其 &lt;code&gt;[[Protoype]]&lt;/code&gt;。当然我们可以用 ES5 的 &lt;code&gt;Object.create()&lt;/code&gt; 方法显式指定。该方法接受两个参数，第一个是新对象的的 &lt;code&gt;[[Prototype]]&lt;/code&gt; 所指向的对象。第二个参数是可选的一个属性描述对象，其格式与 &lt;code&gt;Object.definePrototies()&lt;/code&gt;一样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = {
    name: &amp;quot;Ljc&amp;quot;
};

// 等同于
var obj = Object.create(Object.prototype, {
    name: {
        value: &amp;quot;Ljc&amp;quot;,
        configurable: true,
        enumberable: true,
        writable: true
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面是继承其它对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var person = {
    name: &amp;quot;Jack&amp;quot;,
    sayName: function(){
        console.log(this.name);
    }
}

var student = Object.create(person, {
    name:{
        value: &amp;quot;Ljc&amp;quot;
    },
    grade: {
        value: &amp;quot;fourth year of university&amp;quot;,
        enumerable: true,
        configurable: true,
        writable: true
    }
});

person.sayName(); // &amp;quot;Jack&amp;quot;
student.sayName(); // &amp;quot;Ljc&amp;quot;

console.log(person.hasOwnProperty(&amp;quot;sayName&amp;quot;)); // true
console.log(person.isPrototypeOf(student)); // true
console.log(student.hasOwnProperty(&amp;quot;sayName&amp;quot;)); // false
console.log(&amp;quot;sayName&amp;quot; in student); // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF.jpg&quot; alt=&quot;对象继承&quot;&gt;&lt;/p&gt;
&lt;p&gt;当访问一个对象属性时，JavaScript引擎会执行一个搜索过程。如果在对象实例存在该自有属性，则返回，否则，根据其私有属性 &lt;code&gt;[[Protoype]]&lt;/code&gt; 所指向的原型对象进行搜索，找到返回，否则继承上述操作，知道继承链末端。末端通常是 &lt;code&gt;Object.prototype&lt;/code&gt;，其 &lt;code&gt;[[Prototype]]&lt;/code&gt; 是 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，也可以用 &lt;code&gt;Object.create()&lt;/code&gt; 常见一个 &lt;code&gt;[[Prototype]]&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; 的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = Object.create(null);

console.log(&amp;quot;toString&amp;quot; in obj); // false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该对象是一个没有原型对象链的对象，即是一个没有预定义属性的白板。&lt;/p&gt;
&lt;h3 id=&quot;构造函数继承&quot;&gt;&lt;a href=&quot;#构造函数继承&quot; class=&quot;headerlink&quot; title=&quot;构造函数继承&quot;&gt;&lt;/a&gt;构造函数继承&lt;/h3&gt;&lt;p&gt;JavaScript 中的对象继承也是构造函数继承的基础。&lt;br&gt;第四章提到，几乎所有函数都有 &lt;code&gt;prototype&lt;/code&gt; 属性，它可被修改或替换。该 &lt;code&gt;prototype&lt;/code&gt; 属性被自动设置为一个新的继承自 &lt;code&gt;Object.prototype&lt;/code&gt; 的泛用对象，该对象(原型对象)有一个自有属性 &lt;code&gt;constructor&lt;/code&gt;。实际上，JavaScript 引擎为你做了下面的事情。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 你写成这样
function YourConstructor(){
    // initialization
}

// JavaScript引擎在背后为你做了这些处理
YourConstructor.prototype = Object.create(Object.prototype, {
    constructor: {
        configurable: true,
        enumerable: true,
        value: YourConstructor,
        writable: true
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你不需要做额外的工作，这段代码帮你把构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性设置为一个继承自 &lt;code&gt;Object.prototype&lt;/code&gt; 的对象。这意味着 &lt;code&gt;YourConstructor&lt;/code&gt; 创建出来的任何对象都继承自 &lt;code&gt;Object.prototype&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于 prototype 可写，你可以通过改变它来改变原型对象链。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MDN:instanceof 运算符可以用来判断某个构造函数的 prototype 属性是否存在另外一个要检测对象的原型链上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;function Rectangle(length, width){
    this.length = length;
    this.width = width
}

Rectangle.prototype.getArea = function(){
    return this.length * this.width
}

Rectangle.prototype.toString = function(){
    return &amp;quot;[Rectangle &amp;quot; + this.length + &amp;quot;x&amp;quot; + this.width + &amp;quot;]&amp;quot;;
}


// inherits from Rectangle
function Square(size){
    this.length = size;
    this.width = size;
}

Square.prototype = new Rectangle(); // 尽管是 Square.prototype 是指向了 Rectangle 的对象实例，即Square的实例对象也能访问该实例的属性（如果你提前声明了该对象，且给该对象新增属性）。
// Square.prototype = Rectangle.prototype; // 这种实现没有上面这种好，因为Square.prototype 指向了 Rectangle.prototype，导致修改Square.prototype时，实际就是修改Rectangle.prototype。
console.log(Square.prototype.constructor); // 输出 Rectangle 构造函数

Square.prototype.constructor = Square; // 重置回 Square 构造函数
console.log(Square.prototype.constructor); // 输出 Square 构造函数

Square.prototype.toString = function(){
    return &amp;quot;[Square &amp;quot; + this.length + &amp;quot;x&amp;quot; + this.width + &amp;quot;]&amp;quot;;
}

var rect = new Rectangle(5, 10);
var square = new Square(6);

console.log(rect.getArea()); // 50
console.log(square.getArea()); // 36

console.log(rect.toString()); // &amp;quot;[Rectangle 5 * 10]&amp;quot;, 但如果是Square.prototype = Rectangle.prototype，则这里会&amp;quot;[Square 5 * 10]&amp;quot;
console.log(square.toString()); // &amp;quot;[Square 6 * 6]&amp;quot;

console.log(square instanceof Square); // true
console.log(square instanceof Rectangle); // true
console.log(square instanceof Object); // true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF.jpg&quot; alt=&quot;构造函数继承&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Square.prototype&lt;/code&gt; 并不真的需要被改成为一个 &lt;code&gt;Rectangle&lt;/code&gt; 对象。事实上，是 &lt;code&gt;Square.prototype&lt;/code&gt; 需要指向 &lt;code&gt;Rectangle.prototype&lt;/code&gt; 使得继承得以实现。这意味着可以用 &lt;code&gt;Object.create()&lt;/code&gt; 简化例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// inherits from Rectangle
function Square(size){
    this.length = size;
    this.width = size;
}

Square.prototype= Object.create(Rectangle.prototype, {
    constructor: {
        configurable: true,
        enumerable: true,
        value: Square,
        writable: true
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;在对原型对象添加属性前要确保你已经改成了原型对象，否则在改写时会丢失之前添加的方法（因为继承是将被继承对象赋值给需要继承的原型对象，相当于重写了需要继承的原型对象）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;构造函数窃取&quot;&gt;&lt;a href=&quot;#构造函数窃取&quot; class=&quot;headerlink&quot; title=&quot;构造函数窃取&quot;&gt;&lt;/a&gt;构造函数窃取&lt;/h3&gt;&lt;p&gt;由于JavaScript中的继承是通过原型对象链来实现的，因此不需要调用对象的父类的构造函数。如果确实需要在子类构造函数中调用父类构造函数，那就可以在子类的构造函数中利用 &lt;code&gt;call&lt;/code&gt;、&lt;code&gt;apply&lt;/code&gt;方法调用父类的构造函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 在上面的代码基础上作出修改
// inherits from Rectangle
function Square(size){
    Rectangle.call(this, size, size);

    // optional: add new properties or override existing ones here
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般来说，需要修改 &lt;code&gt;prototyp&lt;/code&gt; 来继承方法并用构造函数窃取来设置属性，由于这种做法模仿了那些基于类的语言的类继承，所以这通常被称为伪类继承。&lt;/p&gt;
&lt;h3 id=&quot;访问父类方法&quot;&gt;&lt;a href=&quot;#访问父类方法&quot; class=&quot;headerlink&quot; title=&quot;访问父类方法&quot;&gt;&lt;/a&gt;访问父类方法&lt;/h3&gt;&lt;p&gt;其实也是通过指定 &lt;code&gt;call&lt;/code&gt; 或 &lt;code&gt;apply&lt;/code&gt; 的子对象调用父类方法。&lt;/p&gt;
&lt;h2 id=&quot;对象模式&quot;&gt;&lt;a href=&quot;#对象模式&quot; class=&quot;headerlink&quot; title=&quot;对象模式&quot;&gt;&lt;/a&gt;对象模式&lt;/h2&gt;&lt;h3 id=&quot;私有成员和特权成员&quot;&gt;&lt;a href=&quot;#私有成员和特权成员&quot; class=&quot;headerlink&quot; title=&quot;私有成员和特权成员&quot;&gt;&lt;/a&gt;私有成员和特权成员&lt;/h3&gt;&lt;p&gt;JavaScipt 对象的所有属性都是公有的，没有显式的方法指定某个属性不能被外界访问。&lt;/p&gt;
&lt;h4 id=&quot;模块模式&quot;&gt;&lt;a href=&quot;#模块模式&quot; class=&quot;headerlink&quot; title=&quot;模块模式&quot;&gt;&lt;/a&gt;模块模式&lt;/h4&gt;&lt;p&gt;模块模式是一种用于创建&lt;strong&gt;拥有私有数据的单件对象&lt;/strong&gt;的模式。&lt;br&gt;基本做法是使用立即调用函数表达式（IIFE）来返回一个对象。原理是利用闭包。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var yourObj = (function(){
    // private data variables

    return {
        // public methods and properties
    }
}());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模块模式还有一个变种叫暴露模块模式，它将所有的变量和方法都放在 &lt;code&gt;IIFE&lt;/code&gt; 的头部，然后将它们设置到需要被返回的对象上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//  一般写法
var yourObj = (function(){
    var age = 25;

    return {
        name: &amp;quot;Ljc&amp;quot;,

        getAge: function(){
            return agel
        }
    }
}());

// 暴露模块模式
var yourObj = (function(){
    var age = 25;
    function getAge(){
        return agel
    };
    return {
        name: &amp;quot;Ljc&amp;quot;,
        getAge: getAge
    }
}());
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;构造函数的私有成员（不能通过对象直接访问）&quot;&gt;&lt;a href=&quot;#构造函数的私有成员（不能通过对象直接访问）&quot; class=&quot;headerlink&quot; title=&quot;构造函数的私有成员（不能通过对象直接访问）&quot;&gt;&lt;/a&gt;构造函数的私有成员（不能通过对象直接访问）&lt;/h4&gt;&lt;p&gt;模块模式在定义单个对象的私有属性十分有效，但对于那些同样需要私有属性的自定义类型呢？你可以在构造函数中使用类似的模式来创建每个实例的私有数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    // define a variable only accessible inside of the Person constructor
    var age = 22;

    this.name = name;
    this.getAge = function(){
        return age;
    };
    this.growOlder = function(){
        age++;
    }
}

var person = new Person(&amp;quot;Ljc&amp;quot;);

console.log(person.age); // undefined
person.age = 100;
console.log(person.getAge()); // 22

person.growOlder();
console.log(person.getAge()); // 23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有个问题：如果你需要&lt;strong&gt;对象实例&lt;/strong&gt;拥有私有数据，就不能将相应方法放在 &lt;code&gt;prototype&lt;/code&gt; 上。&lt;/p&gt;
&lt;p&gt;如果你需要所有实例共享私有数据。则可结合模块模式和构造函数，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Person = (function(){
    var age = 22;

    function InnerPerson(name){
        this.name = name;
    }

    InnerPerson.prototype.getAge = function(){
        return age;
    }
    InnerPerson.prototype.growOlder = function(){
        age++;
    };

    return InnerPerson;
}());

var person1 = new Person(&amp;quot;Nicholash&amp;quot;);
var person2 = new Person(&amp;quot;Greg&amp;quot;);

console.log(person1.name); // &amp;quot;Nicholash&amp;quot;
console.log(person1.getAge()); // 22

console.log(person2.name); // &amp;quot;Greg&amp;quot;
console.log(person2.getAge()); // 22

person1.growOlder();
console.log(person1.getAge()); // 23
console.log(person2.getAge()); // 23
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;混入&quot;&gt;&lt;a href=&quot;#混入&quot; class=&quot;headerlink&quot; title=&quot;混入&quot;&gt;&lt;/a&gt;混入&lt;/h3&gt;&lt;p&gt;这是一种伪继承。一个对象在不改变原型对象链的情况下得到了另外一个对象的属性被称为“混入”。因此，和继承不同，混入让你在创建对象后无法检查属性来源。&lt;br&gt;纯函数实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function mixin(receiver, supplier){
    for(var property in supplier){
        if(supplier.hasOwnProperty(property)){
            receiver[property] = supplier[property];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是浅拷贝，如果属性的值是一个引用，那么两者将指向同一个对象。&lt;/p&gt;
&lt;h3 id=&quot;作用域安全的构造函数&quot;&gt;&lt;a href=&quot;#作用域安全的构造函数&quot; class=&quot;headerlink&quot; title=&quot;作用域安全的构造函数&quot;&gt;&lt;/a&gt;作用域安全的构造函数&lt;/h3&gt;&lt;p&gt;构造函数也是函数，所以不用 new 也能调用它们来改变 &lt;code&gt;this&lt;/code&gt; 的值。在非严格模式下， &lt;code&gt;this&lt;/code&gt; 被强制指向全局对象。而在严格模式下，构造函数会抛出一个错误（因为严格模式下没有为全局对象设置 &lt;code&gt;this&lt;/code&gt;，&lt;code&gt;this&lt;/code&gt; 保持为 &lt;code&gt;undefined&lt;/code&gt;）。&lt;br&gt;而很多内建构造函数，例如 &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;RegExp&lt;/code&gt; 不需要 &lt;code&gt;new&lt;/code&gt; 也能正常工作，这是因为它们被设计为作用域安全的构造函数。&lt;br&gt;当用 &lt;code&gt;new&lt;/code&gt; 调用一个函数时，&lt;code&gt;this&lt;/code&gt; 指向的新创建的对象是属于该构造函数所代表的自定义类型。因此，可在函数内用 &lt;code&gt;instanceof&lt;/code&gt; 检查自己是否被 &lt;code&gt;new&lt;/code&gt; 调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    if(this instanceof Person){
        // called with &amp;quot;new&amp;quot;
    }else{
        // called without &amp;quot;new&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(name){
    if(this instanceof Person){
        this.name = name;
    }else{
        return new Person(name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;总结-4&quot;&gt;&lt;a href=&quot;#总结-4&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;看了两天的书，做了两天的笔记。当然这只是ES5的。过几天 ES6 新书又来了。最后感谢 &lt;a href=&quot;http://www.epubit.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;异步社区&lt;/a&gt; 送我这本好书 &lt;a href=&quot;http://www.epubit.com.cn/book/details/1798&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript面向对象精要》&lt;/a&gt;，让我的前端根基更加稳固，希望自己的前端之路越走越顺。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;2016年1月16日-17日两天看完了《JavaScript面向对象精要》（参加异步社区的活动送的），这本书虽然不够100页，但都是精华，不愧是《JavaScript高级程序设计》作者 Nicholas C.Zakas 的最新力作。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="object-oriented" scheme="http://yoursite.com/tags/object-oriented/"/>
    
  </entry>
  
  <entry>
    <title>细说JavaSript单线程的一些事</title>
    <link href="http://yoursite.com/2016/01/08/2016-1-8-javascript-thread/"/>
    <id>http://yoursite.com/2016/01/08/2016-1-8-javascript-thread/</id>
    <published>2016-01-08T01:58:07.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;首发地址：&lt;a href=&quot;http://www.codeceo.com/article/javascript-threaded.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;码农网《细说JavaScript单线程的一些事》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近被同学问道 JavaScript 单线程的一些事，我竟回答不上。好吧，感觉自己的 JavaScript 白学了。下面是我这几天整理的一些关于 JavaScript 单线程的一些事。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;首先，说下为什么-JavaScript-是单线程？&quot;&gt;&lt;a href=&quot;#首先，说下为什么-JavaScript-是单线程？&quot; class=&quot;headerlink&quot; title=&quot;首先，说下为什么 JavaScript 是单线程？&quot;&gt;&lt;/a&gt;首先，说下为什么 JavaScript 是单线程？&lt;/h2&gt;&lt;p&gt;总所周知，JavaScript是以单线程的方式运行的。说到线程就自然联想到进程。那它们有什么联系呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进程和线程都是操作系统的概念。进程是应用程序的执行实例，每一个进程都是由私有的虚拟地址空间、代码、数据和其它系统资源所组成；进程在运行过程中能够申请创建和使用系统资源（如独立的内存区域等），这些资源也会随着进程的终止而被销毁。而线程则是进程内的一个独立执行单元，在不同的线程之间是可以共享进程资源的，所以在多线程的情况下，需要特别注意对临界资源的访问控制。在系统创建进程之后就开始启动执行进程的主线程，而进程的生命周期和这个主线程的生命周期一致，主线程的退出也就意味着进程的终止和销毁。主线程是由系统进程所创建的，同时用户也可以自主创建其它线程，这一系列的线程都会并发地运行于同一个进程中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，在多线程操作下可以实现应用的&lt;strong&gt;并行处理&lt;/strong&gt;，从而以更高的CPU利用率提高整个应用程序的性能和吞吐量。特别是现在很多语言都支持多核并行处理技术，然而JavaScript却以单线程执行，为什么呢？&lt;/p&gt;
&lt;p&gt;其实这与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。若以多线程的方式操作这些DOM，则可能出现操作的冲突。假设有两个线程同时操作一个DOM元素，线程1要求浏览器删除DOM，而线程2却要求修改DOM样式，这时浏览器就无法决定采用哪个线程的操作。当然，我们可以为浏览器引入“锁”的机制来解决这些冲突，但这会大大提高复杂性，所以 JavaScript 从诞生开始就选择了单线程执行。&lt;/p&gt;
&lt;p&gt;另外，因为 JavaScript 是单线程的，在某一时刻内只能执行特定的一个任务，并且会阻塞其它任务执行。那么对于类似I/O等耗时的任务，就没必要等待他们执行完后才继续后面的操作。在这些任务完成前，JavaScript完全可以往下执行其他操作，当这些耗时的任务完成后则以回调的方式执行相应处理。这些就是JavaScript与生俱来的特性：异步与回调。&lt;/p&gt;
&lt;p&gt;当然对于不可避免的耗时操作（如：繁重的运算，多重循环），HTML5提出了&lt;strong&gt;Web Worker&lt;/strong&gt;，它会在当前JavaScript的执行主线程中利用Worker类新开辟一个额外的线程来加载和运行特定的JavaScript文件，这个新的线程和JavaScript的主线程之间并不会互相影响和阻塞执行，而且在Web Worker中提供了这个新线程和JavaScript主线程之间数据交换的接口：postMessage和onMessage事件。但在HTML5 Web Worker中是不能操作DOM的，任何需要操作DOM的任务都需要委托给JavaScript主线程来执行，所以虽然引入HTML5 Web Worker，但仍然没有改线JavaScript单线程的本质。&lt;/p&gt;
&lt;h2 id=&quot;并发模式与Event-Loop&quot;&gt;&lt;a href=&quot;#并发模式与Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;并发模式与Event Loop&quot;&gt;&lt;/a&gt;并发模式与Event Loop&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;JavaScript 有个基于“Event Loop”并发的模型。&lt;/strong&gt;&lt;br&gt;啊，并发？不是说 JavaScript是单线程吗？ 没错，的确是单线程，但是并发与并行是有区别的。&lt;br&gt;前者是逻辑上的同时发生，而后者是物理上的同时发生。所以，单核处理器也能实现并发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.51cto.com/files/uploadimg/20090804/1503300.jpg&quot; alt=&quot;并发与并行&quot;&gt;&lt;br&gt;并发与并行&lt;/p&gt;
&lt;p&gt;并行大家都好理解，而&lt;strong&gt;所谓“并发”是指两个或两个以上的事件在同一时间间隔中发生。&lt;/strong&gt;如上图的第一个表，由于计算机系统只有一个CPU，故ABC三个程序从“微观”上是交替使用CPU，但交替时间很短，用户察觉不到，形成了“宏观”意义上的并发操作。&lt;/p&gt;
&lt;h3 id=&quot;Runtime-概念&quot;&gt;&lt;a href=&quot;#Runtime-概念&quot; class=&quot;headerlink&quot; title=&quot;Runtime 概念&quot;&gt;&lt;/a&gt;Runtime 概念&lt;/h3&gt;&lt;p&gt;下面的内容解释一个理论上的模型。现代 JavaScript 引擎已着重实现和优化了以下所描述的几个概念。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.mozilla.org/files/4617/default.svg&quot; alt=&quot;Stack、Heap、Queue&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Stack（栈）&quot;&gt;&lt;a href=&quot;#Stack（栈）&quot; class=&quot;headerlink&quot; title=&quot;Stack（栈）&quot;&gt;&lt;/a&gt;Stack（栈）&lt;/h4&gt;&lt;p&gt;这里放着JavaScript正在执行的任务。每个任务被称为帧（stack of frames）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f(b){
  var a = 12;
  return a+b+35;
}

function g(x){
  var m = 4;
  return f(m*x);
}

g(21);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码调用 &lt;code&gt;g&lt;/code&gt; 时，创建栈的第一帧，该帧包含了 &lt;code&gt;g&lt;/code&gt; 的参数和局部变量。当 &lt;code&gt;g&lt;/code&gt; 调用 &lt;code&gt;f&lt;/code&gt; 时，第二帧就会被创建，并且置于第一帧之上，当然，该帧也包含了 &lt;code&gt;f&lt;/code&gt; 的参数和局部变量。当 &lt;code&gt;f&lt;/code&gt; 返回时，其对应的帧就会出栈。同理，当 &lt;code&gt;g&lt;/code&gt; 返回时，栈就为空了（&lt;strong&gt;栈的特定就是后进先出&lt;/strong&gt; Last-in first-out (LIFO)）。&lt;/p&gt;
&lt;h4 id=&quot;Heap（堆）&quot;&gt;&lt;a href=&quot;#Heap（堆）&quot; class=&quot;headerlink&quot; title=&quot;Heap（堆）&quot;&gt;&lt;/a&gt;Heap（堆）&lt;/h4&gt;&lt;p&gt;一个用来表示内存中一大片非结构化区域的名字，对象都被分配在这。&lt;/p&gt;
&lt;h4 id=&quot;Queue（队列）&quot;&gt;&lt;a href=&quot;#Queue（队列）&quot; class=&quot;headerlink&quot; title=&quot;Queue（队列）&quot;&gt;&lt;/a&gt;Queue（队列）&lt;/h4&gt;&lt;p&gt;一个 JavaScript runtime 包含了一个任务队列，该队列是由一系列待处理的任务组成。而每个任务都有相对应的函数。当栈为空时，就会从任务队列中取出一个任务，并处理之。该处理会调用与该任务相关联的一系列函数（因此会创建一个初始栈帧）。当该任务处理完毕后，栈就会再次为空。&lt;strong&gt;（Queue的特点是先进先出 First-in First-out (FIFO)）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了方便描述与理解，作出以下约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack栈为&lt;strong&gt;主线程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Queue队列为&lt;strong&gt;任务队列（等待调度到主线程执行）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，上述知识点帮助我们理清了一个 JavaScript runtime 的相关概念，这有助于接下来的分析。&lt;/p&gt;
&lt;h3 id=&quot;Event-Loop&quot;&gt;&lt;a href=&quot;#Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;Event Loop&quot;&gt;&lt;/a&gt;Event Loop&lt;/h3&gt;&lt;p&gt;之所以被称为Event loop，是因为它以以下类似方式实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while(queue.waitForMessage()){
  queue.processNextMessage();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如上述所说，“任务队列”是一个事件的队列，如果I/O设备完成任务或用户触发事件（该事件指定了回调函数），那么相关事件处理函数就会进入“任务队列”，当主线程空闲时，就会调度“任务队列”里第一个待处理任务，（FIFO）。当然，对于定时器，当到达其指定时间时，才会把相应任务插到“任务队列”尾部。&lt;/p&gt;
&lt;h4 id=&quot;“执行至完成”&quot;&gt;&lt;a href=&quot;#“执行至完成”&quot; class=&quot;headerlink&quot; title=&quot;“执行至完成”&quot;&gt;&lt;/a&gt;“执行至完成”&lt;/h4&gt;&lt;p&gt;每当某个任务执行完后，其它任务才会被执行。也就是说，当一个函数运行时，它不能被取代且会在其它代码运行前先完成。&lt;br&gt;当然，这也是Event Loop的一个&lt;strong&gt;缺点&lt;/strong&gt;：当一个任务完成时间过长，那么应用就不能及时处理用户的交互（如点击事件），甚至导致该应用奔溃。一个比较好解决方案是：将任务完成时间缩短，或者尽可能将一个任务分成多个任务执行。&lt;/p&gt;
&lt;h4 id=&quot;绝不阻塞&quot;&gt;&lt;a href=&quot;#绝不阻塞&quot; class=&quot;headerlink&quot; title=&quot;绝不阻塞&quot;&gt;&lt;/a&gt;绝不阻塞&lt;/h4&gt;&lt;p&gt;JavaScript与其它语言不同，其Event Loop的一个特性是永不阻塞。I/O操作通常是通过事件和回调函数处理。所以，当应用等待 indexedDB 或 XHR 异步请求返回时，其仍能处理其它操作（如用户输入）。&lt;/p&gt;
&lt;p&gt;例外是存在的，如alert或者同步XHR，但避免它们被认为是最佳实践。注意的是，例外的例外也是存在的（但通常是实现错误而非其它原因)。&lt;/p&gt;
&lt;h3 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h3&gt;&lt;h4 id=&quot;定时器的一些概念&quot;&gt;&lt;a href=&quot;#定时器的一些概念&quot; class=&quot;headerlink&quot; title=&quot;定时器的一些概念&quot;&gt;&lt;/a&gt;定时器的一些概念&lt;/h4&gt;&lt;p&gt;上面也提到，在到达指定时间时，定时器就会将相应回调函数插入“任务队列”尾部。这就是“定时器(timer)”功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/spec-preview/timers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;定时器&lt;/a&gt; 包括setTimeout与setInterval两个方法。它们的第二个参数是指定其回调函数推迟\每隔多少毫秒数后执行。&lt;br&gt;对于第二个参数有以下需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当第二个参数缺省时，默认为0；&lt;/li&gt;
&lt;li&gt;当指定的值小于4毫秒，则增加到4ms（4ms是HTML5标准指定的，对于2010年及之前的浏览器则是10ms）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你理解上述知识，那么以下代码就应该对你没什么问题了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(1);
setTimeout(function(){
    console.log(2);
},10);
console.log(3);
// 输出：1 3 2
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;深入了解定时器&quot;&gt;&lt;a href=&quot;#深入了解定时器&quot; class=&quot;headerlink&quot; title=&quot;深入了解定时器&quot;&gt;&lt;/a&gt;深入了解定时器&lt;/h4&gt;&lt;h5 id=&quot;零延迟-setTimeout-func-0&quot;&gt;&lt;a href=&quot;#零延迟-setTimeout-func-0&quot; class=&quot;headerlink&quot; title=&quot;零延迟 setTimeout(func, 0)&quot;&gt;&lt;/a&gt;零延迟 setTimeout(func, 0)&lt;/h5&gt;&lt;p&gt;零延迟并不是意味着回调函数立刻执行。它取决于主线程当前是否空闲与“任务队列”里其前面正在等待的任务。&lt;/p&gt;
&lt;p&gt;看看以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function () {

  console.log(&amp;apos;this is the start&amp;apos;);

  setTimeout(function cb() {
    console.log(&amp;apos;this is a msg from call back&amp;apos;);
  });

  console.log(&amp;apos;this is just a message&amp;apos;);

  setTimeout(function cb1() {
    console.log(&amp;apos;this is a msg from call back1&amp;apos;);
  }, 0);

  console.log(&amp;apos;this is the  end&amp;apos;);

})();

// 输出如下：
this is the start
this is just a message
this is the end
undefined // 立即调用函数的返回值
this is a msg from callback
this is a msg from a callback1
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;setTimeout-func-0-的作用&quot;&gt;&lt;a href=&quot;#setTimeout-func-0-的作用&quot; class=&quot;headerlink&quot; title=&quot;setTimeout(func, 0)的作用&quot;&gt;&lt;/a&gt;&lt;strong&gt;setTimeout(func, 0)的作用&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;让浏览器渲染当前的变化（很多浏览器UI render和js执行是放在一个线程中，线程阻塞会导致界面无法更新渲染） &lt;/li&gt;
&lt;li&gt;重新评估”scriptis running too long”警告&lt;/li&gt;
&lt;li&gt;改变执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再看看以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button id=&amp;apos;do&amp;apos;&amp;gt; Do long calc!&amp;lt;/button&amp;gt;
&amp;lt;div id=&amp;apos;status&amp;apos;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;apos;result&amp;apos;&amp;gt;&amp;lt;/div&amp;gt;


$(&amp;apos;#do&amp;apos;).on(&amp;apos;click&amp;apos;, function(){

  $(&amp;apos;#status&amp;apos;).text(&amp;apos;calculating....&amp;apos;);// 此处会触发redraw事件，但会放到队列里执行，直到long()执行完。

  // 没设定定时器，用户将无法看到“calculating...”
  long();// 执行长时间任务，造成阻塞

  // 设定了定时器，用户就如期看到“calculating...”
  //setTimeout(long,50);// 大约50ms后，将耗时长的long回调函数插入“任务队列”末尾，根据先进先出原则，其将在redraw之后被调度到主线程执行

 });

function long(){
  var result = 0
  for (var i = 0; i&amp;lt;1000; i++){
    for (var j = 0; j&amp;lt;1000; j++){
      for (var k = 0; k&amp;lt;1000; k++){
        result = result + i+j+k
      }
    } 
  }
  $(&amp;apos;#status&amp;apos;).text(&amp;apos;calclation done&amp;apos;); // 在本案例中，该语句必须放到这里，这将使它与回调函数的行为类似
}
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&quot;正版与翻版setInterval的区别&quot;&gt;&lt;a href=&quot;#正版与翻版setInterval的区别&quot; class=&quot;headerlink&quot; title=&quot;正版与翻版setInterval的区别&quot;&gt;&lt;/a&gt;&lt;strong&gt;正版与翻版setInterval的区别&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;大家都可能知道通过setTimeout可以模仿setInterval的效果，下面我们看看以下代码的区别：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 利用setTimeout模仿setInterval
setTimeout(function(){
    /* 执行一些操作. */
    setTimeout(arguments.callee, 10);
}, 1000);

setInterval(function(){
    /* 执行一些操作 */
}, 1000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可能你认为这没什么区别。的确，当回调函数里的操作耗时很短时，并不能看出它们有什么区别。&lt;br&gt;其实：上面案例中的 setTimeout 总是会在其回调函数执行后延迟 10ms（或者更多，但不可能少）再次执行回调函数，从而实现setInterval的效果，而 setInterval 总是 10ms 执行一次，而不管它的回调函数执行多久。&lt;/p&gt;
&lt;p&gt;所以，如果 setInterval 的回调函数执行时间比你指定的间隔时间相等或者更长，那么其回调函数会连在一起执行。&lt;/p&gt;
&lt;p&gt;你可以试试运行以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var counter = 0;
var initTime = new Date().getTime();
var timer = setInterval(function(){
    if(counter===2){
        clearInterval(timer);
    }
    if(counter === 0){
        for(var i = 0; i &amp;lt; 1990000000; i++){
            ;
        }
    }

    console.log(&amp;quot;第&amp;quot;+counter+&amp;quot;次：&amp;quot; + (new Date().getTime() - initTime) + &amp;quot; ms&amp;quot;);

    counter++;
},1000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我电脑Chrome浏览器的输入如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第0次：2007 ms
第1次：2013 ms
第2次：3008 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h3&gt;&lt;h4 id=&quot;浏览器不是单线程的&quot;&gt;&lt;a href=&quot;#浏览器不是单线程的&quot; class=&quot;headerlink&quot; title=&quot;浏览器不是单线程的&quot;&gt;&lt;/a&gt;浏览器不是单线程的&lt;/h4&gt;&lt;p&gt;上面说了这么多关于JavaScript是单线程的，下面说说其宿主环境——浏览器。&lt;br&gt;&lt;strong&gt;浏览器的内核是多线程&lt;/strong&gt;的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;javascript引擎线程 javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。&lt;/li&gt;
&lt;li&gt;GUI渲染线程 GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。&lt;/li&gt;
&lt;li&gt;浏览器事件触发线程 事件触发线程，当一个事件被触发时该线程会把事件添加到“任务队列”的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS是单线程执行的，所有这些事件都得排队等待JS引擎处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Chrome浏览器中，为了防止因一个标签页奔溃而影响整个浏览器，其每个标签页都是一个&lt;strong&gt;进程&lt;/strong&gt;。当然，对于同一域名下的标签页是能够相互通讯的，具体可看 &lt;a href=&quot;http://web.jobbole.com/82225/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器跨标签通讯&lt;/a&gt;。在Chrome设计中存在很多的进程，并利用进程间通讯来完成它们之间的同步，因此这也是Chrome快速的法宝之一。对于Ajax的请求也需要特殊线程来执行，当需要发送一个Ajax请求时，浏览器会开辟一个新的线程来执行HTTP的请求，它并不会阻塞JavaScript线程的执行，当HTTP请求状态变更时，相应事件会被作为回调放入到“任务队列”中等待被执行。&lt;/p&gt;
&lt;p&gt;看看以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.onclick = function(){
    console.log(&amp;quot;click&amp;quot;)
}

for(var i = 0; i&amp;lt; 100000000; i++);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释一下代码：首先向document注册了一个click事件，然后就执行了一段耗时的for循环，在这段for循环结束前，你可以尝试点击页面。当耗时操作结束后，console控制台就会输出之前点击事件的”click”语句。这视乎证明了点击事件（也包括其它各种事件）是由额外单独的线程触发的，事件触发后就会将回调函数放进了“任务队列”的末尾，等待着JavaScript主线程的执行。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript是单线程的，同一时刻只能执行特定的任务。而浏览器是多线程的。&lt;/li&gt;
&lt;li&gt;异步任务（各种浏览器事件、定时器等）都是先添加到“任务队列”（定时器则到达其指定参数时）。当Stack栈（JS主线程）为空时，就会读取Queue队列（任务队列）的第一个任务（队首），然后执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript为了避免复杂性，而实现单线程执行。而今JavaScript却变得越来越不简单了，当然这也是JavaScript迷人的地方。&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 运行机制详解：再谈Event Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/p/javascript-single-thread-and-browser-event-loop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript单线程和浏览器事件循环简述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Mainz/p/3552717.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript是单线程的深入分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency model and Event Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://imweb.io/topic/56642e21d91952db73b41f52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;也谈setTimeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leohxj.gitbooks.io/front-end-database/content/theory/single-thread.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单线程的Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首发地址：&lt;a href=&quot;http://www.codeceo.com/article/javascript-threaded.html&quot;&gt;码农网《细说JavaScript单线程的一些事》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近被同学问道 JavaScript 单线程的一些事，我竟回答不上。好吧，感觉自己的 JavaScript 白学了。下面是我这几天整理的一些关于 JavaScript 单线程的一些事。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>让footer固定在页面（或视口）底部</title>
    <link href="http://yoursite.com/2015/12/21/2015-12-21-css-sticky-footer/"/>
    <id>http://yoursite.com/2015/12/21/2015-12-21-css-sticky-footer/</id>
    <published>2015-12-21T06:51:31.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;这是一个让网站footer固定在浏览器(页面内容小于浏览器高度时)/页面底部的技巧。由HTML和CSS实现，没有令人讨厌的hacks。所以这就能在所有主流浏览器上正常运行（甚至包括IE5和IE6）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何通过用CSS让Footer固定在页面顶部。&quot;&gt;&lt;a href=&quot;#如何通过用CSS让Footer固定在页面顶部。&quot; class=&quot;headerlink&quot; title=&quot;如何通过用CSS让Footer固定在页面顶部。&quot;&gt;&lt;/a&gt;如何通过用CSS让Footer固定在页面顶部。&lt;/h3&gt;&lt;p&gt;在样式表单里添加下面几行CSS代码。&lt;code&gt;.wrapper&lt;/code&gt; 的负外边距与 &lt;code&gt;.footer&lt;/code&gt; 和 &lt;code&gt;.push&lt;/code&gt; 的高度相等。负外边距应该与footer的整体高度相等（包括padding、border）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html, body &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.wrapper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    min-height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: auto !important; /* 如果你不需要考虑IE6，则可以把这行与下一行代码删除 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 auto -4em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.footer, .push &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 4em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照此 HTML 结构。没有内容会超出 .wrapper 和 .footer 的 &lt;code&gt;div&lt;/code&gt; 标签，除非超出内容是通过CSS的绝对定位。另外，&lt;code&gt;.push&lt;/code&gt; 的 &lt;code&gt;div&lt;/code&gt; 标签也不应该含有内容，毕竟它是作为一个将footer“推”下去的隐藏元素。否则会与footer的内容重叠。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;layout.css&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;p&amp;gt;Your website content here.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;div class=&amp;quot;push&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;p&amp;gt;Copyright (c) 2008&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;多列布局（通过浮动）&quot;&gt;&lt;a href=&quot;#多列布局（通过浮动）&quot; class=&quot;headerlink&quot; title=&quot;多列布局（通过浮动）&quot;&gt;&lt;/a&gt;多列布局（通过浮动）&lt;/h4&gt;&lt;p&gt;为 &lt;code&gt;.push&lt;/code&gt; div 添加 clear 属性。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.footer, .push &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;height-auto-important-和-height-100-属性&quot;&gt;&lt;a href=&quot;#height-auto-important-和-height-100-属性&quot; class=&quot;headerlink&quot; title=&quot;height:auto!important; 和 height:100%;属性&quot;&gt;&lt;/a&gt;height:auto!important; 和 height:100%;属性&lt;/h4&gt;&lt;p&gt;这两个属性是为了在IE6及以下的浏览器实现 &lt;a href=&quot;http://caniuse.com/#search=min-height&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;min-height&lt;/a&gt; 效果(min-height只兼容IE7及以上)。所以，当你不需要考虑IE6时，可把这两个属性删除。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为IE6是考虑元素内容的尺寸，而不是元素本身尺寸。在符合标准的浏览器中，如果元素的内容太大，它只会超出框之外。但是在IE6中，如果元素内容太大，则整个元素就会扩展(包括宽和高)。即设定的width表现得像min-width。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完整代码：&lt;a href=&quot;https://github.com/JChehe/CSS-Sticky-Footer/blob/master/CSS%20Sticky%20Footer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/JChehe/CSS-Sticky-Footer/blob/master/CSS%20Sticky%20Footer.html&lt;/a&gt;&lt;br&gt;参考：&lt;a href=&quot;http://ryanfait.com/resources/footer-stick-to-bottom-of-page/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ryanfait.com/resources/footer-stick-to-bottom-of-page/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个让网站footer固定在浏览器(页面内容小于浏览器高度时)/页面底部的技巧。由HTML和CSS实现，没有令人讨厌的hacks。所以这就能在所有主流浏览器上正常运行（甚至包括IE5和IE6）。&lt;br&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="translation" scheme="http://yoursite.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>其实闭包并不高深莫测</title>
    <link href="http://yoursite.com/2015/12/10/2015-12-10-closures-are-not-magic/"/>
    <id>http://yoursite.com/2015/12/10/2015-12-10-closures-are-not-magic/</id>
    <published>2015-12-10T03:24:47.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;几年前，我还是一名高中生时，我的一个朋友向我讲述了闭包的概念。虽然我当时一点也不明白他想表达的内容，但他在向我讲述时却表现得非常高大上。对于当时的我来说，闭包看来是一个深不可测的魔法。即使 Google 后也不能解除我的疑惑。而所有我能查阅的科技文章，都为高中生所难以理解。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;现在的我回想起高中编程时光，我都会不禁一笑。这是一篇试图用一些简单项目去解释闭包的文章，这会帮助我的学弟学妹们能轻易地驾驭强大的闭包。&lt;/p&gt;
&lt;h2 id=&quot;计数事件&quot;&gt;&lt;a href=&quot;#计数事件&quot; class=&quot;headerlink&quot; title=&quot;计数事件&quot;&gt;&lt;/a&gt;计数事件&lt;/h2&gt;&lt;p&gt;我们将从一个简单的问题开始。如果将闭包引入到该程序中，将能轻易解决这个问题。&lt;br&gt;我们为计数事件创建一个机制。该机制将有助于我们跟踪代码的执行，甚至去调试一些问题。例如，我会以下面的方式调用计数器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;increment();  // Number of events: 1
increment();  // Number of events: 2
increment();  // Number of events: 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如你所看到的上述案例，我们希望代码会在我们每次执行 &lt;code&gt;increment()&lt;/code&gt; 函数时，会显示一条信息“Number of events: x”。下面以简单的方式实现该函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var counter = 0;

function increment() {
  counter = counter + 1;
  console.log(&amp;quot;Number of events: &amp;quot; + counter);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;多个计数器&quot;&gt;&lt;a href=&quot;#多个计数器&quot; class=&quot;headerlink&quot; title=&quot;多个计数器&quot;&gt;&lt;/a&gt;多个计数器&lt;/h2&gt;&lt;p&gt;上述代码非常简单明确。然而，当我们引入第二个计数器时，就会很快遇到问题。当然，我们能实现两个单独的计数器机制，如下面的代码，但很明显有需要改进的地方：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var counter1 = 0;

function incrementCounter1() {
  counter1 = counter1 + 1;
  console.log(&amp;quot;Number of events: &amp;quot; + counter1);
}

var counter2 = 0;

function incrementCounter2() {
  counter2 = counter2 + 1;
  console.log(&amp;quot;Number of events: &amp;quot; + counter2);
}

incrementCounter1();  // Number of events: 1
incrementCounter2();  // Number of events: 1
incrementCounter1();  // Number of events: 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码出现了不必要的重复。明显地，这种解决办法并不适用于超过二或三个记数器的情况。我们需要想出更好的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;引入我们第一个闭包&quot;&gt;&lt;a href=&quot;#引入我们第一个闭包&quot; class=&quot;headerlink&quot; title=&quot;引入我们第一个闭包&quot;&gt;&lt;/a&gt;引入我们第一个闭包&lt;/h2&gt;&lt;p&gt;在保持与上述例子相似的情况下，我们以某种方式引入新的计数器，该计数器捆绑了一个能自增的函数，而且没有大量重复的代码。下面尝试使用闭包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createCounter() {
  var counter = 0;

  function increment() {
    counter = counter + 1;
    console.log(&amp;quot;Number of events: &amp;quot; + counter);
  }

  return increment;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们看看这是如何工作的。我们将创建两个计数器，并让它们跟踪两个独立的事件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var counter1 = createCounter();
var counter2 = createCounter();

counter1(); // Number of events: 1
counter1(); // Number of events: 2

counter2(); // Number of events: 1

counter1(); // Number of events: 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;啊，这看起来有点复杂…然而，这实际上是非常简单的。我们只需将实现逻辑分成几个易于理解的块。下面就看看我们实现了什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，创建了一个名为 &lt;code&gt;counter&lt;/code&gt; 的局部变量。&lt;/li&gt;
&lt;li&gt;然后，创建了一个名为 &lt;code&gt;increment&lt;/code&gt; 的局部函数，它能增加 &lt;code&gt;counter&lt;/code&gt; 变量值。如果你从未接触过将函数作为数据来处理的函数式编程，这也许对你非常陌生。然而，这是非常常见的，而且只需要一些练习就能适应这一概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你应该注意到这一点，&lt;code&gt;createCounter()&lt;/code&gt; 的实现与我们原先的计数器实现几乎一致。唯一不同的是它被包装或封装在一个函数体内。因此，这些构造器都被称为闭包。&lt;/p&gt;
&lt;p&gt;现在是棘手的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;createCounter()&lt;/code&gt; 的最后一步返回了局部函数 &lt;code&gt;increment&lt;/code&gt;。请注意，这并不是返回调用函数的运行结果，而是函数本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就意味着，当我们在这个代码段下面创建新的计数器时，实际上是生成新函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// fancyNewCounter is a function in this scope
// fancyNewCounter 是当前作用域的一个函数

var fancyNewCounter = createCounter();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是闭包生命周期的力量所在。每个生成的函数，都会保持在 &lt;code&gt;createCounter()&lt;/code&gt; 所创建的 &lt;code&gt;counter&lt;/code&gt; 变量的引用。在某种意义上，被返回的函数记住了它所被创建时的环境。&lt;/p&gt;
&lt;p&gt;在这里需要提醒大家注意的是，内部变量 &lt;code&gt;counter&lt;/code&gt; 都是独立存在于每个作用域！例如，如果我们创建两个计数器，那么它们都会在闭包体内会分配一个新的 &lt;code&gt;counter&lt;/code&gt; 变量。我们观察以下代码：&lt;/p&gt;
&lt;p&gt;每个计数器都会从 1 算起：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var counter1 = createCounter();
counter1(); // Number of events: 1
counter1(); // Number of events: 2

var counter2 = createCounter();
counter2(); // Number of events: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个计数器并不会干扰第一个计数器的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;counter1(); // Number of events: 3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;为我们的计数器命名&quot;&gt;&lt;a href=&quot;#为我们的计数器命名&quot; class=&quot;headerlink&quot; title=&quot;为我们的计数器命名&quot;&gt;&lt;/a&gt;为我们的计数器命名&lt;/h2&gt;&lt;p&gt;信息“Number of events: x” 是没问题的，但如果能描述每个计数事件的类型，那么这将会更好。如以下例子，我们为计数器添加名字：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var catCounter = createCounter(&amp;quot;cats&amp;quot;);
var dogCounter = createCounter(&amp;quot;dogs&amp;quot;);

catCounter(); // Number of cats: 1
catCounter(); // Number of cats: 2
dogCounter(); // Number of dogs: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们仅需通过为闭包传递参数就能达到这种目的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createCounter(counterName) {
  var counter = 0;

  function increment() {
    counter = counter + 1;

    console.log(&amp;quot;Number of &amp;quot; + counterName + &amp;quot;: &amp;quot; + counter);
  }

  return increment;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非常棒！请注意上述 &lt;code&gt;createCounter()&lt;/code&gt; 函数的一个有趣行为。返回函数不仅记住了局部变量 &lt;code&gt;counter&lt;/code&gt;，而且记住了传递进来的参数。&lt;/p&gt;
&lt;h2 id=&quot;改善公用接口&quot;&gt;&lt;a href=&quot;#改善公用接口&quot; class=&quot;headerlink&quot; title=&quot;改善公用接口&quot;&gt;&lt;/a&gt;改善公用接口&lt;/h2&gt;&lt;p&gt;我所说的公用接口是指，我们如何使用计数器。这并不单纯指，当被创建的计数器被调用时会增加值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var dogCounter = createCounter(&amp;quot;dogs&amp;quot;);

dogCounter.increment(); // Number of dogs: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们创建这样的一个实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createCounter(counterName) {
  var counter = 0;

  function increment() {
    counter = counter + 1;

    console.log(&amp;quot;Number of &amp;quot; + counterName + &amp;quot;: &amp;quot; + counter);
  };

  return { increment : increment };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述代码段，我们简单地返回一个对象，该对象包含了该闭包的所有功能。在某种意义下，我们能定义闭包能返回的一系列信息。&lt;/p&gt;
&lt;h2 id=&quot;增加一个减量&quot;&gt;&lt;a href=&quot;#增加一个减量&quot; class=&quot;headerlink&quot; title=&quot;增加一个减量&quot;&gt;&lt;/a&gt;增加一个减量&lt;/h2&gt;&lt;p&gt;现在，我们能非常简单地为我们的计数器引入减量（decrement）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createCounter(counterName) {
  var counter = 0;

  function increment() {
    counter = counter + 1;

    console.log(&amp;quot;Number of &amp;quot; + counterName + &amp;quot;: &amp;quot; + counter);
  };

  function decrement() {
    counter = counter - 1;

    console.log(&amp;quot;Number of &amp;quot; + counterName + &amp;quot;: &amp;quot; + counter);
  };

  return {
    increment : increment,
    decrement : decrement
  };
}

var dogsCounter = createCounter(&amp;quot;dogs&amp;quot;);

dogsCounter.increment(); // Number of dogs: 1
dogsCounter.increment(); // Number of dogs: 2
dogsCounter.decrement(); // Number of dogs: 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;隐藏计数器行为&quot;&gt;&lt;a href=&quot;#隐藏计数器行为&quot; class=&quot;headerlink&quot; title=&quot;隐藏计数器行为&quot;&gt;&lt;/a&gt;隐藏计数器行为&lt;/h2&gt;&lt;p&gt;上述代码有两处冗余的代码行。没错，就是 &lt;code&gt;console.log&lt;/code&gt;。如果能创建一个专门用于显示计数器值的函数将会更好。让我们调用 &lt;code&gt;display&lt;/code&gt; 函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createCounter(counterName) {
  var counter = 0;

  function display() {
    console.log(&amp;quot;Number of &amp;quot; + counterName + &amp;quot;: &amp;quot; + counter);
  }

  function increment() {
    counter = counter + 1;

    display();
  };

  function decrement() {
    counter = counter - 1;

    display();
  };

  return {
    increment : increment,
    decrement : decrement
  };
}

var dogsCounter = createCounter(&amp;quot;dogs&amp;quot;);

dogsCounter.increment(); // Number of dogs: 1
dogsCounter.increment(); // Number of dogs: 2
dogsCounter.decrement(); // Number of dogs: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;display()&lt;/code&gt;与&lt;code&gt;increment()&lt;/code&gt;和 &lt;code&gt;decrement()&lt;/code&gt; 函数看起来非常相似，然而这是大相径庭的。我们没有在结果对象里返回它！这意味着以下代码将会调用失败：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var dogsCounter = createCounter(&amp;quot;dogs&amp;quot;);

dogsCounter.display(); // ERROR !!!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们让 &lt;code&gt;display()&lt;/code&gt; 函数对外部来说是不可见的。它仅在 &lt;code&gt;createCounter()&lt;/code&gt; 内可用。&lt;/p&gt;
&lt;h2 id=&quot;抽象数据类型&quot;&gt;&lt;a href=&quot;#抽象数据类型&quot; class=&quot;headerlink&quot; title=&quot;抽象数据类型&quot;&gt;&lt;/a&gt;抽象数据类型&lt;/h2&gt;&lt;p&gt;正如你所见，我们通过闭包能非常简单地引入抽象数据类型。例如，让我们通过闭包实现一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;堆栈&lt;/a&gt;)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function createStack() {
  var elements = [];

  return {
    push: function(el) { elements.unshift(el); },
    pop: function() { return elements.shift(); }
  };
}

var stack = createStack();

stack.push(3);
stack.push(4);
stack.pop(); // 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：在 JavaScript 中，闭包并不是堆栈数据类型的最佳实现方式。用 Prototype 实现会对内存更友好（译者注：在当前对象实例找不会相应属性或方法时，会到相应实例共同引用的 Prototype 属性寻找相应属性或方法（如果在当前Prototype属性找不到时，会沿着当前原型链向上查找），而Prototype 上的属性或方法是公用的，而不像实例的属性或方法那样，各自单独创建属性或方法，从而节省更多的内存）。&lt;/p&gt;
&lt;h2 id=&quot;闭包与面向对象编程&quot;&gt;&lt;a href=&quot;#闭包与面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;闭包与面向对象编程&quot;&gt;&lt;/a&gt;闭包与面向对象编程&lt;/h2&gt;&lt;p&gt;如果你具有 &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;面向对象编程&lt;/a&gt; 的经历，那么你应该会注意到上述构造器看来非常像类、对象、实例值和私有/公有方法。&lt;/p&gt;
&lt;p&gt;闭包与类相似，都会将一些能操作内部数据的函数联系在一起。因此，你能在任何地方像使用对象一样使用闭包。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;闭包是编程语言一个很棒的属性。当我们想在 JavaScript 创建“真正的”隐藏域，或者需要创建简单的构造器时，闭包这个属性是非常好用的。不过对于一般的类来说，闭包可能还是有点太重了。&lt;/p&gt;
&lt;p&gt;感谢您的阅读。 如果你觉得这篇文章对您有帮助或者觉得我翻译得不错，那给我个 &lt;a href=&quot;https://github.com/JChehe/translation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;star&lt;/a&gt; 吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://web.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt; - &lt;a href=&quot;http://www.jobbole.com/members/q574805242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超-J.c&lt;/a&gt; 翻译，&lt;a href=&quot;http://www.jobbole.com/members/namco1992&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Namco&lt;/a&gt; 校稿。未经许可，禁止转载！&lt;/p&gt;
&lt;p&gt;英文出处：&lt;a href=&quot;http://renderedtext.com/blog/2015/11/18/closures-are-not-magic/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Igor Šarčević&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;几年前，我还是一名高中生时，我的一个朋友向我讲述了闭包的概念。虽然我当时一点也不明白他想表达的内容，但他在向我讲述时却表现得非常高大上。对于当时的我来说，闭包看来是一个深不可测的魔法。即使 Google 后也不能解除我的疑惑。而所有我能查阅的科技文章，都为高中生所难以理解。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="closure" scheme="http://yoursite.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>脱离jQuery，使用原生Ajax</title>
    <link href="http://yoursite.com/2015/12/05/2015-12-5-vanilla-ajax-without-jquery/"/>
    <id>http://yoursite.com/2015/12/05/2015-12-5-vanilla-ajax-without-jquery/</id>
    <published>2015-12-05T02:51:31.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_%28programming%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ajax&lt;/a&gt; 是异步的JavaScript和XML的简称，是一种更新页面某部分的机制。它赋予了你从服务器获取数据后，更新页面某部分的权力，从而避免了刷新整个页面。另外，以此方式实现页面局部更新，不仅能有效地打造流畅的用户体验，而且减轻了服务器的负载。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;下面是对一个基本的 Ajax 请求进行剖析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var xhr = new XMLHttpRequest();
xhr.open(&amp;apos;GET&amp;apos;, &amp;apos;send-ajax-data.php&amp;apos;);
xhr.send(null);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里， 我们创建了一个能向服务器发出 HTTP 请求的类的实例。然后调用其 &lt;code&gt;open&lt;/code&gt; 方法，其中第一个参数是 HTTP 请求方法，第二个参数是请求页面的 URL。最后，我们调用参数为 null 的 &lt;code&gt;send&lt;/code&gt; 方法。假如使用 POST 请求方法（这里我们使用了 GET），那么 send 方法 的参数应该包含任何你想发送的数据。&lt;/p&gt;
&lt;p&gt;下面是我们如何处理服务器的响应：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xhr.onreadystatechange = function(){
    var DONE = 4; // readyState 4 代表已向服务器发送请求
    var OK = 200; // status 200 代表服务器返回成功
    if(xhr.readyState === DONE){
        if(xhr.status === OK){
            console.log(xhr.responseText); // 这是返回的文本
        } else{
            console.log(&amp;quot;Error: &amp;quot;+ xhr.status); // 在此次请求中发生的错误
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;onreadystatechange&lt;/code&gt; 是异步的，那么这就意味着它将可在任何时候被调用。这种类型的函数被称为回调函数——一旦某些处理完成后，它就会被调用。在此案例中，这个处理发生在服务器。&lt;/p&gt;
&lt;p&gt;对于想学习更多关于 Ajax 基础知识的同学，可关注 MDN 的这篇&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;到底选择-jQuery-还是选择原生-JavaScript-呢？&quot;&gt;&lt;a href=&quot;#到底选择-jQuery-还是选择原生-JavaScript-呢？&quot; class=&quot;headerlink&quot; title=&quot;到底选择 jQuery 还是选择原生 JavaScript 呢？&quot;&gt;&lt;/a&gt;到底选择 jQuery 还是选择原生 JavaScript 呢？&lt;/h3&gt;&lt;p&gt;嗯，好消息是上述代码兼容所有最新的主流浏览器。而坏消息是使用起来十分复杂。的确令人恶心！我已经苦思出一个优雅的解决方案了。&lt;/p&gt;
&lt;p&gt;如果使用 jQuery，则能把上述代码压缩成这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.ajax({
    url: &amp;quot;send-ajax-data.php&amp;quot;
}).done(function(res){
    console.log(res);
}).fail(function(){
    console.log(&amp;quot;Error: &amp;quot; + err.status);
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非常简洁易懂。对于大多数人（我想也包括你）来说，jQuery 已经成为了解决 Ajax 的默认标准。但你知道吗？情况不一定是这样的。jQuery 的存在是为了解决丑陋的 DOM API。但 Ajax 真的是丑陋或复杂的吗？&lt;/p&gt;
&lt;p&gt;在文章的剩余部分，我打算用原生 JavaScript 使 Ajax API 有所改善。关于 Ajax 的完整文档可以在 &lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt; 找到。然而这份说明的标题使我非常受打击。竟然不是“XMLHttpRequest Level 2”，而是“XMLHttpRequest Level 1”——因为在2011年已将两个文档合并。展望未来，它们将被视为单一实体，而现存标准将其称为 &lt;a href=&quot;https://xhr.spec.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest&lt;/a&gt;。这表明社区坚持承诺只有一个标准，这对于想脱离 jQuery 的开发人员来说，是个好消息。&lt;/p&gt;
&lt;p&gt;所以，让我们一起开始吧！&lt;/p&gt;
&lt;p&gt;在这篇文章，我使用 &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;作为后端。没错，这就可以全栈（浏览器和服务器）JS了。Node.js 是很简洁的，我鼓励你能在 &lt;a href=&quot;https://github.com/sitepoint-editors/VanillaAjaxNojQuery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;下载demo，并关注该项目。下面是服务器端的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// app.js
var app = http.createServer(function(req, res){
    if(req.url.indexOf(&amp;quot;/scripts/&amp;quot;) &amp;gt;= 0){
        render(req.url.slice(1), &amp;quot;application/javascript&amp;quot;, httpHandler);
    } else if(req.headers[&amp;apos;x-requested-with&amp;apos;] === &amp;apos;XMLHttpRequest&amp;apos;){
        // Send Ajax response
    } else{
        render(&amp;apos;views/index.html&amp;apos;, &amp;apos;text/html&amp;apos;, httpHandler);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该代码段通过检测请求 URL，确定该app返回的相应内容。如果该请求来自 &lt;code&gt;scripts&lt;/code&gt; 目录，那么服务器将返回内容类型（content type）为 &lt;code&gt;application/javascript&lt;/code&gt; 的相应文件。如果请求头部的 &lt;code&gt;x-requested-with&lt;/code&gt; 被设为 &lt;code&gt;XMLHttpRequest&lt;/code&gt;，那么该请求是 Ajax 请求，然后返回相应数据。除了以上两种情况，服务器将会返回 &lt;code&gt;views/index.html&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面我将会展开上一代码段处理 Ajax 请求的注释部分进行深入讲解。在 Node.js端，我已处理了 &lt;code&gt;render&lt;/code&gt; 和 &lt;code&gt;httpHandler&lt;/code&gt; 的体力活：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// app.js
function render(path, contentType, fn) {
    fs.readFile(__dirname + &amp;apos;/&amp;apos; + path, &amp;apos;utf-8&amp;apos;, function (err, str) {
        fn(err, str, contentType);
    });
}
var httpHandler = function (err, str, contentType) {
    if (err) {
        res.writeHead(500, {&amp;apos;Content-Type&amp;apos;: &amp;apos;text/plain&amp;apos;});
        res.end(&amp;apos;An error has occured: &amp;apos; + err.message);
    } else {
        res.writeHead(200, {&amp;apos;Content-Type&amp;apos;: contentType});
        res.end(str);
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;render&lt;/code&gt; 函数异步读取被请求文件的内容。该函数向被作为回调函数的 &lt;code&gt;httpHandler&lt;/code&gt; 传递一个引用。&lt;br&gt;&lt;code&gt;httpHandler&lt;/code&gt; 函数检测 error 对象是否存在（如：被请求文件不能被打开，该对象就会存在）。另外，指定类型是好的做法，那么服务器返回的文件内容就会拥有适当的 HTTP 状态码（status code）和内容类型（content type）。&lt;/p&gt;
&lt;h3 id=&quot;测试-API&quot;&gt;&lt;a href=&quot;#测试-API&quot; class=&quot;headerlink&quot; title=&quot;测试 API&quot;&gt;&lt;/a&gt;测试 API&lt;/h3&gt;&lt;p&gt;让我们为后端API编写一些单元测试，从而确保它们能正确运行。对于这类测试，我会请求 &lt;a href=&quot;https://www.npmjs.com/package/supertest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supertest&lt;/a&gt; 和 &lt;a href=&quot;https://www.npmjs.com/package/mocha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mocha&lt;/a&gt;帮助。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// test/app.request.js
it(&amp;quot;responds with html&amp;quot;, function(done){
    request(app)
        .get(&amp;quot;/&amp;quot;)
        .expect(&amp;quot;Content-Type&amp;quot;, /html/)
        .expect(200, done);
});
it(&amp;apos;responds with javascript&amp;apos;, function (done) {
request(app)
    .get(&amp;apos;/scripts/index.js&amp;apos;)
    .expect(&amp;apos;Content-Type&amp;apos;, /javascript/)
    .expect(200, done);
});
it(&amp;apos;responds with json&amp;apos;, function (done) {
request(app)
    .get(&amp;apos;/&amp;apos;)
    .set(&amp;apos;X-Requested-With&amp;apos;, &amp;apos;XMLHttpRequest&amp;apos;)
    .expect(&amp;apos;Content-Type&amp;apos;, /json/)
    .expect(200, done);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些测试确保了我们的 app 对于不同请求能返回正确的内容类型(content type)和HTTP 状态码（status code）。一旦你安装了这些依赖，那么你就能使用命令 &lt;code&gt;npm test&lt;/code&gt; 运行这些测试。&lt;/p&gt;
&lt;h3 id=&quot;界面&quot;&gt;&lt;a href=&quot;#界面&quot; class=&quot;headerlink&quot; title=&quot;界面&quot;&gt;&lt;/a&gt;界面&lt;/h3&gt;&lt;p&gt;现在，让我们看看用户界面的 HTML 代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// views/index.html
&amp;lt;h1&amp;gt;Vanilla Ajax without jQuery&amp;lt;/h1&amp;gt;
&amp;lt;button id=&amp;quot;retrieve&amp;quot; data-url=&amp;quot;/&amp;quot;&amp;gt;Retrieve&amp;lt;/button&amp;gt;
&amp;lt;p id=&amp;quot;results&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述的 HTML 代码看起来很简洁。没错，正如你所看到的，所有令人兴奋的事情都发生在 JavaScript。&lt;/p&gt;
&lt;h3 id=&quot;onreadystate-vs-onload&quot;&gt;&lt;a href=&quot;#onreadystate-vs-onload&quot; class=&quot;headerlink&quot; title=&quot;onreadystate vs onload&quot;&gt;&lt;/a&gt;onreadystate vs onload&lt;/h3&gt;&lt;p&gt;如果你看过任何一本权威的、关于 Ajax 的书，你可能会发现 &lt;code&gt;onreadystate&lt;/code&gt; 在书上随处可见。该回调函数需要通过嵌套的 ifs 或多个 case 语句完成，这使得难以记忆。让我们再次回顾 &lt;code&gt;onreadystate&lt;/code&gt; 和  &lt;code&gt;onload&lt;/code&gt; 事件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function() {
    var retrieve = document.getElementById(&amp;apos;retrieve&amp;apos;),
        results = document.getElementById(&amp;apos;results&amp;apos;),
        toReadyStateDescription = function(state) {
            switch (state) {
                case 0:
                    return &amp;apos;UNSENT&amp;apos;;
                case 1:
                    return &amp;apos;OPENED&amp;apos;;
                case 2:
                    return &amp;apos;HEADERS_RECEIVED&amp;apos;;
                case 3:
                    return &amp;apos;LOADING&amp;apos;;
                case 4:
                    return &amp;apos;DONE&amp;apos;;
                default:
                    return &amp;apos;&amp;apos;;
            }
        };
    retrieve.addEventListener(&amp;apos;click&amp;apos;, function(e) {
        var oReq = new XMLHttpRequest();
        oReq.onload = function() {
            console.log(&amp;apos;Inside the onload event&amp;apos;);
        };
        oReq.onreadystatechange = function() {
            console.log(&amp;apos;Inside the onreadystatechange ev![此处输入图片的描述][1]ent with readyState: &amp;apos; +
                toReadyStateDescription(oReq.readyState));
        };
        oReq.open(&amp;apos;GET&amp;apos;, e.target.dataset.url, true);
        oReq.send();
    });
}());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码会在 控制台（console） 输出以下语句：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/08/1439883041onreadystate_vs_onload.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;onreadystatechange&lt;/code&gt; 事件能在请求的任何过程中被触发。如能在每个请求前、请求末。但根据文档，&lt;code&gt;onload&lt;/code&gt; 事件只会在请求成功后触发。又因为 &lt;code&gt;onload&lt;/code&gt; 事件是一个常见的 API，所以你能在很短时间内掌握它。&lt;code&gt;onreadystatechange&lt;/code&gt; 事件可作为后备（原文是backwards compatible 向后兼容？）方案。而 &lt;code&gt;onload&lt;/code&gt; 事件应该是你的首选。而且 &lt;code&gt;onload&lt;/code&gt; 事件与 jQuery 的 &lt;code&gt;success&lt;/code&gt; 回调函数类似，难道不是吗？&lt;/p&gt;
&lt;h3 id=&quot;设置请求头部&quot;&gt;&lt;a href=&quot;#设置请求头部&quot; class=&quot;headerlink&quot; title=&quot;设置请求头部&quot;&gt;&lt;/a&gt;设置请求头部&lt;/h3&gt;&lt;p&gt; jQuery 私下帮你设置请求头部了，所以后端能检测这是一个 Ajax 请求。一般来说，后端并不关心 GET 请求是从哪而来，只要能返回正确的响应即可。当你相用同样的 web API 返回 Ajax 或 HTML 时，这就派上用场了。让我们看看如何通过原生 JavaScript 设置请求头部：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var oReq = new XMLHttpRequest();
oReq.open(&amp;apos;GET&amp;apos;, e.target.dataset.url, true);
oReq.setRequestHeader(&amp;apos;X-Requested-With&amp;apos;, &amp;apos;XMLHttpRequest&amp;apos;);
oReq.send();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与此同时，我们在 Node.js 做一个检测：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (req.headers[&amp;apos;x-requested-with&amp;apos;] === &amp;apos;XMLHttpRequest&amp;apos;) {
    res.writeHead(200, {&amp;apos;Content-Type&amp;apos;: &amp;apos;application/json&amp;apos;});
    res.end(JSON.stringify({message: &amp;apos;Hello World!&amp;apos;}));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正如你所看到的，原生 Ajax 是一个灵活且现代化的前端 API。你可以利用请求头部做很多事情，其中一种是版本控制。例如，我想让某个 web API 支持多个版本。但我又不想利用 URL，取而代之的是：通过设置请求头部，使客户端能选择它们想要的版本。所以，我们能这样设置请求头部：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;oReq.setRequestHeader(&amp;apos;x-vanillaAjaxWithoutjQuery-version&amp;apos;, &amp;apos;1.0&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，在后端写上相应代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (req.headers[&amp;apos;x-requested-with&amp;apos;] === &amp;apos;XMLHttpRequest&amp;apos; &amp;amp;&amp;amp;
    req.headers[&amp;apos;x-vanillaajaxwithoutjquery-version&amp;apos;] === &amp;apos;1.0&amp;apos;) {
    // Send Ajax response
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们能利用 Node.js 为我们提供的 headers 对象进行相应检测。而唯一需要注意的地方是：以小写字母读取它们。&lt;/p&gt;
&lt;h3 id=&quot;响应类型&quot;&gt;&lt;a href=&quot;#响应类型&quot; class=&quot;headerlink&quot; title=&quot;响应类型&quot;&gt;&lt;/a&gt;响应类型&lt;/h3&gt;&lt;p&gt;你可能想知道为什么 &lt;code&gt;responseText&lt;/code&gt; 返回的是字符串，而不是能被我们操作的普通 JSON（Plain Old JSON）。原来是因为我没有设置合适的 &lt;code&gt;responseType&lt;/code&gt; 属性。该 Ajax 属性会很好地告诉前端 API 所期望服务器返回的数据类型。所以，我们要好好利用它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var oReq = new XMLHttpRequest();
oReq.onload = function (e) {
    results.innerHTML = e.target.response.message;
};
oReq.open(&amp;apos;GET&amp;apos;, e.target.dataset.url, true);
oReq.responseType = &amp;apos;json&amp;apos;;
oReq.send();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哇，这样我们就不必再对返回的纯文本解析为 JSON 了，我们能告诉 API 我们期待接收的数据类型。该特性几乎得到了所有最新主流浏览器的支持。当然，jQuery 会自动帮我们转为适当的类型。但现在的原生 JavaScript 也具有方便的、完成同样事件的方法。 原生 Ajax 已经支持很多其它响应类型，如 XML。&lt;/p&gt;
&lt;p&gt;但遗憾的是，到 IE11 为止，开发团队仍未对 &lt;a href=&quot;https://connect.microsoft.com/IE/feedback/details/794808&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xhr.responseType=’json’&lt;/a&gt; 进行支持。虽然该特性目前在 &lt;a href=&quot;http://caniuse.com/#feat=xhr2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Microsoft Edge&lt;/a&gt; 得到支持。但这个 Bug 提出几乎两年了。我坚信 Microsoft 团队一直在努力地改进浏览器。让我们期待 Microsoft Edge、aka Project Spartan 当初提出的承诺。&lt;br&gt;当然，你可以这个解决这个 IE 问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;oReq.onload = function (e) {
    var xhr = e.target;
    if (xhr.responseType === &amp;apos;json&amp;apos;) {
        results.innerHTML = xhr.response.message;
    } else {
        results.innerHTML = JSON.parse(xhr.responseText).message;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;避免缓存&quot;&gt;&lt;a href=&quot;#避免缓存&quot; class=&quot;headerlink&quot; title=&quot;避免缓存&quot;&gt;&lt;/a&gt;避免缓存&lt;/h3&gt;&lt;p&gt;对 Ajax 请求进行缓存的浏览器特性都快被我们忘记了。例如，IE 就默认是这样。我还曾因此导致我的 Ajax 不执行而苦恼了几个小时。幸运的是，jQuery 默认清除浏览器缓存。当然，你能在纯 Ajax 达到该目的，而且相当简单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var bustCache = &amp;apos;?&amp;apos; + new Date().getTime();
oReq.open(&amp;apos;GET&amp;apos;, e.target.dataset.url + bustCache, true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看 &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery 文档&lt;/a&gt;，可知道 jQuery 在每个请求（GET）后面追加一个时间戳作为查询字符串。这在某个程度上让请求变得独一无二，并避免浏览器缓存。每当你触发 HTTP Ajax 请求，你能看到类似如下请求：&lt;br&gt;&lt;img src=&quot;http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/08/1439883644cache_busting_vanilla_ajax.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;OK！这就没有戏剧性的事情发生了。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;我希望你能喜欢这篇关于原生 Ajax 的文章。Ajax 在过去某段时间里，被人们看作是一种可怕的怪兽。而事实上，我们已经覆盖了原生 Ajax 所有基础知识。&lt;/p&gt;
&lt;p&gt;最后，我会留给你一个简洁的方式进行Ajax调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var oReq = new XMLHttpRequest();
oReq.onload = function (e) {
    results.innerHTML = e.target.response.message;
};
oReq.open(&amp;apos;GET&amp;apos;, e.target.dataset.url + &amp;apos;?&amp;apos; + new Date().getTime(), true);
oReq.responseType = &amp;apos;json&amp;apos;;
oReq.send();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不要忘记，你能在 &lt;a href=&quot;https://github.com/sitepoint-editors/VanillaAjaxNojQuery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; 找到整个案例。我希望在评论里看到你对原生 Ajax 的想法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;感谢您的阅读。&lt;br&gt;如果你觉得这篇文章对您有帮助或者觉得我翻译得不错，那给我个 &lt;a href=&quot;https://github.com/JChehe/translation/blob/master/%E8%84%B1%E7%A6%BBjQuery%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FAjax.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;star&lt;/a&gt; 吧.&lt;br&gt;英文出处：&lt;a href=&quot;http://www.sitepoint.com/guide-vanilla-ajax-without-jquery/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《A Guide to Vanilla Ajax Without jQuery》&lt;/a&gt;&lt;br&gt;翻译： &lt;a href=&quot;https://github.com/JChehe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超 J.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意：未经许可，禁止转载！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; 是异步的JavaScript和XML的简称，是一种更新页面某部分的机制。它赋予了你从服务器获取数据后，更新页面某部分的权力，从而避免了刷新整个页面。另外，以此方式实现页面局部更新，不仅能有效地打造流畅的用户体验，而且减轻了服务器的负载。&lt;br&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="translation" scheme="http://yoursite.com/tags/translation/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>再次阅读《精通CSS-高级Web标准解决方案（第二版）》</title>
    <link href="http://yoursite.com/2015/11/24/2015-11-24-read-css-mastery-advanced-web-standards-solutions-second-edition-again/"/>
    <id>http://yoursite.com/2015/11/24/2015-11-24-read-css-mastery-advanced-web-standards-solutions-second-edition-again/</id>
    <published>2015-11-23T16:25:31.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;昨天（2015年11月21日） 在我们学校举行了大型招聘会。我面试了三家企业。有一家企业是先做笔试题的，做完后发现自己还是很多细节处理得不够。无论还有没有二面，我还是要重新把《精通CSS》和《JavaScript高级程序设计》这两本书重新看一遍。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h3&gt;&lt;p&gt;语义化的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己更易处理（搜索和避免不必要的代码膨胀）&lt;/li&gt;
&lt;li&gt;利用SEO&lt;/li&gt;
&lt;li&gt;屏幕阅读的用户可以依靠标题进行页面导航&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;div（division，部分）对块级元素进行分组，span对行内元素进行分组或标识。&lt;/p&gt;
&lt;p&gt;XHTML 1.0和 HTML 4.01之间主要差异是它遵守XML编码约定：&lt;strong&gt;所有XHTML属性必须包含引号，所有元素必须是封闭的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DTD（文档类型定义）是一组机器可读的规则，它们定义XML或HTML的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施，浏览器通过分析页面的 DOCTYPE 声明来了解要使用哪个DTD。&lt;/p&gt;
&lt;p&gt;DOCTYPE当前有两种风格：严格(strict) 和过渡 (transitional)。后者的目的是帮助开发人员从老版本迁移到新版本。因此，HTML 4.01和XHTML 1.0过渡版本仍然允许使用已废弃的元素（如font），但这些语言的严格版本禁止使用废弃的元素。&lt;/p&gt;
&lt;p&gt;浏览器模式：标准模式和混杂模式&lt;/p&gt;
&lt;h3 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;第二章&quot;&gt;&lt;/a&gt;第二章&lt;/h3&gt;&lt;h4 id=&quot;选择器：&quot;&gt;&lt;a href=&quot;#选择器：&quot; class=&quot;headerlink&quot; title=&quot;选择器：&quot;&gt;&lt;/a&gt;选择器：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;常用选择器：&lt;br&gt;类型选择器（元素选择器）、后代选择器&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伪类：&lt;br&gt;链接伪类 :link和:visited，只能用于锚元素&lt;/p&gt;
&lt;p&gt;动态伪类 :hover、:active和:focus。理论上可应用于任何元素。IE6 只能对 锚链接 应用:active 和:hover选择器，完全忽略:focus （已验证）。 IE 7在任何元素上都支持:hover，但忽略:active和:focus（书上原话），但在IE11选择IE7文档模式或IETester时，a标签是支持:active。&lt;/p&gt;
&lt;p&gt;最后，可以把伪类组合使用，以至可创建更复杂的行为，如 a:visited:hover{} 让已访问与未访问链接实现不同的鼠标悬停效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通用选择器：*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高级选择器（ CSS 2.1和CSS3选择器）：&lt;br&gt;大多数现代浏览器（IE7及以上）支持这些高级选择器，但IE6和更低版本不支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子选择器&amp;gt;（IE7及以上），但在IE7中有个小Bug，如果父元素和子元素之间有HTML注释，就会出问题（测试时，发现并没有问题）。当然，对于IE6，可以利用通用选择器 &lt;code&gt;*&lt;/code&gt; 模拟这个效果，&lt;code&gt;div p{/*设置效果*/} div p *{/*还原原来的值*/}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;相邻同胞选择器+，同样，在IE7，与自选择有同样的BUG，导致失效（已验证）。&lt;/li&gt;
&lt;li&gt;后面兄弟选择器~（书上没有），经测试，IE7支持。&lt;/li&gt;
&lt;li&gt;属性选择器：a[title]、a[rel=”nofollow”] 等全部属性选择器IE7都支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;层叠和特殊性&quot;&gt;&lt;a href=&quot;#层叠和特殊性&quot; class=&quot;headerlink&quot; title=&quot;层叠和特殊性&quot;&gt;&lt;/a&gt;层叠和特殊性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;特殊性&lt;br&gt; !important &amp;gt; 行内样式 &amp;gt; ID &amp;gt; 类、伪类和属性选择器 &amp;gt; 类型选择器（元素选择器）和伪元素选择器&lt;/li&gt;
&lt;li&gt;层叠：当两个规则具有相同的特殊性时，后定义的规则优先&lt;/li&gt;
&lt;li&gt;继承&lt;br&gt; 直接应用于元素的任何样式总会覆盖继承而来的样式。这是因为继承而来的样式的特殊性为空。 这就解释了“为什么a标签和标题标签要单独指定的样式”这个问题。如下图，chrome浏览器下。a标签和h2标签的默认样式。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122142212655-260430037.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122142226390-963867854.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第三章-可视化格式模型&quot;&gt;&lt;a href=&quot;#第三章-可视化格式模型&quot; class=&quot;headerlink&quot; title=&quot;第三章 可视化格式模型&quot;&gt;&lt;/a&gt;第三章 可视化格式模型&lt;/h3&gt;&lt;h4 id=&quot;盒模型&quot;&gt;&lt;a href=&quot;#盒模型&quot; class=&quot;headerlink&quot; title=&quot;盒模型&quot;&gt;&lt;/a&gt;盒模型&lt;/h4&gt;&lt;p&gt;页面上每个元素都被看作一个矩形框，该框由元素的内容、内边距、边框和外边距（透明的）组成。&lt;/p&gt;
&lt;p&gt;CSS2.1的outline属性，轮廓绘制在元素框（个人认为：即不包括外边距的矩形框）上，所以不影响元素的大小或定位（这里，对我产生一个误区，即定位是按元素框定位（即不包括外边距），其实定位是包括外边距的，即矩形框）。支持IE8及以上。&lt;/p&gt;
&lt;p&gt;IE6的混杂模式下，拥有类似box-sizing:border-box的特性，即指定的宽度是内容、内边距和边框的宽度总和。&lt;/p&gt;
&lt;p&gt;外边距叠加：即当两个或更多垂直外边距相遇时，它们将形成一个外边距（高度为较大者）。情况有如下几种：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 两个同级上下元素
2. 祖先元素与内嵌元素（没有内边距或边框隔开,就祖先元素overflow:hidden/auto/scroll可有隔开的作用，避免叠加）
3. 本身是空元素时,自身上下外边距也会重合（没有边框或内边距隔开）
4. 当然前面几种情况可以结合发生。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有普通文档流中，块框的垂直外边距才回发生叠加。行内框、浮动框或绝对（个人认为包括绝对定位和固定定位）定位框之间的外边距不会发生叠加。&lt;/p&gt;
&lt;h4 id=&quot;可视化格式模型&quot;&gt;&lt;a href=&quot;#可视化格式模型&quot; class=&quot;headerlink&quot; title=&quot;可视化格式模型&quot;&gt;&lt;/a&gt;可视化格式模型&lt;/h4&gt;&lt;p&gt;CSS中有3种基本的定位机制：普通流、浮动和绝对定位。&lt;/p&gt;
&lt;p&gt;行内框：垂直内边距、边框和外边距不影响行内框的高度。同样，显式设置高度或宽度也没有影响。修改行内框尺寸的唯一方法是修改行高或水平内边距、边框、外边距。&lt;/p&gt;
&lt;p&gt;行框：由一行形成的水平框称为行框。行框的高度总是足以容纳它包含的所有行内框。&lt;/p&gt;
&lt;p&gt;display:inline-block; 让元素像行内元素一样水平依次排列，但框的内容仍然符合块级框的行为。&lt;strong&gt;支持IE8及以上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绝对定位：绝对定位的元素的位置是相对于最近的已定位祖先元素，如无，则根据用户代理的不同，初始包含块可能是画布（是iframe吗？）或HTML元素。&lt;/p&gt;
&lt;p&gt;在IE6中有个BUG：相对于相对定位的框的右边或顶部设置绝对定位的框的位置，那么需要确保相对定位的框已设定了尺寸（测试时发现，块级元素只需设置高度）。否则，绝对定位元素会错误地相对于画布定位这个框（已验证）&lt;/p&gt;
&lt;p&gt;固定定位：IE6不支持，IE7部分支持，但是实现中有许多bug。&lt;/p&gt;
&lt;p&gt;浮动：浮动的框可左右移动，直到它的外边缘（包括外边距）碰到包含框或另外一个浮动框的边缘。因为浮动框不在文档的普通流，所以文档的普通流中的块框表现得就像浮动框不存在一样。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122161707983-603474969.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;如果包含块太窄，以致不能同时水平排列3个浮动元素，且浮动元素的高度不同，那么当它们向下移动时，可能被其它浮动元素卡主。&lt;/p&gt;
&lt;p&gt;前面说到浮动会让元素脱离文档流，不再影响不浮动的元素。实际上，框的文本内容（不止文本）会受到浮动元素的影响，会移动以留出空间，用技术术语来说，浮动元素旁边的行框被缩短，从而给浮动元素留出空间，因此行框围绕浮动框。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122162756624-498882882.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122164038233-621267712.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151122164048999-1126569143.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;  &lt;/p&gt;
&lt;p&gt;要想阻止行框围绕在浮动框的外边，需要对包行这些行框的元素应用clear属性。清除浮动时，浏览器给元素顶上添加足够的外边距，使元素的顶边缘下降到浮动框下面。&lt;/p&gt;
&lt;p&gt;子元素浮动后，脱离文档流，不能撑起父元素高度，要撑起父元素高度的方法有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;overflow：hidden/auto&lt;/li&gt;
&lt;li&gt;父元素也浮动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.clearfix:after{content:&amp;quot; &amp;quot;;height:0;visibility:hidden;display:block;clear:both}&lt;/code&gt; 或 &lt;code&gt;.clearfix:after{content:&amp;quot; &amp;quot;;display:table;clear:both}。&lt;/code&gt;由于IE6/7不支持:after伪元素，所以要使用以下hack: &lt;code&gt;.clearfix{zoom:1; //trigger IE haslayout}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加额外标签，然后clear&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;第四章-背景图像效果&quot;&gt;&lt;a href=&quot;#第四章-背景图像效果&quot; class=&quot;headerlink&quot; title=&quot;第四章 背景图像效果&quot;&gt;&lt;/a&gt;第四章 背景图像效果&lt;/h3&gt;&lt;p&gt;CSS规范不允许混合使用多种单位。实际上，浏览器是支持的。&lt;/p&gt;
&lt;p&gt;opacity：IE8及以下不支持，但是可以用  filter:alpha(opacity=80) 指定透明度。opacity 是继承的，它的后台元素都会受影响。另外也是可以叠加的，父元素0.8，子元素0.8，那么子元素是0.64。&lt;/p&gt;
&lt;p&gt;rgba：IE8及以下不支持，是针对opacity而生的，不影响后代元素。&lt;/p&gt;
&lt;p&gt;IE7 支持 min-height、max-height&lt;/p&gt;
&lt;p&gt;许多流行的屏幕阅读器会忽略那些display值为none或visibility为hidden的元素。所以这会造成严重的可访问性问题。  &lt;/p&gt;
&lt;p&gt;解决办法是：通过设置非常大的负值文本缩进：text-indent:-5000em;（text-indent适用于块级元素）&lt;/p&gt;
&lt;p&gt;IE6不直接支持PNG透明度的，对于IE6，书上列出两种方法（网上更多）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在针对IE6的CSS文件里：&lt;br&gt;&lt;code&gt;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&amp;#39;/img/my-image.png&amp;#39;, sizingMethod=&amp;#39;crop&amp;#39;);/* 网上说，路径是相对于html的，而不是CSS的。*/ 
background:none;/* 取消原来的背景图，防止遮住该过滤器。*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE PNG fix技术。利用Microsoft专有的CSS扩展——行为（behavior）。下载合适的.htc文件，并在IE6专用的样式表引用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img, div{
　　behavior:url(iepngfix.htc)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;备注：屏幕阅读器是指将屏幕显示内容转为声音或布莱叶盲文显示，以帮助视力障碍者使用电脑的软件。&lt;/p&gt;
&lt;h3 id=&quot;第五章-对链接应用样式&quot;&gt;&lt;a href=&quot;#第五章-对链接应用样式&quot; class=&quot;headerlink&quot; title=&quot;第五章 对链接应用样式&quot;&gt;&lt;/a&gt;第五章 对链接应用样式&lt;/h3&gt;&lt;p&gt;为提高页面的可访问性，在定义鼠标悬停状态时，最好在链接上添加:focus伪类。在通过键盘移动到链接时，也可以让链接显示的样式与鼠标悬停时相同。&lt;/p&gt;
&lt;p&gt;a:hover, ac:foucs{} /&lt;em&gt; 这也是bootstrap用到的 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;正确写法：&lt;/p&gt;
&lt;p&gt;a:link, a:visited{text-decoration: none;}&lt;/p&gt;
&lt;p&gt;a:hover, a:focus, a:active{text-decoration:underline}&lt;/p&gt;
&lt;p&gt;如果次序反过来，则下划线效果就不起作用（因为层叠造成的，当两个规则具有相同的特殊性时，后定义的规则优先）：&lt;/p&gt;
&lt;p&gt;对于a标签，最好按以下顺序： a:link, a:visited, a:hover, a:focus, a:active (LVHFA)&lt;/p&gt;
&lt;p&gt;对于不支持背景图动画的，常会显示第一帧，以确保平稳退化。（连IE5都支持 –！）&lt;/p&gt;
&lt;h3 id=&quot;第六章-对列表应用样式和创建导航条&quot;&gt;&lt;a href=&quot;#第六章-对列表应用样式和创建导航条&quot; class=&quot;headerlink&quot; title=&quot;第六章 对列表应用样式和创建导航条&quot;&gt;&lt;/a&gt;第六章 对列表应用样式和创建导航条&lt;/h3&gt;&lt;p&gt;初始化 ul{margin:0;padding:0;list-style-type:none;}&lt;/p&gt;
&lt;p&gt;不对应用列表项应用样式，而是对其中包含的锚链接应用样式，由此提供更好的浏览器兼容性。&lt;/p&gt;
&lt;h3 id=&quot;第七章-对表单和数据表格应用样式&quot;&gt;&lt;a href=&quot;#第七章-对表单和数据表格应用样式&quot; class=&quot;headerlink&quot; title=&quot;第七章 对表单和数据表格应用样式&quot;&gt;&lt;/a&gt;第七章 对表单和数据表格应用样式&lt;/h3&gt;&lt;h4 id=&quot;表格：&quot;&gt;&lt;a href=&quot;#表格：&quot; class=&quot;headerlink&quot; title=&quot;表格：&quot;&gt;&lt;/a&gt;表格：&lt;/h4&gt;&lt;p&gt;表格特有的元素：capiton用于指定表格的标题；summary属性用于描述表格内容。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table summary=&amp;quot;I am a Description&amp;quot;&amp;gt;
    &amp;lt;caption&amp;gt;表格标题&amp;lt;/caption&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　一个table里，tbody 、tfooter只能使用一个，而tbody可以将复杂的表格划分为多个部分。&lt;/p&gt;
&lt;p&gt;CSS的border-spacing属性可以控制单元格之间的距离。但IE7及以下不支持。因此需要老式但可靠的cellspacing属性（支持IE6和IE7）。严格来说，该属性是表现性的。&lt;/p&gt;
&lt;h4 id=&quot;表单：&quot;&gt;&lt;a href=&quot;#表单：&quot; class=&quot;headerlink&quot; title=&quot;表单：&quot;&gt;&lt;/a&gt;表单：&lt;/h4&gt;&lt;p&gt;对于表单，对于必填域和提示，最适合用em或strong元素。&lt;/p&gt;
&lt;p&gt;OS X等许多系统为了保持一致，禁止修改input按钮样式，但button不受限制。&lt;/p&gt;
&lt;p&gt;对于需要隐藏的label，将display设置为none会住址许多屏幕阅读器访问它们。其中有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置较大的负文本缩进将标签定位到屏幕外（书上的）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bootstrap的.sr-only&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.sr-only{
    position:absolute;
    width:1px;
    height:1px;
    padding:0;
    margin: -1px;
    overflow:hidden;
    clip:react(0,0,0,0);
    border:0;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;第八章-布局&quot;&gt;&lt;a href=&quot;#第八章-布局&quot; class=&quot;headerlink&quot; title=&quot;第八章 布局&quot;&gt;&lt;/a&gt;第八章 布局&lt;/h3&gt;&lt;p&gt;IE6 不支持margin:auto居中（在IETester是支持的），解决办法是：body{text-align:center}　.wrapper{text-align:left} /&lt;em&gt; 因为IE将text-align误解为让所有东西居中，而不只是文本 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;IE6 因为是考虑元素内容的尺寸，而不是元素本身尺寸。在符合标准的浏览器中，如果元素的内容太大，它只会超出框之外。但是在IE6中，如果元素内容太大，则整个元素就会扩展(包括宽和高)。即设定的width表现得像 min-width&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151123214534686-1472015437.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151123214541967-166102166.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;流式布局：百分比&lt;/p&gt;
&lt;p&gt;弹性布局：字号em&lt;/p&gt;
&lt;p&gt;创建高度相等的列：关键点是给每个框设置大的padding-bottom，然后用数值相近的负margin-bottom抵消这个高度。然后在#wrapper设置 overflow:hidden。&lt;/p&gt;
&lt;p&gt;从这个案例可以看出：加入把框看作是一个垂直于屏幕的立体，那么margin是最底层的，而元素之间的间距是靠margin隔开的。又因为padding-bottom在margin之上，所以处于外层padding让我们看到背景色，而负值margin则让旁边的元素处于其padding下方。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151123222336264-1720178800.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;（Firefox 3D布局）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;// 假设.box因为内容不一样而高度不同&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#wrapper{
  overflow:hidden;
}
.box{
  width:   30%;
  float:left;
  padding-bottom:520px;
  margin-bottom: -500px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;第九章-bug和修复bug&quot;&gt;&lt;a href=&quot;#第九章-bug和修复bug&quot; class=&quot;headerlink&quot; title=&quot;第九章 bug和修复bug&quot;&gt;&lt;/a&gt;第九章 bug和修复bug&lt;/h3&gt;&lt;p&gt;　拥有布局：IE6的bug最多，IE6与其它浏览器表现不同的原因之一是，显示引擎使用一个称为布局（layout）的内部概念。布局问题是许多IE/WIN显示BUG的根源。&lt;/p&gt;
&lt;p&gt;   什么是布局？ Window上的IE使用布局概念来控制元素的尺寸和定位。那些“拥有布局（haslayout）”的元素负责本身及其子元素的尺寸设置和定位。如果一个元素“没有拥有布局”，那么它的尺寸和位置由最近的拥有布局的祖先元素控制。&lt;/p&gt;
&lt;p&gt;　　IE显示引擎利用布局概念减少它的处理开销。在理想的情况下，所有元素都控制自己的尺寸和定位。但是，这会在IE中导致很大的性能问题。因为，IE开发团队决定只将布局应用于实际需要它的那些元素，这样就可以充分地减少性能开销。&lt;/p&gt;
&lt;p&gt;在默认情况下拥有布局的元素包括：body、html（标准模式中）、table、tr、td、img、hr、input、select、textarea、button、iframe、embed、object、applet、marquee。&lt;/p&gt;
&lt;p&gt;布局概念是Window上的IE特有的，而且它不是CSS属性。尽管设置某些CSS属性会使元素拥有布局，但是在CSS中无法显示地设置布局。可以使用JavaScript函数hasLayout查看一个元素是否拥有布局。如果元素拥有布局，这个返回true，反之，返回false。hasLayout是一个只读属性，所以无法使用JavaScript进行设置。&lt;/p&gt;
&lt;p&gt;设置以下CSS属性会自动地使元素拥有布局：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;float:left或right &lt;/li&gt;
&lt;li&gt;display:inline-block &lt;/li&gt;
&lt;li&gt;width:任何值  &lt;/li&gt;
&lt;li&gt;height:任何值  ⑤zoom:任何值  &lt;/li&gt;
&lt;li&gt;writing-mode:tb-rl&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在IE7中，以下属性也成了布局触发器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;overflow:hidden、scroll或auto &lt;/li&gt;
&lt;li&gt;min-width:任何值  &lt;/li&gt;
&lt;li&gt;max-width:除了none之外的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;布局的效果&lt;/p&gt;
&lt;p&gt;布局是许多IE显示BUG的根源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个文本段落靠着一个浮动元素，那么我们期望文本围绕这个元素。但是在Window上的IE6，如果段落拥有布局（如设置高度），那么它就被限制为矩形，因此阻止文本围绕浮动元素。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151123232532967-1416854027.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;  &lt;/li&gt;
&lt;li&gt;在IE6中，拥有布局的元素会错误地扩展以便适应内容的尺寸。width和height更像是min-width和min-height。&lt;/li&gt;
&lt;li&gt;其他问题：&lt;ol&gt;
&lt;li&gt;拥有布局的元素不会收缩（什么意思？）&lt;/li&gt;
&lt;li&gt;布局元素对浮动元素自动清理（所以.clearfix{zoom:1}）&lt;/li&gt;
&lt;li&gt;相对定位的元素没有布局&lt;/li&gt;
&lt;li&gt;在拥有布局的元素之间外边距不叠加&lt;/li&gt;
&lt;li&gt;在没有布局的块级链接上，单机区域只覆盖文本&lt;/li&gt;
&lt;li&gt;在滚动时，列表项上的背景图像间歇性地显示和消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，如果遇到一个IE BUG，首先应该做的一件事情是尝试通过应用规则迫使元素拥有布局。&lt;/p&gt;
&lt;p&gt;在IE7中，已经修复大多数与布局相关的问题。但是该团队的解决方法是找到常见的显示BUG，然后通过在代码中创建列外来处理它们，而不是解决顶层问题。因此，可能有一些不显著的布局bug还没有被发现。 &lt;/p&gt;
&lt;p&gt;IE8使用全新的显示引擎，据称不使用hasLayout属性，因此解决了这些问题的根源。&lt;/p&gt;
&lt;p&gt;IE条件注释， 在IE5首次出现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if IE]&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;CSS被设计成具有很强的向前兼容性。如果浏览器不理解某个选择器，则会忽略整个规则。如果不理解某个属性或值，则会忽略整个声明（某个CSS声明）。&lt;/p&gt;
&lt;p&gt;应用星号HTML hack。针对IE6。因为IE6有一个匿名的根元素，它包围着HTML元素。所以针对IE6 可以这样应用规则：  * html #content{}&lt;/p&gt;
&lt;h4 id=&quot;常见bug及其修复方法&quot;&gt;&lt;a href=&quot;#常见bug及其修复方法&quot; class=&quot;headerlink&quot; title=&quot;常见bug及其修复方法&quot;&gt;&lt;/a&gt;常见bug及其修复方法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;双外边距浮动BUG（IE6）：使任何浮动元素上的外边距（左右两侧外边距）加倍。&lt;br&gt;解决方法： display:inline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3像素文本偏移BUG（IE6）：当文本与一个浮动元素相邻时，这个bug就会表现出来，例如，假设将一个元素向左浮动，并且不希望相邻段落中文本围绕浮动元素。你可能会在段落上应用一个左外边距，其宽度等于浮动元素的宽度：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.myFloat{float:left;width:200px}

p{margin-left:200px}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果这么做，在文本和浮动元素之间就会出现一个莫名其妙的3像素间隙。&lt;br&gt;&lt;img src=&quot;http://7xq7nb.com1.z0.glb.clouddn.com/615180-20151124111613202-673126870.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;修复这个Bug需要双管齐下。&lt;/p&gt;
&lt;p&gt;首先，针对IE6 为文本框设置height:1%(IE6会把height当成min-height)，这样文本框就会拥有布局，由前面可知，拥有布局的元素被限制为矩形。并且出现在浮动元素的旁边而不是它们的下面。添加200px的外边距实际上会在IE6中在浮动元素和段落之间产生200像素的间隙（在IETester并没有）。为了避免这个间隙，需要为IE6专门设置margin-left为0(还是要设置为0的，否则取消不了这3px)。这样文本偏移被修复了，但是现在另外一个3px间隙出现了，这一次是在浮动元素上。为了去掉这个间隙，需要在浮动元素上设置一个负的3px右外边距 .myFloat{margin-right:3px}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE6的重复字符bug&lt;/p&gt;
&lt;p&gt;在某些情况下，一系列浮动元素的最后一个元素中的最后几个字符会在浮动元素下面重复出现。当在一系列浮动元素的第一个和最后一个元素之间有多个注释时，就会出现这个BUG。前两个注释没有影响，但是后续的每个注释会导致两个字符重复出现。所以3个注释会导致两个重复字符，4个注释会导致4个重复字符，5个注释会导致6个重复字符。&lt;/p&gt;
&lt;p&gt;这个BUG似乎与前面的3px文本偏移bug相关。为了修复这个bug，可以通过设置负的右外边距从最后一个浮动元素上去掉3px，或者使容器扩大3px。但是，这两种方法可能在IE7中造成问题最好的方法是删除注释。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE6的“藏猫猫”bug&lt;/p&gt;
&lt;p&gt;因为在某些条件下问来看起来消失了，只有在重新加载页面时才再度出现。&lt;/p&gt;
&lt;p&gt;出现这个bug的条件是：一个浮动元素后面跟着一些非浮动元素，然后是一个清理元素，所有这些元素都包含在一个设置了背景颜色或图像的父元素中。如果清理元素碰到了浮动元素，那么中间的非浮动元素看起来消失了，隐藏到了父元素的背景颜色或图像后面，只有在刷新页面时才重新出现。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去掉父元素上的背景颜色或图像。但是这常常不可行。&lt;/li&gt;
&lt;li&gt;避免清理元素与浮动元素接触&lt;/li&gt;
&lt;li&gt;容器应用了特定的尺寸，那么这个BUG视乎就不会出现&lt;/li&gt;
&lt;li&gt;给容器指定行高 &lt;/li&gt;
&lt;li&gt;将浮动元素和容器元素的position属性设置为relative也会减轻这个问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相对容器中的绝对定位（IE6BUG前面有提过）&lt;/p&gt;
&lt;p&gt;这bug的原因在于相对定位的元素没有获得IE/win的内容layout属性。因此它不创建新的定位上下文，所有绝对定位元素相对于视口进行定位。&lt;/p&gt;
&lt;p&gt;解决办法：让相对容器拥有布局，height:1%。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;第10章-研究案例&quot;&gt;&lt;a href=&quot;#第10章-研究案例&quot; class=&quot;headerlink&quot; title=&quot;第10章 研究案例&quot;&gt;&lt;/a&gt;第10章 研究案例&lt;/h3&gt;&lt;p&gt;Reset CSS ：&lt;a href=&quot;http://meyerweb.com/eric/tools/css/reset/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://meyerweb.com/eric/tools/css/reset/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;昨天（2015年11月21日） 在我们学校举行了大型招聘会。我面试了三家企业。有一家企业是先做笔试题的，做完后发现自己还是很多细节处理得不够。无论还有没有二面，我还是要重新把《精通CSS》和《JavaScript高级程序设计》这两本书重新看一遍。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一个JavaScript 大牛？</title>
    <link href="http://yoursite.com/2015/09/01/2015-9-1-how-to-be-a-great-javascript-software-developer/"/>
    <id>http://yoursite.com/2015/09/01/2015-9-1-how-to-be-a-great-javascript-software-developer/</id>
    <published>2015-09-01T03:23:45.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;在成长的过程中，我的兴趣点不断发散，而且都是看似不相关的领域。我喜欢数学正如我喜欢历史一样。我的目标是成为一个 多才多艺的人 – 博学者-，能在多个领域成为优秀人才。这证实是一项艰巨的任务，我忽然面临着行行皆通，样样稀松的危险。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我开始考虑专注于某些领域，这样即使不能成为像文艺复兴时期的通才，但至少能精通某些方面。那我怎么样才能专注于某一领域的同时，掌握软件开发所需的庞大的知识体系呢？&lt;/p&gt;
&lt;p&gt;本帖内容是基于我过去 5 年经验编写的，概述了我成为一个优秀的 JavaScript 开发者所用到的技术和资源。&lt;/p&gt;
&lt;p&gt;当今大多数 web 开发者都面临着同样的问题：他们不得不擅长多个不同领域，从数据库到后端架构，再到前端的用户界面，用所精通的 CSS 知识去修改 UI 。&lt;/p&gt;
&lt;h2 id=&quot;看书&quot;&gt;&lt;a href=&quot;#看书&quot; class=&quot;headerlink&quot; title=&quot;看书&quot;&gt;&lt;/a&gt;看书&lt;/h2&gt;&lt;p&gt;为了达到精通，专注与努力是首要条件。如果不投入全身心工作，最后你只会一知半解。例如通过阅读一些博客文章，因为初期时间投入较低，所以看起来会比较简单。但从长远来看，这种学习模式将会比专注于学习精髓的过程花费更多的时间。解决这个难题的方法很简单：看书。&lt;/p&gt;
&lt;p&gt;书籍让我们站在文明的肩膀上。而精炼的文字让我们的知识代代相传。而对于如何成为 web 技术专家这个问题，你在学习的过程中就要与 web 本身保持一定距离。因为 web 对于学习来说，其本身就是一个混杂且分散的媒介，所以我的第一个建议是阅读相关专业的书籍。&lt;/p&gt;
&lt;p&gt;对于 JavaScript，从 &lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript 语言精髓》&lt;/a&gt; 这本被称为 JavaScript 圣经的书开始。这本书虽然比较旧，但非常适合入门。&lt;a href=&quot;http://shop.oreilly.com/product/9780596805531.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript权威指南》&lt;/a&gt; 也是必备的，尽管你可能会将它作为一个参考书籍。另外，jQuery 作者 John Resig 的 &lt;a href=&quot;http://blog.ustunozgur.com/javascript/programming/books/videos/2015/06/17/www.manning.com/resig/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript 忍者禁术》&lt;/a&gt; 也是不容错过的。如果你在寻找好（在线免费的）书，可以看看 &lt;a href=&quot;https://leanpub.com/javascript-allonge/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript Allongé》&lt;/a&gt; 、&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《You Don’t Know JS》&lt;/a&gt; 和 &lt;a href=&quot;http://eloquentjavascript.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Eloquent JavaScript》&lt;/a&gt;（&lt;a href=&quot;https://watchandcode.com/courses/eloquent-javascript-the-annotated-version&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里&lt;/a&gt; 可以看它的注释版本）。这些都能以电子书或印刷版的形式购买。另外，Mozilla’s Developer Network 也有很好的 “&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 指南&lt;/a&gt;”。&lt;/p&gt;
&lt;h2 id=&quot;学习、使用并阅读库&quot;&gt;&lt;a href=&quot;#学习、使用并阅读库&quot; class=&quot;headerlink&quot; title=&quot;学习、使用并阅读库&quot;&gt;&lt;/a&gt;学习、使用并阅读库&lt;/h2&gt;&lt;p&gt;接下来最重要的一步是了解库。如果书籍教会你如何理解语言，则库教你如何表达它。对于库，你有两个重要的事情要做：使用它们并阅读它们的源代码。&lt;/p&gt;
&lt;p&gt;通过使用库，开始知道：jQuery、Backbone、underscore 和 React、Angular 、Ember 中的一个。当然，这不是说你必须使用这些库，但称职的 JavaScript 开发者都应该至少有这些库的使用经验（不管好坏）。&lt;/p&gt;
&lt;p&gt;对于提高 JavaScript 技能，第二重要的是阅读这些库的源代码。其中，我特别推荐 Backbone 和 underscore 的源代码，因为它们的代码写得特别漂亮。通过阅读和理解 underscore，你的函数编程能力将会得到提高。另一个是其他几个开发者推荐给我的库是 mootools （我个人没有 mootools 的使用和阅读经验，仅仅是传达信息。）&lt;/p&gt;
&lt;p&gt;理解上述列表里的其它库，如 React、Ember 等，可能有点难，但值得付出努力。至少略读其它库的源代码，看看它们是如何组织基础代码并尽量发现一些模式。其它一些值得使用和阅读源代码的库还有 d3、 highcharts 和 moment.js。&lt;/p&gt;
&lt;h2 id=&quot;练习与问自己问题&quot;&gt;&lt;a href=&quot;#练习与问自己问题&quot; class=&quot;headerlink&quot; title=&quot;练习与问自己问题&quot;&gt;&lt;/a&gt;练习与问自己问题&lt;/h2&gt;&lt;p&gt;成为优秀 JavaScript 开发者的下一步是做大量的实践。理论上，这些实践的重点不在 DOM，而是语言，所以确保有测试工具能在 node.js 上运行。在 node.js 上做大量小练习。通过不同的方式使用 JavaScript 的闭包、原型、array-extras (map, filter) 等。当你经过大量练习后，头脑里就会对 JavaScript 有基本的想法。&lt;/p&gt;
&lt;p&gt;我朋友 Armagan 是一名杰出的 JavaScript 程序员兼老师，他在课堂里使用的课本 &lt;a href=&quot;http://www.apress.com/9781590599082&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript 设计模式》&lt;/a&gt; 也是值得一看的。&lt;/p&gt;
&lt;p&gt;试着回答诸如：原型继承是如何工作的？闭包的定义是什么？this 关键字是如何改变的？如何使用 apply/bind/map/filter/call？收集一些 JavaScript 开发者常见问题并尝试用自己的语言解释它。用书面或口头的方式向别人解释这些概念，能极大地提高能力。在做实践的同时，尝试做“假设分析”。例如，“如果使用两次 bind，this 将会代表什么？jQuery 是如何确保 this 关键字是引用 jQuery 对象，而不是全局对象？这个库如何完成某个特性？”这些都是值得思考的常见问题。&lt;/p&gt;
&lt;h2 id=&quot;学习标准&quot;&gt;&lt;a href=&quot;#学习标准&quot; class=&quot;headerlink&quot; title=&quot;学习标准&quot;&gt;&lt;/a&gt;学习标准&lt;/h2&gt;&lt;p&gt;下一步是学习更多关于 EcmaScript 标准。找到一份最新的 EcmaScript 标准并尝试阅读它。除了这些，也要尝试学习即将推出的 JavaScript 特性，如 ES 6 和 ES 7 新增的。最近有一些新特性如：promises、modules、generators、comprehensions 和 again。可以通过专门的书来学习标准，如 Zakas 的 ( &lt;a href=&quot;https://leanpub.com/understandinges6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding EcmaScript 6&lt;/a&gt; ) 或 Dr. Axel Rauschmayer 的 ES6 书 ( &lt;a href=&quot;http://exploringjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring JS&lt;/a&gt; ) 。阅读标准是获取专业知识和发现语言新特性的主要来源。&lt;/p&gt;
&lt;h2 id=&quot;使用-web-上的资源&quot;&gt;&lt;a href=&quot;#使用-web-上的资源&quot; class=&quot;headerlink&quot; title=&quot;使用 web 上的资源&quot;&gt;&lt;/a&gt;使用 web 上的资源&lt;/h2&gt;&lt;p&gt;我之前提到使用 web 获取 web 知识的危险性，所以最后的建议是具体如何在 web 中获取最好的资源。Hacker News 是一个很好的资源，然而如果时刻关注它的话，将会花费较多时间，因为信噪比较低（表示 JavaScript 文章比例较低）。取而代之的是，关注 &lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Weekly&lt;/a&gt; 之类的每周文摘。随着时间的推移，你会看到哪些库或技术是备受关注的。在 Twitter，尝试去关注那些有影响力的 JavaScript 开发者。这里是 Tutsplus 列出的 &lt;a href=&quot;http://code.tutsplus.com/articles/33-developers-you-must-subscribe-to-as-a-javascript-junkie--net-18151&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;33 个值得关注的 JavaScript 开发者&lt;/a&gt;。其它在 web 上的资源还包括一些博客，如 &lt;a href=&quot;http://www.toptal.com/section/front-end&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toptal Blogs&lt;/a&gt;、&lt;a href=&quot;http://rmurphey.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rebecca Murphey’s blog&lt;/a&gt; （如果你对这个博客的帖子感兴趣，也可以看看 &lt;a href=&quot;http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Baseline for Front-End [JS] Developers: 2015&lt;/a&gt;）和 &lt;a href=&quot;http://www.nczonline.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nicholas Zakas’ blog&lt;/a&gt;。（如果你有其它好博客，请 Email 我，我会将它添加到该列表里。）&lt;/p&gt;
&lt;p&gt;另一个重要资源是大会视频和教育视频。对于大会，JSConf 系列都是高质量的。对于教育视频，我强烈建议 Pluralsight，因为他们拥有经验丰富的开发者准备的高质量课程。（我与 Pluralsgiht 没有隶属关系）&lt;/p&gt;
&lt;h2 id=&quot;浓缩版&quot;&gt;&lt;a href=&quot;#浓缩版&quot; class=&quot;headerlink&quot; title=&quot;浓缩版&quot;&gt;&lt;/a&gt;浓缩版&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从阅读书籍开始，因为书籍能为你提供精华信息。&lt;/li&gt;
&lt;li&gt;学习主要的库，如 jQuery、underscore、Backbone，并阅读它们的源代码。&lt;/li&gt;
&lt;li&gt;多实践并尝试用自己的话解释“继承”之类的常见 JavaScript 概念。对上述主题进行演讲和交流。&lt;/li&gt;
&lt;li&gt;仔细阅读最新标准，并开始使用该语言的最新特性。&lt;/li&gt;
&lt;li&gt;关注 web 资源，每周关注一次文摘或博客，或观看会议视频和视频教程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;一直反复这些并完成大量项目，将会极大地提高你的 JavaScript 编程能力。只有努力不懈，才有希望在几年后成为一名专家。我觉得自己是一名优秀的 JavaScript 程序员，离专家仍有一大段路要走，有很多技术需要在我接下来的学习生涯中学到。另外，随时可以通过 &lt;a href=&quot;&quot;&gt;atustun@ustunozgur.com&lt;/a&gt; 向我提出反馈和修正。&lt;/p&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://web.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt; - &lt;a href=&quot;http://www.jobbole.com/members/q574805242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刘健超-J.c&lt;/a&gt; 翻译，&lt;a href=&quot;http://www.jobbole.com/members/shutear&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shutear&lt;/a&gt; 校稿。未经许可，禁止转载！&lt;br&gt;英文出处：&lt;a href=&quot;http://blog.ustunozgur.com/javascript/programming/books/videos/2015/06/17/how_to_be_a_great_javascript_software_developer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ustun Ozgur&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;感谢您的阅读。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在成长的过程中，我的兴趣点不断发散，而且都是看似不相关的领域。我喜欢数学正如我喜欢历史一样。我的目标是成为一个 多才多艺的人 – 博学者-，能在多个领域成为优秀人才。这证实是一项艰巨的任务，我忽然面临着行行皆通，样样稀松的危险。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="translation" scheme="http://yoursite.com/tags/translation/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>实现类似 QQ音乐网页版 的单页面总结</title>
    <link href="http://yoursite.com/2015/08/23/2015-8-23-build-similar-qqmusice-spa/"/>
    <id>http://yoursite.com/2015/08/23/2015-8-23-build-similar-qqmusice-spa/</id>
    <published>2015-08-23T08:13:00.000Z</published>
    <updated>2016-08-09T13:14:09.809Z</updated>
    
    <content type="html">&lt;p&gt;最近需要对创业团队的网站进行改版，而我负责前端设计和实现。&lt;br&gt;下面是一些总结与体会：&lt;br&gt;当设计完成之前，我就跟和我配合的Java 后台说用iframe实现，结果说麻烦不肯，到最后突然对我说还是用iframe吧，说他以前也用过，很简单–！…其实我之间也基本没用iframe，对它比较陌生，但是 QQmusic 网页版就是用iframe 做的，印象比较深刻！  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我设计的页面总体结构是与QQmusic网页版类似，网页头部和脚部都是固定，中间内容是通过iframe来展示。&lt;/p&gt;
&lt;p&gt;用iframe之前，我想到要解决的问题有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;iframe虽然有height这个属性，但是每次加载到里面的内容都是不同的，而且我实现的部分页面是需要动态加载能容的。&lt;br&gt;我的解决办法是：&lt;br&gt;iframe 首次加载成功后和 &lt;code&gt;iframe&lt;/code&gt; 页面内有动态增加内容时（导致整体高度有变化）都调用下面这个函数，来设置 &lt;code&gt;iframe&lt;/code&gt; 高度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function iframeLoaded() {
    var contentFrame = document.getElementById(&amp;apos;contentFrame&amp;apos;);
    if(contentFrame) {
        contentFrame.height = contentFrame.contentWindow.document.documentElement.scrollHeight + &amp;quot;px&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为是做成像QQmusic网页版的单页面，所以我也利用hash变化来欺骗浏览器，让浏览器为我的页面跳转生成历史记录，但是后来发现，每次点击链接加载不用iframe时，都会生成两条相同的历史记录。这是为什么呢？后来发现，hash值改变会导致一次，iframe的src改变也会生成一次历史记录(包括hash的改变)。然后我又去看看QQmusic 是怎么实现只产生一次历史记录的，惊奇的发现，它的iframe的src一直没变（一直是 about:blank）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe name=&amp;quot;contentFrame&amp;quot; id=&amp;quot;contentFrame&amp;quot; width=&amp;quot;100%&amp;quot; height=&amp;quot;2207px&amp;quot; allowtransparency=&amp;quot;true&amp;quot; scrolling=&amp;quot;no&amp;quot; border=&amp;quot;0&amp;quot; frameborder=&amp;quot;0&amp;quot; src=&amp;quot;about:blank&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此发现我之前对iframe有些误解，之前认为iframe只能通过src来获取内容，其实个人认为正确的是：iframe中的内容不一定是通过设置src后获取的，也可以是通过其它方式（例如通过ajax获取html后替换原视图而成）；所以对于QQmusic来说，iframe只是一块渲染视图的容器，它里面显示的内容是由另外的逻辑来控制的。这样无须改变iframe的src（也就不会产生历史记录），从而可以动态修改iframe的内容了。如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.onload = function(){
    var iframe = document.getElementById(&amp;quot;iframe&amp;quot;)
    var newDiv = document.createElement(&amp;quot;div&amp;quot;)
    newDiv.innerHTML = &amp;quot;我要跑到iframe里&amp;quot;
    iframe.contentWindow.document.body.appendChild(newDiv)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于整体页面（用jQuery发出异步请求）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.ajax({
    url: &amp;quot;原本iframe的src值&amp;quot;,    // 改为异步请求加载
    type: &amp;quot;GET&amp;quot;
})
.done(function(data){
     var iframe = document.getElementById(&amp;quot;iframe&amp;quot;)
     iframe.contentWindow.document.documentElement.innerHTML = data;  // 获取后直接插到iframe
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，iframe的内容一直在改变，而它的src却一直是about:blank没变。因此也不会产生新的历史记录。&lt;br&gt;此时此刻，我心情是很开心的，然而，当我与iframe内的元素交互时，发现除了 CSS 的交互效果，&lt;script src=&quot;&quot;&gt;&lt;/script&gt;和写在&lt;script&gt;&lt;/script&gt;内的js代码都是不执行的（测试后发现直接添加到元素的onclick事件可以执行），而且在测试的过程中发现有时候CSS加载比较慢，导致HTML裸露出来，不知道为什么。这个要继续查查。&lt;/p&gt;
&lt;p&gt;所以，最后我不采用通过ajax获取内容，再添加到iframe的做法。&lt;br&gt;而是采用移除原来iframe，再新建一个iframe插入的方式，这种方式也是不会产生新的历史记录。&lt;/p&gt;
&lt;p&gt;解决了产生两条历史记录的问题后，剩下的问题就是iframe内的链接跳转，因为整体是通过主页面的hash值来路由的，所以iframe内的链接跳转是不能直接跳转的，他的跳转需要一定处理的流程：&lt;/p&gt;
&lt;p&gt;处理由iframe内发送的请求：&lt;br&gt;  ①首先接收iframe的参数&lt;br&gt;  ②根据参数生成对应的hash，并修改main_frame 的hash值&lt;br&gt;  ③根据hash值，修改iframe的src（我是通过删除原来的iframe，再添加新iframe的做法）&lt;/p&gt;
&lt;p&gt;如：主页面的全局有一个接收iframe内a标签的data-hash的函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function handleIframeRequst( iframeHash){
    window.location.hash = iframeHash;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设iframe内的一个a标签 ： &lt;a href=&quot;javascript:;&quot; data-hash=&quot;main&amp;sub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;br&gt;点击这个标签时，就会调用主页面的一个处理该data-hash的函数&lt;br&gt;parent.handleIframeRequst($(this).data(“hash”)); // 通过parent调用主页面的函数&lt;/p&gt;
&lt;p&gt;主页面接收参数后，修改自身的hash值，然后解析hash值，生成相应的 iframe src值。&lt;/p&gt;
&lt;p&gt;这样基本就可以将网站做成 类似 QQmusic 那样的单页面网站啦。 满足感 Up！Up！Up！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要对创业团队的网站进行改版，而我负责前端设计和实现。&lt;br&gt;下面是一些总结与体会：&lt;br&gt;当设计完成之前，我就跟和我配合的Java 后台说用iframe实现，结果说麻烦不肯，到最后突然对我说还是用iframe吧，说他以前也用过，很简单–！…其实我之间也基本没用iframe，对它比较陌生，但是 QQmusic 网页版就是用iframe 做的，印象比较深刻！  &lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="hash" scheme="http://yoursite.com/tags/hash/"/>
    
  </entry>
  
</feed>
